//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.49;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.49] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x4ab18a=_0x5ab4;(function(_0x2a8c1a,_0x51c658){const _0x3df5ea=_0x5ab4,_0x4a1ede=_0x2a8c1a();while(!![]){try{const _0x5f243f=-parseInt(_0x3df5ea(0x8f5))/0x1*(-parseInt(_0x3df5ea(0x2be))/0x2)+-parseInt(_0x3df5ea(0x89e))/0x3*(parseInt(_0x3df5ea(0x283))/0x4)+parseInt(_0x3df5ea(0x362))/0x5*(-parseInt(_0x3df5ea(0x149))/0x6)+-parseInt(_0x3df5ea(0x6ef))/0x7+-parseInt(_0x3df5ea(0x42f))/0x8*(-parseInt(_0x3df5ea(0x8ad))/0x9)+-parseInt(_0x3df5ea(0x991))/0xa*(-parseInt(_0x3df5ea(0x3ac))/0xb)+parseInt(_0x3df5ea(0x262))/0xc*(parseInt(_0x3df5ea(0x950))/0xd);if(_0x5f243f===_0x51c658)break;else _0x4a1ede['push'](_0x4a1ede['shift']());}catch(_0x5c7343){_0x4a1ede['push'](_0x4a1ede['shift']());}}}(_0x5edb,0xbcc1d));var label=_0x4ab18a(0x94c),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4ab18a(0xa47)](function(_0x1a65e4){const _0x5801e7=_0x4ab18a;return _0x1a65e4[_0x5801e7(0x424)]&&_0x1a65e4[_0x5801e7(0x49a)][_0x5801e7(0xb2)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0x4ab18a(0x3f5)]||{},VisuMZ[_0x4ab18a(0x3cb)]=function(_0x25e454,_0x1a419d){const _0x3d0313=_0x4ab18a;for(const _0x3a3119 in _0x1a419d){if(_0x3d0313(0x2ec)!=='BwCgc'){if(_0x3a3119[_0x3d0313(0x378)](/(.*):(.*)/i)){const _0x5bdb9e=String(RegExp['$1']),_0x14659d=String(RegExp['$2'])[_0x3d0313(0x9e5)]()[_0x3d0313(0x3a3)]();let _0x286825,_0x3dbaf0,_0x41d4b5;switch(_0x14659d){case'NUM':_0x286825=_0x1a419d[_0x3a3119]!==''?Number(_0x1a419d[_0x3a3119]):0x0;break;case _0x3d0313(0x84):_0x3dbaf0=_0x1a419d[_0x3a3119]!==''?JSON[_0x3d0313(0x798)](_0x1a419d[_0x3a3119]):[],_0x286825=_0x3dbaf0['map'](_0x4ef154=>Number(_0x4ef154));break;case _0x3d0313(0x6bd):_0x286825=_0x1a419d[_0x3a3119]!==''?eval(_0x1a419d[_0x3a3119]):null;break;case _0x3d0313(0x463):_0x3dbaf0=_0x1a419d[_0x3a3119]!==''?JSON[_0x3d0313(0x798)](_0x1a419d[_0x3a3119]):[],_0x286825=_0x3dbaf0[_0x3d0313(0x71a)](_0x9d7467=>eval(_0x9d7467));break;case _0x3d0313(0xdc):_0x286825=_0x1a419d[_0x3a3119]!==''?JSON['parse'](_0x1a419d[_0x3a3119]):'';break;case _0x3d0313(0x2c7):_0x3dbaf0=_0x1a419d[_0x3a3119]!==''?JSON['parse'](_0x1a419d[_0x3a3119]):[],_0x286825=_0x3dbaf0[_0x3d0313(0x71a)](_0x4b578e=>JSON[_0x3d0313(0x798)](_0x4b578e));break;case _0x3d0313(0x543):_0x286825=_0x1a419d[_0x3a3119]!==''?new Function(JSON[_0x3d0313(0x798)](_0x1a419d[_0x3a3119])):new Function('return\x200');break;case'ARRAYFUNC':_0x3dbaf0=_0x1a419d[_0x3a3119]!==''?JSON[_0x3d0313(0x798)](_0x1a419d[_0x3a3119]):[],_0x286825=_0x3dbaf0[_0x3d0313(0x71a)](_0x218874=>new Function(JSON[_0x3d0313(0x798)](_0x218874)));break;case'STR':_0x286825=_0x1a419d[_0x3a3119]!==''?String(_0x1a419d[_0x3a3119]):'';break;case _0x3d0313(0x8b3):_0x3dbaf0=_0x1a419d[_0x3a3119]!==''?JSON['parse'](_0x1a419d[_0x3a3119]):[],_0x286825=_0x3dbaf0[_0x3d0313(0x71a)](_0x32a338=>String(_0x32a338));break;case _0x3d0313(0xa8f):_0x41d4b5=_0x1a419d[_0x3a3119]!==''?JSON[_0x3d0313(0x798)](_0x1a419d[_0x3a3119]):{},_0x25e454[_0x5bdb9e]={},VisuMZ[_0x3d0313(0x3cb)](_0x25e454[_0x5bdb9e],_0x41d4b5);continue;case'ARRAYSTRUCT':_0x3dbaf0=_0x1a419d[_0x3a3119]!==''?JSON[_0x3d0313(0x798)](_0x1a419d[_0x3a3119]):[],_0x286825=_0x3dbaf0['map'](_0x1e5a5d=>VisuMZ['ConvertParams']({},JSON[_0x3d0313(0x798)](_0x1e5a5d)));break;default:continue;}_0x25e454[_0x5bdb9e]=_0x286825;}}else{_0x1998f6['prototype'][_0x3d0313(0x96a)][_0x3d0313(0x45b)](this);const _0x435da6=this[_0x3d0313(0xaf0)]();_0x435da6===_0x3d0313(0x1a7)&&this[_0x3d0313(0x39f)]();}}return _0x25e454;},(_0x2131e4=>{const _0x494926=_0x4ab18a,_0x22f029=_0x2131e4[_0x494926(0x8ff)];for(const _0x2fe308 of dependencies){if(!Imported[_0x2fe308]){if(_0x494926(0x271)!==_0x494926(0x271))_0x25b7c2[_0x494926(0x94c)]['Scene_ItemBase_applyItem'][_0x494926(0x45b)](this),this[_0x494926(0x925)]()[_0x494926(0x7d0)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x401d6a[_0x494926(0x288)]=[]),_0x294e64[_0x494926(0x430)](this[_0x494926(0x925)]())&&(_0x495591['_commonEventQueue']=[]);else{alert(_0x494926(0x15c)[_0x494926(0x278)](_0x22f029,_0x2fe308)),SceneManager[_0x494926(0x7f4)]();break;}}}const _0x5a36f8=_0x2131e4[_0x494926(0x49a)];if(_0x5a36f8[_0x494926(0x378)](/\[Version[ ](.*?)\]/i)){const _0x4f4713=Number(RegExp['$1']);_0x4f4713!==VisuMZ[label][_0x494926(0x838)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x494926(0x278)](_0x22f029,_0x4f4713)),SceneManager[_0x494926(0x7f4)]());}if(_0x5a36f8['match'](/\[Tier[ ](\d+)\]/i)){if(_0x494926(0xa4)===_0x494926(0xa4)){const _0x5bb02a=Number(RegExp['$1']);if(_0x5bb02a<tier){if('mFQdE'===_0x494926(0xa77))alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x22f029,_0x5bb02a,tier)),SceneManager[_0x494926(0x7f4)]();else{if(!this['_battler'])return![];if(this[_0x494926(0x69e)]['isActor']())return!![];const _0x58bb59=this[_0x494926(0x69e)][_0x494926(0x637)]()[_0x494926(0x7d0)];if(_0x58bb59['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x58bb59[_0x494926(0x378)](/<HIDE HP GAUGE>/i))return![];const _0x84fad4=_0x5aedb9['BattleCore'][_0x494926(0x3f5)]['HpGauge'];if(_0x84fad4['RequiresDefeat']){if(_0x84fad4['BTestBypass']&&_0x15ecce[_0x494926(0x54c)]())return!![];if(this['_battler'][_0x494926(0x7e9)])return![];return this[_0x494926(0x69e)][_0x494926(0x6bb)]();}return!![];}}else tier=Math[_0x494926(0x877)](_0x5bb02a,tier);}else _0x2feee6['damage'][_0x494926(0x33e)]=!![];}VisuMZ['ConvertParams'](VisuMZ[label][_0x494926(0x3f5)],_0x2131e4[_0x494926(0x9fa)]);})(pluginData),VisuMZ[_0x4ab18a(0xa7c)]=function(_0x11d369){const _0x119124=_0x4ab18a;let _0x488851=[];for(const _0x1ffdf7 of _0x11d369){if(_0x119124(0xa12)!==_0x119124(0x775))_0x488851=_0x488851[_0x119124(0x11d)](VisuMZ['ConvertActionSequenceTarget'](_0x1ffdf7));else{if(this['battleLayoutStyle']()===_0x119124(0x1a7))return this[_0x119124(0x459)]();else return this[_0x119124(0x602)]()?this['skillItemWindowRectMiddle']():_0x2d990d[_0x119124(0x94c)][_0x119124(0x9ea)][_0x119124(0x45b)](this);}}return _0x488851[_0x119124(0xa47)](_0x543fdb=>_0x543fdb);},VisuMZ[_0x4ab18a(0x3b4)]=function(_0x25fccf){const _0x4c2c82=_0x4ab18a,_0x320c5d=BattleManager[_0x4c2c82(0xe6)]()['filter'](_0x1f72ab=>_0x1f72ab&&_0x1f72ab['isAppeared']()),_0x4b6b92=BattleManager[_0x4c2c82(0xf7)],_0x158c31=BattleManager[_0x4c2c82(0x2d8)],_0x2e59ef=BattleManager[_0x4c2c82(0x4ef)]?BattleManager[_0x4c2c82(0x4ef)][_0x4c2c82(0x2e2)](0x0):_0x320c5d;_0x25fccf=_0x25fccf['toLowerCase']()[_0x4c2c82(0x3a3)]();if(_0x25fccf==='user')return[_0x4b6b92];else{if(_0x25fccf==='current\x20target')return[_0x158c31];else{if(_0x25fccf===_0x4c2c82(0x800)){if(_0x4c2c82(0xf4)!==_0x4c2c82(0xf4))return!![];else{if(_0x158c31){if('zyPIn'===_0x4c2c82(0x127)){const _0x25fb14=_0x2e59ef[_0x4c2c82(0x50a)](_0x158c31);return _0x25fb14>=0x0?[_0x2e59ef[_0x25fb14-0x1]||_0x158c31]:[_0x158c31];}else _0x86c6b7=_0xc882d0[_0x4c2c82(0x277)](/\x1I\[(\d+)\]/gi,''),_0x12f4ad=_0x427a3b[_0x4c2c82(0x277)](/\\I\[(\d+)\]/gi,'');}}}else{if(_0x25fccf===_0x4c2c82(0x409)){if(_0x4c2c82(0x9c9)===_0x4c2c82(0x714))_0x4c090c[_0x4c2c82(0x94c)][_0x4c2c82(0x32a)][_0x4c2c82(0x45b)](this,_0x57fcd3);else{if(_0x158c31){if(_0x4c2c82(0x1ce)===_0x4c2c82(0x1ce)){const _0x3ef1d0=_0x2e59ef['indexOf'](_0x158c31);return _0x3ef1d0>=0x0?[_0x2e59ef[_0x3ef1d0+0x1]||_0x158c31]:[_0x158c31];}else{const _0x422bfc=this['_actorCommandWindow'];_0x422bfc[_0x4c2c82(0x9eb)](_0x4c2c82(0x88e),this['actorCommandEscape'][_0x4c2c82(0xae2)](this)),_0x422bfc[_0x4c2c82(0x9eb)]('autoBattle',this[_0x4c2c82(0x9df)]['bind'](this)),_0x422bfc[_0x4c2c82(0x9eb)](_0x4c2c82(0x7e2),this[_0x4c2c82(0x5ad)][_0x4c2c82(0xae2)](this)),_0x1154c7[_0x4c2c82(0x14b)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x422bfc[_0x4c2c82(0x539)][_0x4c2c82(0x506)]:_0x422bfc[_0x4c2c82(0x9eb)](_0x4c2c82(0x506),this[_0x4c2c82(0x6f9)]['bind'](this)));}}}}else{if(_0x25fccf===_0x4c2c82(0x6cd))return _0x2e59ef;else{if(_0x25fccf===_0x4c2c82(0x9bb)){if('himkq'!=='Mxnyc')return[_0x4b6b92][_0x4c2c82(0x11d)](_0x2e59ef);else _0x117ac3[_0x4c2c82(0x448)](_0x4c2c82(0x680),_0x2c6f60,_0x4a2a47);}else{if(_0x25fccf===_0x4c2c82(0x103))return _0x320c5d[_0x4c2c82(0xa47)](_0xc84483=>_0xc84483!==_0x4b6b92&&!_0x2e59ef[_0x4c2c82(0xb2)](_0xc84483)&&_0xc84483[_0x4c2c82(0x13f)]());}}}}}}if(_0x4b6b92){if(_0x25fccf===_0x4c2c82(0x887)){if('jhnkw'!=='jhnkw'){const _0x320a71=_0xb28334(_0x5b6ed4['$1'])[_0x4c2c82(0x9e7)](/[\r\n]+/)[_0x4c2c82(0x8d3)]('');_0x5c99b2[_0x4c2c82(0x8ff)]=_0x3513cb['processRandomizedData'](_0x320a71);}else return _0x4b6b92['friendsUnit']()[_0x4c2c82(0x8bd)]();}else{if(_0x25fccf===_0x4c2c82(0x6d8))return _0x4b6b92[_0x4c2c82(0xadc)]()[_0x4c2c82(0x8bd)]()[_0x4c2c82(0xa47)](_0x1c2163=>_0x1c2163!==_0x4b6b92);else{if(_0x25fccf===_0x4c2c82(0x821))return _0x4b6b92['friendsUnit']()[_0x4c2c82(0x8bd)]()[_0x4c2c82(0xa47)](_0x5c2de4=>_0x5c2de4!==_0x158c31);else{if(_0x25fccf===_0x4c2c82(0x575))return _0x4b6b92[_0x4c2c82(0xadc)]()[_0x4c2c82(0xe9)]();else{if(_0x25fccf[_0x4c2c82(0x378)](/FRIEND INDEX (\d+)/i)){const _0x4969bf=Number(RegExp['$1']);return[_0x4b6b92[_0x4c2c82(0xadc)]()[_0x4c2c82(0x533)]()[_0x4969bf]];}}}}}if(_0x25fccf===_0x4c2c82(0x864))return _0x4b6b92['opponentsUnit']()['aliveMembers']();else{if(_0x25fccf==='alive\x20opponents\x20not\x20target')return _0x4b6b92[_0x4c2c82(0x123)]()['aliveMembers']()[_0x4c2c82(0xa47)](_0x4b0ff3=>_0x4b0ff3!==_0x158c31);else{if(_0x25fccf==='dead\x20opponents'){if(_0x4c2c82(0x23d)!=='oHBaM')return _0x4b6b92[_0x4c2c82(0x123)]()[_0x4c2c82(0xe9)]();else this[_0x4c2c82(0x9d1)]=(this[_0x4c2c82(0x9d1)]*(_0x12204d-0x1)+this[_0x4c2c82(0x201)])/_0x57dee5;}else{if(_0x25fccf['match'](/OPPONENT INDEX (\d+)/i)){const _0x961111=Number(RegExp['$1']);return[_0x4b6b92[_0x4c2c82(0x123)]()[_0x4c2c82(0x533)]()[_0x961111]];}}}}}if(_0x25fccf==='alive\x20actors')return $gameParty['aliveMembers']();else{if(_0x25fccf==='alive\x20actors\x20not\x20user')return _0x4c2c82(0x664)!==_0x4c2c82(0x245)?$gameParty['aliveMembers']()[_0x4c2c82(0xa47)](_0xeae4cc=>_0xeae4cc!==_0x4b6b92):null;else{if(_0x25fccf===_0x4c2c82(0x28d))return $gameParty[_0x4c2c82(0x8bd)]()[_0x4c2c82(0xa47)](_0xbcae92=>_0xbcae92!==_0x158c31);else{if(_0x25fccf===_0x4c2c82(0x363))return $gameParty[_0x4c2c82(0xe9)]();else{if(_0x25fccf[_0x4c2c82(0x378)](/ACTOR INDEX (\d+)/i)){if(_0x4c2c82(0x720)!==_0x4c2c82(0x720))this[_0x4c2c82(0x448)]('performCollapse',_0x3d067d);else{const _0x203eab=Number(RegExp['$1']);return[$gameParty[_0x4c2c82(0x533)]()[_0x203eab]];}}else{if(_0x25fccf['match'](/ACTOR ID (\d+)/i)){const _0x45d73b=Number(RegExp['$1']);return[$gameActors['actor'](_0x45d73b)];}}}}}}if(_0x25fccf==='alive\x20enemies')return $gameTroop[_0x4c2c82(0x8bd)]();else{if(_0x25fccf===_0x4c2c82(0x616))return $gameTroop[_0x4c2c82(0x8bd)]()[_0x4c2c82(0xa47)](_0x13418c=>_0x13418c!==_0x4b6b92);else{if(_0x25fccf===_0x4c2c82(0x38c)){if('mcNEz'!=='gqzlK')return $gameTroop[_0x4c2c82(0x8bd)]()[_0x4c2c82(0xa47)](_0x456daa=>_0x456daa!==_0x158c31);else{const _0x100b80=_0x2553d7['makeDeepCopy'](_0x3ab598);_0x100b80[_0x4c2c82(0x6fb)]=![],_0x100b80[_0x4c2c82(0x61c)]=![],_0x100b80[_0x4c2c82(0x9f6)]=0x0,this[_0x4c2c82(0x51a)][_0x4c2c82(0x448)](_0x100b80);}}else{if(_0x25fccf==='dead\x20enemies')return $gameTroop[_0x4c2c82(0xe9)]();else{if(_0x25fccf[_0x4c2c82(0x378)](/ENEMY INDEX (\d+)/i)){const _0x2d783f=Number(RegExp['$1']);return[$gameTroop[_0x4c2c82(0x533)]()[_0x2d783f]];}else{if(_0x25fccf[_0x4c2c82(0x378)](/ENEMY ID (\d+)/i)){if(_0x4c2c82(0x942)===_0x4c2c82(0x942)){const _0x3c4e49=Number(RegExp['$1']);return $gameTroop[_0x4c2c82(0x8bd)]()[_0x4c2c82(0xa47)](_0x334005=>_0x334005[_0x4c2c82(0x432)]()===_0x3c4e49);}else this[_0x4c2c82(0x19b)](),this['clearFreezeMotionForWeapons']();}}}}}}if(_0x25fccf==='alive\x20battlers'){if(_0x4c2c82(0x89)===_0x4c2c82(0x89))return _0x320c5d[_0x4c2c82(0xa47)](_0x4e78f7=>_0x4e78f7['isAlive']());else this['showHelpWindow']();}else{if(_0x25fccf===_0x4c2c82(0xabd))return _0x320c5d[_0x4c2c82(0xa47)](_0x59a9cd=>_0x59a9cd[_0x4c2c82(0x3ab)]()&&_0x59a9cd!==_0x4b6b92);else{if(_0x25fccf==='alive\x20battlers\x20not\x20target')return _0x320c5d[_0x4c2c82(0xa47)](_0x295f49=>_0x295f49[_0x4c2c82(0x3ab)]()&&_0x295f49!==_0x158c31);else{if(_0x25fccf===_0x4c2c82(0x1d9))return _0x320c5d[_0x4c2c82(0xa47)](_0x35bdd3=>_0x35bdd3[_0x4c2c82(0x9b4)]());}}}return[];},PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Set_SetupAction',_0x4bbb36=>{const _0x55536b=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x55536b(0x3cb)](_0x4bbb36,_0x4bbb36);const _0x4c65fd=$gameTemp[_0x55536b(0x9d8)](),_0x3196a1=BattleManager['_action'],_0x104127=BattleManager[_0x55536b(0xf7)],_0x481ed2=BattleManager[_0x55536b(0x4ef)]?BattleManager[_0x55536b(0x4ef)][_0x55536b(0x2e2)](0x0):[],_0x1a28bc=BattleManager[_0x55536b(0x84a)];if(!_0x4c65fd||!_0x3196a1||!_0x104127)return;if(!_0x3196a1[_0x55536b(0x925)]())return;if(_0x4bbb36[_0x55536b(0xfe)])_0x1a28bc[_0x55536b(0x80d)](_0x104127,_0x3196a1[_0x55536b(0x925)]());_0x4bbb36[_0x55536b(0x544)]&&_0x1a28bc['push'](_0x55536b(0x252),_0x104127,_0x481ed2,!![]);if(_0x4bbb36['ActionStart'])_0x1a28bc['push'](_0x55536b(0x21d),_0x104127,_0x3196a1);if(_0x4bbb36['WaitForMovement'])_0x1a28bc[_0x55536b(0x448)](_0x55536b(0x259));if(_0x4bbb36[_0x55536b(0x13a)])_0x1a28bc[_0x55536b(0x448)](_0x55536b(0xa08),_0x104127,_0x3196a1);if(_0x4bbb36[_0x55536b(0x407)])_0x1a28bc[_0x55536b(0x448)](_0x55536b(0x70a));_0x4c65fd[_0x55536b(0x37d)](_0x55536b(0xa7));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Set_WholeActionSet',_0x1d47d9=>{const _0x3a272e=_0x4ab18a;if(!SceneManager[_0x3a272e(0xae)]())return;VisuMZ[_0x3a272e(0x3cb)](_0x1d47d9,_0x1d47d9);const _0x5324c4=$gameTemp[_0x3a272e(0x9d8)](),_0xfb214d=BattleManager['_action'],_0x5e19b3=BattleManager[_0x3a272e(0xf7)],_0x2892b7=BattleManager[_0x3a272e(0x4ef)]?BattleManager[_0x3a272e(0x4ef)][_0x3a272e(0x2e2)](0x0):[],_0x11724c=BattleManager[_0x3a272e(0x84a)],_0x38fa01=_0x1d47d9[_0x3a272e(0x215)]??![];if(!_0x5324c4||!_0xfb214d||!_0x5e19b3)return;if(!_0xfb214d[_0x3a272e(0x925)]())return;let _0x2a5b96=_0x38fa01?_0x11724c['getDualWieldTimes'](_0x5e19b3):0x1;for(let _0x44077a=0x0;_0x44077a<_0x2a5b96;_0x44077a++){_0x38fa01&&_0x5e19b3['isActor']()&&_0x11724c[_0x3a272e(0x448)](_0x3a272e(0x680),_0x5e19b3,_0x44077a);if(_0x1d47d9[_0x3a272e(0x81c)])_0x11724c[_0x3a272e(0x448)](_0x3a272e(0xa23),_0x5e19b3,_0xfb214d);if(_0x1d47d9[_0x3a272e(0xaa4)]>0x0)_0x11724c['push'](_0x3a272e(0x770),_0x1d47d9[_0x3a272e(0xaa4)]);if(_0x1d47d9[_0x3a272e(0x818)])_0x11724c[_0x3a272e(0x448)]('showAnimation',_0x5e19b3,_0x2892b7,_0xfb214d[_0x3a272e(0x925)]()[_0x3a272e(0xa0a)]);if(_0x1d47d9[_0x3a272e(0x407)])_0x11724c['push'](_0x3a272e(0x70a));for(const _0xa53c25 of _0x2892b7){if(_0x3a272e(0x8a7)==='rigrz')_0x5d9e32[_0x3a272e(0x49d)][_0x3a272e(0x6ec)]['call'](this);else{if(!_0xa53c25)continue;if(_0x1d47d9['ActionEffect'])_0x11724c[_0x3a272e(0x448)](_0x3a272e(0x7c7),_0x5e19b3,_0xa53c25);}}}_0x38fa01&&_0x5e19b3['isActor']()&&_0x11724c['push']('clearActiveWeaponSet',_0x5e19b3);if(_0x1d47d9[_0x3a272e(0x544)])_0x11724c['push'](_0x3a272e(0x252),_0x5e19b3,_0x2892b7,![]);_0x5324c4[_0x3a272e(0x37d)](_0x3a272e(0xa7));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x8ab),_0x579b1c=>{const _0x222770=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x222770(0x3cb)](_0x579b1c,_0x579b1c);const _0x1d034f=$gameTemp[_0x222770(0x9d8)](),_0x4c6f9e=BattleManager[_0x222770(0x605)],_0x19ee70=BattleManager[_0x222770(0xf7)],_0x344990=BattleManager[_0x222770(0x4ef)]?BattleManager['_allTargets'][_0x222770(0x2e2)](0x0):[],_0x3bbb47=BattleManager[_0x222770(0x84a)],_0x544e9b=_0x579b1c[_0x222770(0x215)]??![];if(!_0x1d034f||!_0x4c6f9e||!_0x19ee70)return;if(!_0x4c6f9e[_0x222770(0x925)]())return;let _0x247462=_0x544e9b?_0x3bbb47[_0x222770(0x15e)](_0x19ee70):0x1;for(let _0x161de4=0x0;_0x161de4<_0x247462;_0x161de4++){if('TAqjb'!==_0x222770(0x842)){if(!_0x7a2086[_0x222770(0xae)]())return null;if(!_0x5b0982[_0x222770(0xa10)]['_spriteset'])return null;return _0x4fe2ba[_0x222770(0xa10)]['_spriteset'][_0x222770(0x89f)](this);}else for(const _0x243be5 of _0x344990){if(_0x222770(0x6bc)===_0x222770(0x986))_0x5277c7=_0xec3367;else{if(!_0x243be5)continue;if(_0x544e9b&&_0x19ee70['isActor']()){if(_0x222770(0x65a)===_0x222770(0x7a6)){const _0x2b4676=this[_0x222770(0x1a3)](this['index']());let _0x2efca8=this[_0x222770(0x95f)](this[_0x222770(0xa34)]());_0x2efca8=_0x2efca8['replace'](/\\I\[(\d+)\]/gi,''),_0x5cbefc[_0x222770(0x834)](),this[_0x222770(0x8cd)](_0x2efca8,_0x2b4676),this[_0x222770(0x128)](_0x2efca8,_0x2b4676),this[_0x222770(0x94d)](_0x2efca8,_0x2b4676);}else _0x3bbb47[_0x222770(0x448)]('setActiveWeaponSet',_0x19ee70,_0x161de4);}if(_0x579b1c[_0x222770(0x81c)])_0x3bbb47['push'](_0x222770(0xa23),_0x19ee70,_0x4c6f9e);if(_0x579b1c['WaitCount1']>0x0)_0x3bbb47['push']('waitCount',_0x579b1c[_0x222770(0xad2)]);if(_0x579b1c[_0x222770(0x818)])_0x3bbb47['push']('showAnimation',_0x19ee70,[_0x243be5],_0x4c6f9e[_0x222770(0x925)]()[_0x222770(0xa0a)]);if(_0x579b1c[_0x222770(0x825)]>0x0)_0x3bbb47[_0x222770(0x448)](_0x222770(0x770),_0x579b1c['WaitCount2']);if(_0x579b1c[_0x222770(0x789)])_0x3bbb47['push']('actionEffect',_0x19ee70,_0x243be5);}}}if(_0x544e9b&&_0x19ee70[_0x222770(0x526)]()){if(_0x222770(0x70c)==='VNcAM'){let _0xf52c4c=0x1;return _0xf52c4c*=this['_flipScaleX'],_0xf52c4c*=this[_0x222770(0x4f5)],_0xf52c4c;}else _0x3bbb47[_0x222770(0x448)](_0x222770(0x2ad),_0x19ee70);}if(_0x579b1c[_0x222770(0x544)])_0x3bbb47[_0x222770(0x448)]('applyImmortal',_0x19ee70,_0x344990,![]);_0x1d034f[_0x222770(0x37d)](_0x222770(0xa7));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x525),_0x3ade95=>{const _0xd31127=_0x4ab18a;if(!SceneManager[_0xd31127(0xae)]())return;VisuMZ[_0xd31127(0x3cb)](_0x3ade95,_0x3ade95);const _0xa70362=$gameTemp['getLastPluginCommandInterpreter'](),_0x49c3e8=BattleManager[_0xd31127(0x605)],_0x297504=BattleManager[_0xd31127(0xf7)],_0x433d28=BattleManager['_allTargets']?BattleManager[_0xd31127(0x4ef)]['slice'](0x0):[],_0x4424bf=BattleManager[_0xd31127(0x84a)];if(!_0xa70362||!_0x49c3e8||!_0x297504)return;if(!_0x49c3e8[_0xd31127(0x925)]())return;if(_0x3ade95[_0xd31127(0x544)])_0x4424bf['push'](_0xd31127(0x252),_0x297504,_0x433d28,![]);if(_0x3ade95[_0xd31127(0x5c2)])_0x4424bf[_0xd31127(0x448)](_0xd31127(0x4e8));if(_0x3ade95[_0xd31127(0x181)])_0x4424bf[_0xd31127(0x448)]('waitForEffect');if(_0x3ade95[_0xd31127(0x7b8)])_0x4424bf[_0xd31127(0x448)](_0xd31127(0x7e0));if(_0x3ade95[_0xd31127(0x899)])_0x4424bf['push'](_0xd31127(0x325),_0x297504);if(_0x3ade95[_0xd31127(0x960)])_0x4424bf[_0xd31127(0x448)](_0xd31127(0x259));_0xa70362[_0xd31127(0x37d)](_0xd31127(0xa7));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x2f9),_0x12c227=>{const _0x254acf=_0x4ab18a;if(!SceneManager[_0x254acf(0xae)]())return;if(!Imported[_0x254acf(0x7c0)])return;VisuMZ[_0x254acf(0x3cb)](_0x12c227,_0x12c227);const _0x2c0e51=$gameTemp['getLastPluginCommandInterpreter'](),_0x33a25d=_0x12c227[_0x254acf(0xa2f)];if(!_0x2c0e51)return;$gameScreen[_0x254acf(0x2aa)](_0x12c227['Angle'],_0x12c227[_0x254acf(0x532)],_0x12c227[_0x254acf(0x5c7)]);if(_0x33a25d)_0x2c0e51[_0x254acf(0x37d)](_0x254acf(0x548));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x90c),_0xc795e2=>{const _0xb17f92=_0x4ab18a;if(!SceneManager[_0xb17f92(0xae)]())return;if(!Imported[_0xb17f92(0x7c0)])return;VisuMZ[_0xb17f92(0x3cb)](_0xc795e2,_0xc795e2);const _0x1ad09d=$gameTemp[_0xb17f92(0x9d8)](),_0x161503=_0xc795e2[_0xb17f92(0xa2f)];if(!_0x1ad09d)return;$gameScreen['setBattleAngle'](0x0,_0xc795e2['Duration'],_0xc795e2['EasingType']);if(_0x161503)_0x1ad09d[_0xb17f92(0x37d)](_0xb17f92(0x548));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Angle_WaitForAngle',_0x3f2caa=>{const _0x1dc7d0=_0x4ab18a;if(!SceneManager[_0x1dc7d0(0xae)]())return;if(!Imported[_0x1dc7d0(0x7c0)])return;const _0x4b0edc=$gameTemp[_0x1dc7d0(0x9d8)]();if(!_0x4b0edc)return;_0x4b0edc['setWaitMode'](_0x1dc7d0(0x548));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x613),_0x28c144=>{const _0x4bc38f=_0x4ab18a;if(!SceneManager[_0x4bc38f(0xae)]())return;VisuMZ[_0x4bc38f(0x3cb)](_0x28c144,_0x28c144);const _0x37d23a=$gameTemp[_0x4bc38f(0x9d8)](),_0x24de31=BattleManager[_0x4bc38f(0x605)],_0x4735cf=BattleManager[_0x4bc38f(0xf7)],_0x9c5993=VisuMZ[_0x4bc38f(0xa7c)](_0x28c144['Targets']),_0x38bb06=_0x28c144[_0x4bc38f(0x5d9)],_0x1e26d7=BattleManager['_logWindow'];if(!_0x37d23a||!_0x24de31||!_0x4735cf)return;if(!_0x24de31[_0x4bc38f(0x925)]())return;let _0xc91c8b=_0x24de31[_0x4bc38f(0x925)]()['animationId'];if(_0xc91c8b<0x0)_0xc91c8b=_0x4735cf[_0x4bc38f(0x3dc)]();$gameTemp[_0x4bc38f(0x9b2)](_0x9c5993,_0xc91c8b,_0x38bb06),_0x28c144[_0x4bc38f(0x407)]&&_0x37d23a[_0x4bc38f(0x37d)](_0x4bc38f(0x102));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x710),_0x5aba5b=>{const _0x51f8e3=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5aba5b,_0x5aba5b);const _0x3a0fe0=$gameTemp[_0x51f8e3(0x9d8)](),_0x45c123=BattleManager[_0x51f8e3(0xf7)],_0x40968e=VisuMZ['CreateActionSequenceTargets'](_0x5aba5b[_0x51f8e3(0x2ab)]),_0x171b65=_0x5aba5b[_0x51f8e3(0x5d9)],_0x1e9c8e=BattleManager[_0x51f8e3(0x84a)];if(!_0x3a0fe0||!_0x45c123)return;const _0x188ae9=_0x45c123[_0x51f8e3(0x3dc)]();$gameTemp[_0x51f8e3(0x9b2)](_0x40968e,_0x188ae9,_0x171b65),_0x5aba5b[_0x51f8e3(0x407)]&&_0x3a0fe0['setWaitMode'](_0x51f8e3(0x102));}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Animation_AttackAnimation2',_0x38f544=>{const _0x4cd961=_0x4ab18a;if(!SceneManager[_0x4cd961(0xae)]())return;VisuMZ[_0x4cd961(0x3cb)](_0x38f544,_0x38f544);const _0x11c884=_0x3f0f68['attackAnimationIdSlot'](_0x38f544[_0x4cd961(0x9db)]);if(_0x11c884<=0x0)return;const _0xca211a=$gameTemp[_0x4cd961(0x9d8)](),_0x3f0f68=BattleManager['_subject'],_0x31f185=VisuMZ[_0x4cd961(0xa7c)](_0x38f544[_0x4cd961(0x2ab)]),_0x21ffa6=_0x38f544[_0x4cd961(0x5d9)],_0x4f2911=BattleManager[_0x4cd961(0x84a)];if(!_0xca211a||!_0x3f0f68)return;$gameTemp[_0x4cd961(0x9b2)](_0x31f185,_0x11c884,_0x21ffa6),_0x38f544[_0x4cd961(0x407)]&&_0xca211a['setWaitMode'](_0x4cd961(0x102));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Animation_CastAnimation',_0x3ffa3f=>{const _0x1b326c=_0x4ab18a;if(!SceneManager[_0x1b326c(0xae)]())return;VisuMZ[_0x1b326c(0x3cb)](_0x3ffa3f,_0x3ffa3f);const _0x15129a=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ec610=BattleManager[_0x1b326c(0x605)],_0x12c7c3=_0x3ffa3f[_0x1b326c(0x5d9)],_0x2c9e60=VisuMZ[_0x1b326c(0xa7c)](_0x3ffa3f[_0x1b326c(0x2ab)]);if(!_0x15129a||!_0x5ec610)return;if(!_0x5ec610[_0x1b326c(0x925)]())return;for(const _0x2974d9 of _0x2c9e60){if(!_0x2974d9)continue;_0x2974d9[_0x1b326c(0xa08)](_0x5ec610,_0x12c7c3);}if(_0x3ffa3f['WaitForAnimation'])_0x15129a[_0x1b326c(0x37d)](_0x1b326c(0x102));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x4b6),_0x551638=>{const _0x5d4821=_0x4ab18a;VisuMZ[_0x5d4821(0x3cb)](_0x551638,_0x551638);const _0x13c6ba=$gameTemp[_0x5d4821(0x9d8)](),_0x476d88=VisuMZ[_0x5d4821(0xa7c)](_0x551638['Targets']),_0x318c76=_0x551638[_0x5d4821(0x324)];if(!_0x318c76)return;for(const _0x166ef9 of _0x476d88){if(!_0x166ef9)continue;if(!_0x166ef9[_0x5d4821(0x526)]())continue;_0x166ef9['setBattlePortrait'](_0x318c76);}}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x4db),_0x4fff31=>{const _0x1b9434=_0x4ab18a;if(!SceneManager[_0x1b9434(0xa10)])return;if(!SceneManager['_scene'][_0x1b9434(0x6f4)])return;if(!Imported[_0x1b9434(0x1fc)])return;VisuMZ[_0x1b9434(0x3cb)](_0x4fff31,_0x4fff31);const _0x1f4c07=$gameTemp[_0x1b9434(0x9d8)](),_0x98e6ab=Math[_0x1b9434(0x1e2)](_0x4fff31[_0x1b9434(0x400)]),_0x5e89e2=Math[_0x1b9434(0x1e2)](_0x4fff31[_0x1b9434(0x7a0)]);$gameTemp['requestPointAnimation'](_0x98e6ab,_0x5e89e2,_0x4fff31['AnimationID'],_0x4fff31[_0x1b9434(0x5d9)],_0x4fff31[_0x1b9434(0x2b0)]),_0x4fff31[_0x1b9434(0xa1f)]&&_0x1f4c07&&(SceneManager['_scene'][_0x1b9434(0x6f4)]['updatePointAnimations'](),_0x1f4c07['setWaitMode'](_0x1b9434(0x102)));}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x5a6),_0x439a7f=>{const _0x514a5c=_0x4ab18a;if(!SceneManager[_0x514a5c(0xae)]())return;VisuMZ['ConvertParams'](_0x439a7f,_0x439a7f);const _0x87b717=$gameTemp[_0x514a5c(0x9d8)](),_0x4e8e91=VisuMZ[_0x514a5c(0xa7c)](_0x439a7f[_0x514a5c(0x2ab)]),_0x55857e=_0x439a7f['AnimationID'],_0x4b4f05=_0x439a7f['Mirror'];if(!_0x87b717)return;$gameTemp[_0x514a5c(0x9b2)](_0x4e8e91,_0x55857e,_0x4b4f05);if(_0x439a7f[_0x514a5c(0x407)])_0x87b717[_0x514a5c(0x37d)](_0x514a5c(0x102));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x692),_0x2f8396=>{const _0x846651=_0x4ab18a;if(!SceneManager[_0x846651(0xae)]())return;const _0x366971=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x366971)return;_0x366971['setWaitMode']('battleAnimation');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xac),_0x2b4bbb=>{const _0x4ab63a=_0x4ab18a;if(!SceneManager[_0x4ab63a(0xae)]())return;VisuMZ['ConvertParams'](_0x2b4bbb,_0x2b4bbb);const _0x20ed58=BattleManager[_0x4ab63a(0x84a)],_0x18e455=_0x2b4bbb['CopyCombatLog']&&Imported[_0x4ab63a(0x4cc)];_0x20ed58[_0x4ab63a(0x39c)](_0x2b4bbb[_0x4ab63a(0x397)]);if(_0x18e455&&Imported[_0x4ab63a(0x4cc)]){if(_0x4ab63a(0x279)!=='KNGqu')$gameSystem[_0x4ab63a(0x752)](_0x2b4bbb[_0x4ab63a(0x397)]||'',_0x2b4bbb[_0x4ab63a(0x289)]||0x0);else{if(!_0x4038c3[_0x4ab63a(0xae)]())return;_0x18b4da[_0x4ab63a(0x3cb)](_0x57b13b,_0x528de9);const _0x32cda0=_0x4df565[_0x4ab63a(0x9d8)](),_0x210528=_0x13931a['_subject'],_0x52472a=_0x596880['CreateActionSequenceTargets'](_0x29031d[_0x4ab63a(0x2ab)]),_0x331632=_0x307361[_0x4ab63a(0x5d9)],_0x4b299f=_0x305dac[_0x4ab63a(0x84a)];if(!_0x32cda0||!_0x210528)return;const _0x20e416=_0x210528['attackAnimationId1']();_0x4a3217[_0x4ab63a(0x9b2)](_0x52472a,_0x20e416,_0x331632),_0x3f4fb5[_0x4ab63a(0x407)]&&_0x32cda0[_0x4ab63a(0x37d)](_0x4ab63a(0x102));}}}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x6be),_0x5e7431=>{const _0xa16603=_0x4ab18a;if(!SceneManager[_0xa16603(0xae)]())return;const _0x58fb06=BattleManager[_0xa16603(0x84a)];_0x58fb06['clear']();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_BattleLog_DisplayAction',_0xdd3105=>{const _0x58de7e=_0x4ab18a;if(!SceneManager[_0x58de7e(0xae)]())return;const _0xba9b43=$gameTemp['getLastPluginCommandInterpreter'](),_0x2a356a=BattleManager[_0x58de7e(0x605)],_0x370ab3=BattleManager[_0x58de7e(0xf7)],_0x58c9e7=BattleManager[_0x58de7e(0x84a)];if(!_0xba9b43||!_0x2a356a||!_0x370ab3)return;if(!_0x2a356a['item']())return;_0x58c9e7[_0x58de7e(0x80d)](_0x370ab3,_0x2a356a['item']()),_0xba9b43[_0x58de7e(0x37d)](_0x58de7e(0xa7));}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0xa09),_0x5be62d=>{const _0x4ad37f=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;const _0x58e854=BattleManager[_0x4ad37f(0x84a)];_0x58e854[_0x4ad37f(0x338)]();}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],'ActSeq_BattleLog_PushBaseLine',_0x2d6cf4=>{const _0x2d894f=_0x4ab18a;if(!SceneManager[_0x2d894f(0xae)]())return;const _0x38145f=BattleManager[_0x2d894f(0x84a)];_0x38145f[_0x2d894f(0xacc)]();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x6d6),_0x1ca483=>{const _0x23c65d=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;const _0x5155af=BattleManager[_0x23c65d(0x84a)];_0x5155af[_0x23c65d(0x5ea)]();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x61a),_0x27d946=>{const _0x16291c=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x16291c(0x3cb)](_0x27d946,_0x27d946),SceneManager['_scene'][_0x16291c(0x60c)](_0x27d946[_0x16291c(0x418)]);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x231),_0x220895=>{const _0x3ae0f9=_0x4ab18a;if(!SceneManager[_0x3ae0f9(0xae)]())return;const _0x346aaf=$gameTemp[_0x3ae0f9(0x9d8)]();_0x346aaf[_0x3ae0f9(0x37d)](_0x3ae0f9(0xa7));}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],'ActSeq_BattleLog_WaitForNewLine',_0x21fef0=>{const _0x2480fa=_0x4ab18a;if(!SceneManager[_0x2480fa(0xae)]())return;const _0x7963b=$gameTemp[_0x2480fa(0x9d8)](),_0xb9e5f=BattleManager[_0x2480fa(0x84a)];_0xb9e5f[_0x2480fa(0x4e8)](),_0x7963b[_0x2480fa(0x37d)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Camera_Clamp',_0x12668b=>{const _0x5aeece=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5aeece(0x7c0)])return;VisuMZ[_0x5aeece(0x3cb)](_0x12668b,_0x12668b);const _0x14d08c=$gameScreen[_0x5aeece(0x679)]();_0x14d08c[_0x5aeece(0xc4)]=_0x12668b[_0x5aeece(0x241)];}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x2b8),_0x311684=>{const _0x48741f=_0x4ab18a;if(!SceneManager[_0x48741f(0xae)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x48741f(0x3cb)](_0x311684,_0x311684);const _0x520473=$gameTemp[_0x48741f(0x9d8)](),_0x4f251c=_0x311684[_0x48741f(0xa6a)];$gameScreen[_0x48741f(0x7af)](_0x311684[_0x48741f(0x48d)],_0x311684['FocusY'],_0x311684[_0x48741f(0x532)],_0x311684[_0x48741f(0x5c7)]);if(_0x4f251c)_0x520473[_0x48741f(0x37d)](_0x48741f(0x101));}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x871),_0x557ab3=>{const _0x2c2112=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2c2112(0x3cb)](_0x557ab3,_0x557ab3);const _0x30b673=$gameTemp[_0x2c2112(0x9d8)](),_0x4dd050=VisuMZ['CreateActionSequenceTargets'](_0x557ab3['Targets']),_0x45b0e1=_0x557ab3['WaitForCamera'];$gameScreen['setBattleCameraTargets'](_0x4dd050,_0x557ab3['Duration'],_0x557ab3[_0x2c2112(0x5c7)]);if(_0x45b0e1)_0x30b673[_0x2c2112(0x37d)](_0x2c2112(0x101));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xda),_0xd2bfb4=>{const _0x29dc03=_0x4ab18a;if(!SceneManager[_0x29dc03(0xae)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x29dc03(0x3cb)](_0xd2bfb4,_0xd2bfb4);const _0x11aa24=$gameTemp[_0x29dc03(0x9d8)](),_0x45a3a7=_0xd2bfb4[_0x29dc03(0xa6a)];$gameScreen['setBattleCameraOffset'](_0xd2bfb4['OffsetX'],_0xd2bfb4[_0x29dc03(0xab3)],_0xd2bfb4[_0x29dc03(0x532)],_0xd2bfb4[_0x29dc03(0x5c7)]);if(_0x45a3a7)_0x11aa24[_0x29dc03(0x37d)](_0x29dc03(0x101));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x353),_0x2916ca=>{const _0x56fc1a=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x56fc1a(0x3cb)](_0x2916ca,_0x2916ca);const _0x185185=$gameTemp['getLastPluginCommandInterpreter'](),_0x1164d3=_0x2916ca['ResetFocus'],_0x4fbdf1=_0x2916ca['ResetOffset'],_0x3e9248=_0x2916ca['WaitForCamera'];if(_0x1164d3){const _0x103d6b=Math['round'](Graphics[_0x56fc1a(0x999)]/0x2),_0x147bdb=Math[_0x56fc1a(0x1e2)](Graphics[_0x56fc1a(0x428)]/0x2);$gameScreen[_0x56fc1a(0x7af)](_0x103d6b,_0x147bdb,_0x2916ca['Duration'],_0x2916ca[_0x56fc1a(0x5c7)]);}_0x4fbdf1&&('lDMWo'===_0x56fc1a(0x969)?_0x34da7d[_0x56fc1a(0x36d)]():$gameScreen[_0x56fc1a(0x6d9)](0x0,0x0,_0x2916ca[_0x56fc1a(0x532)],_0x2916ca['EasingType']));if(_0x3e9248)_0x185185[_0x56fc1a(0x37d)]('battleCamera');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xa90),_0x5789ac=>{const _0xd8c7c2=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xd8c7c2(0x7c0)])return;const _0x13e75d=$gameTemp[_0xd8c7c2(0x9d8)]();if(!_0x13e75d)return;_0x13e75d[_0xd8c7c2(0x37d)](_0xd8c7c2(0x101));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x9cd),_0xebb84a=>{const _0x577aa0=_0x4ab18a;if(!SceneManager[_0x577aa0(0xae)]())return;if(!Imported[_0x577aa0(0x270)])return;VisuMZ[_0x577aa0(0x3cb)](_0xebb84a,_0xebb84a);const _0x1f51c7=VisuMZ[_0x577aa0(0xa7c)](_0xebb84a['Targets']),_0x3cca4e=_0xebb84a[_0x577aa0(0x53d)]['toLowerCase']()['trim']();for(const _0x1e45d9 of _0x1f51c7){if(!_0x1e45d9)continue;_0x1e45d9[_0x577aa0(0x33b)](_0x3cca4e);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x1fa),_0x4fd191=>{const _0x1b0e65=_0x4ab18a;if(!SceneManager[_0x1b0e65(0xae)]())return;if(!Imported[_0x1b0e65(0x270)])return;VisuMZ['ConvertParams'](_0x4fd191,_0x4fd191);const _0x5db097=VisuMZ[_0x1b0e65(0xa7c)](_0x4fd191[_0x1b0e65(0x2ab)]),_0x551588=_0x4fd191[_0x1b0e65(0x7f1)];for(const _0x38d3f2 of _0x5db097){if(!_0x38d3f2)continue;_0x38d3f2[_0x1b0e65(0x7f2)]()[_0x1b0e65(0xa89)]=_0x551588;}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x31d),_0x484521=>{const _0x448f66=_0x4ab18a;if(!SceneManager[_0x448f66(0xae)]())return;if(!Imported[_0x448f66(0x847)])return;VisuMZ[_0x448f66(0x3cb)](_0x484521,_0x484521);const _0x1543f7=BattleManager[_0x448f66(0x605)],_0x36a2b6=_0x484521[_0x448f66(0x755)];if(!_0x1543f7)return;_0x1543f7[_0x448f66(0x322)]=_0x36a2b6;}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x963),_0x259271=>{const _0xed58c=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xed58c(0x847)])return;const _0x32abf5=BattleManager[_0xed58c(0x605)];if(!_0x32abf5)return;_0x32abf5['clearElementChanges']();}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Element_ForceElements',_0x4d8926=>{const _0x3bfd4b=_0x4ab18a;if(!SceneManager[_0x3bfd4b(0xae)]())return;if(!Imported[_0x3bfd4b(0x847)])return;VisuMZ[_0x3bfd4b(0x3cb)](_0x4d8926,_0x4d8926);const _0xbff596=BattleManager['_action'],_0x1ca959=_0x4d8926[_0x3bfd4b(0x755)];if(!_0xbff596)return;_0xbff596[_0x3bfd4b(0x65e)]=_0x1ca959;}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xa9f),_0x35a50d=>{const _0x57c4d8=_0x4ab18a;if(!SceneManager[_0x57c4d8(0xae)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x23bc7f=BattleManager['_action'];if(!_0x23bc7f)return;_0x23bc7f['_battleCoreNoElement']=!![];}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x7c9),_0x44ff24=>{const _0xf62917=_0x4ab18a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0xf62917(0xae)]())return;VisuMZ[_0xf62917(0x3cb)](_0x44ff24,_0x44ff24);const _0x193349=VisuMZ[_0xf62917(0xa7c)](_0x44ff24['Targets']);for(const _0x2ff9a8 of _0x193349){if(!_0x2ff9a8)continue;_0x2ff9a8[_0xf62917(0xc2)]('noise'),_0x2ff9a8[_0xf62917(0xc2)]('glitch'),_0x2ff9a8[_0xf62917(0xc2)]('tv'),_0x2ff9a8[_0xf62917(0x98a)]();}$gamePlayer[_0xf62917(0x5ea)]();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x412),_0x20e867=>{const _0x427a06=_0x4ab18a;if(!Imported[_0x427a06(0x3fb)])return;if(!SceneManager[_0x427a06(0xae)]())return;VisuMZ['ConvertParams'](_0x20e867,_0x20e867);const _0x21eec0=VisuMZ[_0x427a06(0xa7c)](_0x20e867['Targets']),_0x1643b5=_0x427a06(0xaa6);_0x20e867['sliceMin']=Math['ceil'](_0x20e867[_0x427a06(0x4b5)]/0x2),_0x20e867[_0x427a06(0x62d)]=_0x20e867[_0x427a06(0x4b5)],_0x20e867['refreshRequest']=!![];for(const _0x5c9c88 of _0x21eec0){if(!_0x5c9c88)continue;_0x5c9c88[_0x427a06(0x59d)](_0x1643b5,_0x20e867);}$gamePlayer[_0x427a06(0x5ea)]();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x39a),_0x4ee09e=>{const _0x5a1181=_0x4ab18a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x5a1181(0xae)]())return;VisuMZ['ConvertParams'](_0x4ee09e,_0x4ee09e);const _0x187bc8=VisuMZ['CreateActionSequenceTargets'](_0x4ee09e[_0x5a1181(0x2ab)]);for(const _0x4939e9 of _0x187bc8){if('GWdnT'!==_0x5a1181(0x4d9))this[_0x5a1181(0x61b)]();else{if(!_0x4939e9)continue;_0x4939e9['removeHorrorEffect'](_0x5a1181(0xaa6));}}$gamePlayer[_0x5a1181(0x5ea)]();}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x964),_0x2adb74=>{const _0x36e5ba=_0x4ab18a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x36e5ba(0xae)]())return;VisuMZ['ConvertParams'](_0x2adb74,_0x2adb74);const _0x35b813=VisuMZ[_0x36e5ba(0xa7c)](_0x2adb74[_0x36e5ba(0x2ab)]),_0x4bff5d='noise';for(const _0x912a75 of _0x35b813){if(!_0x912a75)continue;_0x912a75[_0x36e5ba(0x59d)](_0x4bff5d,_0x2adb74);}$gamePlayer[_0x36e5ba(0x5ea)]();}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x314),_0x40ff18=>{const _0x5cc782=_0x4ab18a;if(!Imported[_0x5cc782(0x3fb)])return;if(!SceneManager[_0x5cc782(0xae)]())return;VisuMZ[_0x5cc782(0x3cb)](_0x40ff18,_0x40ff18);const _0x2610ca=VisuMZ[_0x5cc782(0xa7c)](_0x40ff18[_0x5cc782(0x2ab)]);for(const _0x4e718e of _0x2610ca){if(!_0x4e718e)continue;_0x4e718e[_0x5cc782(0xc2)]('noise');}$gamePlayer[_0x5cc782(0x5ea)]();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Horror_TVCreate',_0xba8cce=>{const _0x5e6b99=_0x4ab18a;if(!Imported[_0x5e6b99(0x3fb)])return;if(!SceneManager[_0x5e6b99(0xae)]())return;VisuMZ[_0x5e6b99(0x3cb)](_0xba8cce,_0xba8cce);const _0x10aeeb=VisuMZ[_0x5e6b99(0xa7c)](_0xba8cce['Targets']),_0x464f2d='tv';for(const _0x3a8d4f of _0x10aeeb){if(!_0x3a8d4f)continue;_0x3a8d4f[_0x5e6b99(0x59d)](_0x464f2d,_0xba8cce);}$gamePlayer[_0x5e6b99(0x5ea)]();}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x7fd),_0x2bf555=>{const _0x3ad0c0=_0x4ab18a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x3ad0c0(0xae)]())return;VisuMZ[_0x3ad0c0(0x3cb)](_0x2bf555,_0x2bf555);const _0x3f6137=VisuMZ[_0x3ad0c0(0xa7c)](_0x2bf555[_0x3ad0c0(0x2ab)]);for(const _0x65f02 of _0x3f6137){if(_0x3ad0c0(0xaef)===_0x3ad0c0(0x234))this[_0x3ad0c0(0x4f1)][_0x3ad0c0(0x242)]=this[_0x3ad0c0(0x10e)]();else{if(!_0x65f02)continue;_0x65f02[_0x3ad0c0(0xc2)]('tv');}}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Impact_ColorBreak',_0x168e60=>{const _0x59cf63=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x59cf63(0x4d3)])return;const _0x48e8b2=SceneManager['_scene']['_spriteset'];if(!_0x48e8b2)return;VisuMZ['ConvertParams'](_0x168e60,_0x168e60);const _0x49e8b7=_0x168e60[_0x59cf63(0x745)]||0x1,_0x1d0ff4=_0x168e60[_0x59cf63(0x532)]||0x1,_0x3b909e=_0x168e60['EasingType']||'Linear';_0x48e8b2[_0x59cf63(0x822)](_0x49e8b7,_0x1d0ff4,_0x3b909e);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x898),_0x4eb153=>{const _0x5f7222=_0x4ab18a;if(!SceneManager[_0x5f7222(0xae)]())return;if(!Imported[_0x5f7222(0x4d3)])return;const _0x3000a9=SceneManager['_scene']['_spriteset'];if(!_0x3000a9)return;VisuMZ[_0x5f7222(0x3cb)](_0x4eb153,_0x4eb153);const _0x494300=Number(_0x4eb153[_0x5f7222(0x306)])||0x0,_0x561cc0=Number(_0x4eb153['Rate']),_0x5f56a1=_0x4eb153[_0x5f7222(0x532)]||0x1,_0x34f62e=_0x4eb153[_0x5f7222(0x5c7)]||'Linear';_0x3000a9[_0x5f7222(0x31c)](_0x494300,_0x561cc0,_0x5f56a1,_0x34f62e);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x98d),_0x383b88=>{const _0x429f12=_0x4ab18a;if(!SceneManager[_0x429f12(0xae)]())return;if(!Imported[_0x429f12(0x4d3)])return;const _0x2fd10c=SceneManager[_0x429f12(0xa10)][_0x429f12(0x6f4)];if(!_0x2fd10c)return;VisuMZ['ConvertParams'](_0x383b88,_0x383b88);const _0x57a4b3=Number(_0x383b88['Angle'])||0x0,_0x3660be=Number(_0x383b88['Rate']),_0x717d65=_0x383b88[_0x429f12(0x532)]||0x1,_0xa83bf=_0x383b88[_0x429f12(0x5c7)]||_0x429f12(0xfb),_0x240a9c=VisuMZ['CreateActionSequenceTargets'](_0x383b88[_0x429f12(0x2ab)]);for(const _0x57fc6f of _0x240a9c){if(!_0x57fc6f)continue;if(!_0x57fc6f[_0x429f12(0x173)]())continue;_0x57fc6f['battler']()[_0x429f12(0x31c)](_0x57a4b3,_0x3660be,_0x717d65,_0xa83bf);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x44e),_0x271b9b=>{const _0x26d6b7=_0x4ab18a;if(!SceneManager[_0x26d6b7(0xae)]())return;if(!Imported[_0x26d6b7(0x4d3)])return;VisuMZ['ConvertParams'](_0x271b9b,_0x271b9b);const _0x10e707={'delay':_0x271b9b[_0x26d6b7(0x689)],'duration':_0x271b9b[_0x26d6b7(0x3da)],'hue':_0x271b9b['hue'],'opacityStart':_0x271b9b[_0x26d6b7(0x83a)],'tone':_0x271b9b['tone'],'visible':!![]},_0x4cb000=VisuMZ[_0x26d6b7(0xa7c)](_0x271b9b[_0x26d6b7(0x2ab)]);for(const _0x46de01 of _0x4cb000){if(!_0x46de01)continue;_0x46de01['setBattlerMotionTrailData'](_0x10e707);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x855),_0x76361b=>{const _0x377399=_0x4ab18a;if(!SceneManager[_0x377399(0xae)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x76361b,_0x76361b);const _0x410502=VisuMZ[_0x377399(0xa7c)](_0x76361b['Targets']);for(const _0x543161 of _0x410502){if(!_0x543161)continue;_0x543161[_0x377399(0x95d)]();}}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x327),_0x3207ec=>{const _0x1a06db=_0x4ab18a;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x11c4f4=SceneManager[_0x1a06db(0xa10)][_0x1a06db(0x6f4)];if(!_0x11c4f4)return;VisuMZ[_0x1a06db(0x3cb)](_0x3207ec,_0x3207ec);const _0x4f2422=_0x3207ec['X']||0x0,_0x598de4=_0x3207ec['Y']||0x0,_0x4005cb=_0x3207ec[_0x1a06db(0x8db)]||0x0,_0x44c654=_0x3207ec[_0x1a06db(0x2b7)]||0x0,_0x200f9a=_0x3207ec[_0x1a06db(0x532)]||0x1;_0x11c4f4[_0x1a06db(0x385)](_0x4f2422,_0x598de4,_0x4005cb,_0x44c654,_0x200f9a);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x908),_0x3341e3=>{const _0x309103=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x309103(0x4d3)])return;const _0x341bf2=SceneManager[_0x309103(0xa10)][_0x309103(0x6f4)];if(!_0x341bf2)return;VisuMZ[_0x309103(0x3cb)](_0x3341e3,_0x3341e3);const _0x28a8db=VisuMZ[_0x309103(0xa7c)](_0x3341e3[_0x309103(0x2ab)]),_0x256272=_0x3341e3[_0x309103(0x4f2)],_0x168b3b=_0x3341e3[_0x309103(0x4c3)]||0x0,_0x1f80fe=_0x3341e3[_0x309103(0xab3)]||0x0,_0x1ea6f1=_0x3341e3[_0x309103(0x8db)]||0x0,_0x4fabb2=_0x3341e3[_0x309103(0x2b7)]||0x0,_0x130816=_0x3341e3['Duration']||0x1;for(const _0x15c44c of _0x28a8db){if(_0x309103(0x154)===_0x309103(0x154)){if(!_0x15c44c)continue;if(!_0x15c44c[_0x309103(0x173)]())continue;const _0x4a6b83=_0x15c44c[_0x309103(0x173)]();let _0x1c86b3=_0x4a6b83[_0x309103(0x520)],_0x38cafa=_0x4a6b83[_0x309103(0x5e7)];_0x1c86b3+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x38cafa+=(Graphics[_0x309103(0x428)]-Graphics[_0x309103(0x138)])/0x2;if(_0x256272[_0x309103(0x378)](/front/i))_0x309103(0xa4d)!==_0x309103(0x18c)?_0x1c86b3+=(_0x15c44c[_0x309103(0x6dd)]()?0x1:-0x1)*_0x4a6b83[_0x309103(0x2e5)]()/0x2:(this[_0x309103(0x298)](),this[_0x309103(0x5b1)](),_0x11e654[_0x309103(0x49d)][_0x309103(0x58a)]['call'](this),this[_0x309103(0x146)]());else{if(_0x256272['match'](/back/i)){if(_0x309103(0x841)!==_0x309103(0x841)){if(!_0x1a112d[_0x309103(0x332)]())return;const _0x20c231=this[_0x309103(0x173)]();if(!_0x20c231)return;if(_0x381f0c===_0x20c231[_0x309103(0x520)])return;let _0x42b80b=![];if(this['isActor']()){if(_0x47e371>_0x20c231['_baseX'])_0x42b80b=!![];if(_0x250453<_0x20c231[_0x309103(0x520)])_0x42b80b=![];}else{if(this[_0x309103(0x6dd)]()){if(_0x44b69d>_0x20c231[_0x309103(0x520)])_0x42b80b=![];if(_0x38e3c7<_0x20c231['_baseX'])_0x42b80b=!![];}};this[_0x309103(0x453)](_0x401691?!_0x42b80b:_0x42b80b),_0x20c231[_0x309103(0xfc)]();}else _0x1c86b3+=(_0x15c44c[_0x309103(0x6dd)]()?-0x1:0x1)*_0x4a6b83['mainSpriteWidth']()/0x2;}}if(_0x256272[_0x309103(0x378)](/head/i))'EDeDj'===_0x309103(0x75e)?_0x38cafa-=_0x4a6b83[_0x309103(0x6da)]():_0x304e92['_scene'][_0x309103(0xc3)][_0x309103(0x6ba)](_0x34bbc5,this['_battler']);else{if(_0x256272[_0x309103(0x378)](/center/i)){if(_0x309103(0x713)!==_0x309103(0x1c1))_0x38cafa-=_0x4a6b83['mainSpriteHeight']()/0x2;else return _0x52f322[_0x309103(0x94c)][_0x309103(0x9e1)]['call'](this,_0x52696d);}}_0x1c86b3+=_0x168b3b,_0x38cafa+=_0x1f80fe,_0x341bf2[_0x309103(0x385)](_0x1c86b3,_0x38cafa,_0x1ea6f1,_0x4fabb2,_0x130816);}else return this[_0x309103(0x51a)]['pop']();}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x227),_0x64f555=>{const _0x4c732a=_0x4ab18a;if(!SceneManager[_0x4c732a(0xae)]())return;if(!Imported[_0x4c732a(0x4d3)])return;const _0x57f521=SceneManager[_0x4c732a(0xa10)][_0x4c732a(0x6f4)];if(!_0x57f521)return;VisuMZ[_0x4c732a(0x3cb)](_0x64f555,_0x64f555);const _0x32387b=VisuMZ[_0x4c732a(0xa7c)](_0x64f555[_0x4c732a(0x2ab)]),_0x47e6b9=_0x64f555['TargetLocation'],_0x1f86c6=_0x64f555[_0x4c732a(0x4c3)]||0x0,_0xba54d5=_0x64f555['OffsetY']||0x0,_0x55577c=_0x64f555[_0x4c732a(0x8db)]||0x0,_0x2a913c=_0x64f555[_0x4c732a(0x2b7)]||0x0,_0x1c4158=_0x64f555['Duration']||0x1,_0x4e736e=Math['min'](..._0x32387b['map'](_0x6a2899=>_0x6a2899[_0x4c732a(0x173)]()[_0x4c732a(0x520)]-_0x6a2899[_0x4c732a(0x173)]()[_0x4c732a(0x2e5)]()/0x2)),_0x1f8f8d=Math['max'](..._0x32387b[_0x4c732a(0x71a)](_0x2a084b=>_0x2a084b[_0x4c732a(0x173)]()[_0x4c732a(0x520)]+_0x2a084b[_0x4c732a(0x173)]()[_0x4c732a(0x2e5)]()/0x2)),_0x94976=Math['min'](..._0x32387b[_0x4c732a(0x71a)](_0x3c83e0=>_0x3c83e0[_0x4c732a(0x173)]()[_0x4c732a(0x5e7)]-_0x3c83e0[_0x4c732a(0x173)]()[_0x4c732a(0x6da)]())),_0x2c0da2=Math[_0x4c732a(0x877)](..._0x32387b[_0x4c732a(0x71a)](_0x38a969=>_0x38a969[_0x4c732a(0x173)]()[_0x4c732a(0x5e7)])),_0x1f63c0=_0x32387b[_0x4c732a(0xa47)](_0x2e51fb=>_0x2e51fb[_0x4c732a(0x526)]())[_0x4c732a(0x820)],_0x3549e6=_0x32387b[_0x4c732a(0xa47)](_0x58e345=>_0x58e345['isEnemy']())[_0x4c732a(0x820)];let _0x3c0793=0x0,_0x1bf678=0x0;if(_0x47e6b9[_0x4c732a(0x378)](/front/i))_0x3c0793=_0x1f63c0>=_0x3549e6?_0x4e736e:_0x1f8f8d;else{if(_0x47e6b9['match'](/middle/i)){if(_0x4c732a(0x919)==='ETvgn'){const _0x1d1bb2=_0x1579d3[_0x4c732a(0x94c)][_0x4c732a(0x3f5)]['BattleLayout'],_0x660b04=this[_0x4c732a(0x475)](_0x37730c),_0x33b0ea=this[_0x4c732a(0xe8)](_0x46a873),_0x596884=_0x4d832c[_0x4c732a(0x1e2)](_0x33b0ea['x']+(_0x33b0ea[_0x4c732a(0x999)]-0x80)/0x2),_0x20f2ee=this[_0x4c732a(0x93a)](_0x33b0ea);let _0x2eda0c=_0x596884-_0x191820['iconWidth']/0x2-0x4,_0x22f661=_0x20f2ee+_0x45512d[_0x4c732a(0x485)]/0x2;_0x2eda0c-_0x1ec933[_0x4c732a(0x718)]/0x2<_0x33b0ea['x']&&(_0x2eda0c=_0x596884+_0x42af1a[_0x4c732a(0x718)]/0x2-0x4,_0x22f661=_0x20f2ee-_0x28a143['iconHeight']/0x2);const _0xe6d166=_0x596884,_0x5e20fe=this[_0x4c732a(0x115)](_0x33b0ea);this['placeTimeGauge'](_0x660b04,_0x596884+(_0x1d1bb2[_0x4c732a(0x3e4)]||0x0),_0x20f2ee+(_0x1d1bb2[_0x4c732a(0x756)]||0x0)),this[_0x4c732a(0x8ed)](_0x660b04,_0x596884+(_0x1d1bb2[_0x4c732a(0x59c)]||0x0),_0x20f2ee+(_0x1d1bb2['NameOffsetY']||0x0)),this[_0x4c732a(0x6c3)](_0x660b04,_0x2eda0c+(_0x1d1bb2[_0x4c732a(0x382)]||0x0),_0x22f661+(_0x1d1bb2[_0x4c732a(0xab5)]||0x0)),this[_0x4c732a(0x4ac)](_0x660b04,'hp',_0xe6d166+(_0x1d1bb2['HpGaugeOffsetX']||0x0),_0x5e20fe+(_0x1d1bb2[_0x4c732a(0x708)]||0x0)),this[_0x4c732a(0x4ac)](_0x660b04,'mp',_0xe6d166+(_0x1d1bb2[_0x4c732a(0x237)]||0x0),_0x5e20fe+this[_0x4c732a(0x16e)]()+(_0x1d1bb2[_0x4c732a(0x4e3)]||0x0)),_0x252fd2['optDisplayTp']&&this[_0x4c732a(0x4ac)](_0x660b04,'tp',_0xe6d166+(_0x1d1bb2[_0x4c732a(0x37f)]||0x0),_0x5e20fe+this[_0x4c732a(0x16e)]()*0x2+(_0x1d1bb2[_0x4c732a(0xaa9)]||0x0));}else _0x3c0793=(_0x4e736e+_0x1f8f8d)/0x2,melee=-0x1;}else _0x47e6b9[_0x4c732a(0x378)](/back/i)&&(_0x3c0793=_0x1f63c0>=_0x3549e6?_0x1f8f8d:_0x4e736e);}if(_0x47e6b9[_0x4c732a(0x378)](/head/i)){if(_0x4c732a(0x709)===_0x4c732a(0x2bf)){if(!_0x5f0721)return 0x0;let _0x1d1eef=0x0;const _0x1cdc64=_0x418c8d[_0x4c732a(0x7d0)];return _0x1cdc64[_0x4c732a(0x378)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1d1eef+=_0x2929c(_0xf9ca92['$1'])),_0x1cdc64['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1d1eef+=_0x591eb2(_0x1c30f4['$2'])),_0x1d1eef;}else _0x1bf678=_0x94976;}else{if(_0x47e6b9[_0x4c732a(0x378)](/center/i))_0x1bf678=(_0x94976+_0x2c0da2)/0x2;else _0x47e6b9['match'](/base/i)&&(_0x1bf678=_0x2c0da2);}_0x3c0793+=(Graphics[_0x4c732a(0x999)]-Graphics['boxWidth'])/0x2,_0x1bf678+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x3c0793+=_0x1f86c6,_0x1bf678+=_0xba54d5,_0x57f521[_0x4c732a(0x385)](_0x3c0793,_0x1bf678,_0x55577c,_0x2a913c,_0x1c4158);}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x11b),_0x5832f1=>{const _0x44f91a=_0x4ab18a;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x541907=SceneManager[_0x44f91a(0xa10)]['_spriteset'];if(!_0x541907)return;VisuMZ[_0x44f91a(0x3cb)](_0x5832f1,_0x5832f1);const _0x2ec433=_0x5832f1['X']||0x0,_0x68d7be=_0x5832f1['Y']||0x0,_0x375bf7=_0x5832f1['Strength']||0x0,_0x1f2a57=_0x5832f1['Radius']||0x0,_0x282e3f=_0x5832f1['Duration']||0x1,_0x364265=_0x5832f1[_0x44f91a(0x5c7)]||_0x44f91a(0xfb);_0x541907[_0x44f91a(0x9fe)](_0x375bf7,_0x2ec433,_0x68d7be,_0x1f2a57,_0x282e3f,_0x364265);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xab4),_0x30f8fc=>{const _0x33999b=_0x4ab18a;if(!Imported[_0x33999b(0x4d3)])return;const _0x437cb4=SceneManager['_scene'][_0x33999b(0x6f4)];if(!_0x437cb4)return;VisuMZ[_0x33999b(0x3cb)](_0x30f8fc,_0x30f8fc);const _0x188598=VisuMZ[_0x33999b(0xa7c)](_0x30f8fc[_0x33999b(0x2ab)]),_0x2c22b2=_0x30f8fc['TargetLocation'],_0xb7f35e=_0x30f8fc[_0x33999b(0x4c3)]||0x0,_0x431a34=_0x30f8fc['OffsetY']||0x0,_0x490bf6=_0x30f8fc['Strength']||0x0,_0x26af69=_0x30f8fc[_0x33999b(0x927)]||0x0,_0x2d990a=_0x30f8fc['Duration']||0x1,_0x5e4bff=_0x30f8fc[_0x33999b(0x5c7)]||_0x33999b(0xfb),_0xc06883=Math[_0x33999b(0x8f1)](..._0x188598[_0x33999b(0x71a)](_0x758321=>_0x758321[_0x33999b(0x173)]()[_0x33999b(0x520)]-_0x758321['battler']()['mainSpriteWidth']()/0x2)),_0x498ec4=Math['max'](..._0x188598[_0x33999b(0x71a)](_0x3e3be5=>_0x3e3be5[_0x33999b(0x173)]()[_0x33999b(0x520)]+_0x3e3be5[_0x33999b(0x173)]()['mainSpriteWidth']()/0x2)),_0x4117a7=Math[_0x33999b(0x8f1)](..._0x188598[_0x33999b(0x71a)](_0x3bdaf6=>_0x3bdaf6[_0x33999b(0x173)]()[_0x33999b(0x5e7)]-_0x3bdaf6[_0x33999b(0x173)]()[_0x33999b(0x6da)]())),_0x4553da=Math[_0x33999b(0x877)](..._0x188598['map'](_0x1345cb=>_0x1345cb[_0x33999b(0x173)]()[_0x33999b(0x5e7)])),_0x29f26a=_0x188598[_0x33999b(0xa47)](_0x4ef92d=>_0x4ef92d[_0x33999b(0x526)]())[_0x33999b(0x820)],_0x3a6486=_0x188598[_0x33999b(0xa47)](_0x53ef84=>_0x53ef84[_0x33999b(0x6dd)]())[_0x33999b(0x820)];let _0x3f33d9=0x0,_0x255707=0x0;if(_0x2c22b2[_0x33999b(0x378)](/front/i))_0x33999b(0x47f)!==_0x33999b(0xa1d)?_0x3f33d9=_0x29f26a>=_0x3a6486?_0xc06883:_0x498ec4:this['_mainSprite']&&this[_0x33999b(0x610)][_0x33999b(0x43f)](_0x58f1c6);else{if(_0x2c22b2[_0x33999b(0x378)](/middle/i)){if(_0x33999b(0x209)==='wpGLI')_0x3f33d9=(_0xc06883+_0x498ec4)/0x2,melee=-0x1;else{const _0x5e2dcd=_0x213b73[_0x33999b(0x2d4)](),_0x290e92=_0x5e2dcd[_0x33999b(0x244)]();for(const _0x5eab6e of _0x290e92){const _0x420825=_0x1eaa35['isActor']()?_0x5eab6e[_0x33999b(0x8fc)]:_0x5eab6e['message2'];_0x420825&&_0x6e4b0e[_0x33999b(0x94c)][_0x33999b(0x3f5)][_0x33999b(0x719)]['ShowAddedState']&&(this['push']('fnordAddedStates'),this[_0x33999b(0x448)]('popBaseLine'),this[_0x33999b(0x448)](_0x33999b(0xacc)),this[_0x33999b(0x448)](_0x33999b(0x39c),_0x420825['format'](_0x12bb02[_0x33999b(0x8ff)]())),this[_0x33999b(0x448)](_0x33999b(0x1d4))),_0x5eab6e['id']===_0x1999a9[_0x33999b(0x2cc)]()&&this[_0x33999b(0x448)]('performCollapse',_0x240992);}}}else _0x2c22b2[_0x33999b(0x378)](/back/i)&&(_0x3f33d9=_0x29f26a>=_0x3a6486?_0x498ec4:_0xc06883);}if(_0x2c22b2['match'](/head/i))_0x255707=_0x4117a7;else{if(_0x2c22b2['match'](/center/i))_0x255707=(_0x4117a7+_0x4553da)/0x2;else _0x2c22b2[_0x33999b(0x378)](/base/i)&&(_0x255707=_0x4553da);}_0x3f33d9+=(Graphics[_0x33999b(0x999)]-Graphics['boxWidth'])/0x2,_0x255707+=(Graphics['height']-Graphics[_0x33999b(0x138)])/0x2,_0x3f33d9+=_0xb7f35e,_0x255707+=_0x431a34,_0x437cb4[_0x33999b(0x9fe)](_0x490bf6,_0x3f33d9,_0x255707,_0x26af69,_0x2d990a,_0x5e4bff);}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x6cf),_0x323e73=>{const _0x139a8e=_0x4ab18a;if(!SceneManager[_0x139a8e(0xae)]())return;VisuMZ['ConvertParams'](_0x323e73,_0x323e73);const _0x3cb51d=$gameTemp[_0x139a8e(0x9d8)](),_0x57c2b4=BattleManager[_0x139a8e(0x605)],_0x7756a3=BattleManager[_0x139a8e(0xf7)],_0x3da59f=BattleManager[_0x139a8e(0x84a)];if(!_0x3cb51d||!_0x57c2b4||!_0x7756a3)return;if(!_0x57c2b4[_0x139a8e(0x925)]())return;const _0x42fd5b=VisuMZ[_0x139a8e(0xa7c)](_0x323e73[_0x139a8e(0x2ab)]);for(const _0x38363b of _0x42fd5b){if('QjstE'==='syldP')_0x219275['BattleCore'][_0x139a8e(0x3df)][_0x139a8e(0x45b)](this),this[_0x139a8e(0x3a0)]();else{if(!_0x38363b)continue;_0x3da59f['push'](_0x139a8e(0x7c7),_0x7756a3,_0x38363b);}}_0x3cb51d[_0x139a8e(0x37d)]('battlelog');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xab8),_0x4624d5=>{const _0x2ca87b=_0x4ab18a;if(!SceneManager[_0x2ca87b(0xae)]())return;VisuMZ['ConvertParams'](_0x4624d5,_0x4624d5);const _0x3da6f5=[_0x2ca87b(0x9a3),'MAXMP','ATK','DEF',_0x2ca87b(0x54f),_0x2ca87b(0xac3),_0x2ca87b(0x40d),_0x2ca87b(0x343)],_0x4941cf=_0x4624d5[_0x2ca87b(0x9f3)],_0x64bca9=_0x4624d5[_0x2ca87b(0x5df)],_0x169f52=_0x4624d5[_0x2ca87b(0x142)],_0x4ccb9c=VisuMZ[_0x2ca87b(0xa7c)](_0x4624d5[_0x2ca87b(0x2ab)]);for(const _0x393bb5 of _0x4ccb9c){if(!_0x393bb5)continue;for(const _0x421143 of _0x4941cf){const _0x4ee465=_0x3da6f5[_0x2ca87b(0x50a)](_0x421143['toUpperCase']()['trim']());_0x4ee465>=0x0&&_0x4ee465<=0x7&&_0x393bb5[_0x2ca87b(0x73b)](_0x4ee465,_0x169f52);}for(const _0x53f519 of _0x64bca9){const _0x4ba3c0=_0x3da6f5[_0x2ca87b(0x50a)](_0x53f519[_0x2ca87b(0x9e5)]()[_0x2ca87b(0x3a3)]());_0x4ba3c0>=0x0&&_0x4ba3c0<=0x7&&_0x393bb5[_0x2ca87b(0x5fa)](_0x4ba3c0,_0x169f52);}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xaf5),_0x2d6af0=>{const _0x18502=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2d6af0,_0x2d6af0);const _0x862847=_0x2d6af0[_0x18502(0x454)],_0x109612=VisuMZ['CreateActionSequenceTargets'](_0x2d6af0[_0x18502(0x2ab)]);for(const _0x20e0f6 of _0x109612){if('CGEgI'===_0x18502(0x557)){const _0x349ea4=this[_0x18502(0x691)](),_0x5cb52b=_0x14154a['BattleCore']['Settings'][_0x18502(0x3dd)][_0x18502(0x6d4)],_0x253e02=_0x349ea4==='text'?_0x50bf1b[_0x18502(0x925)]:_0x18502(0x2fa)[_0x18502(0x278)](_0x5cb52b,_0x12e892['item']),_0x706a4e=this[_0x18502(0x8bf)]();this['addCommand'](_0x253e02,_0x18502(0x925),_0x706a4e);}else{if(!_0x20e0f6)continue;for(const _0x5b8d44 of _0x862847){_0x20e0f6[_0x18502(0xb5)](_0x5b8d44);}}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x7fa),_0xbffc18=>{const _0xaa138e=_0x4ab18a;if(!SceneManager[_0xaa138e(0xae)]())return;VisuMZ['ConvertParams'](_0xbffc18,_0xbffc18);const _0x4ce971=BattleManager[_0xaa138e(0x605)],_0x482e52={'arPenRate':_0xbffc18[_0xaa138e(0x348)],'arPenFlat':_0xbffc18['ArPenFlat'],'arRedRate':_0xbffc18['ArRedRate'],'arRedFlat':_0xbffc18['ArRedFlat']};_0x4ce971['_armorPenetration']=_0x482e52;}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x6b7),_0x309e36=>{const _0x3a6e7a=_0x4ab18a;if(!SceneManager[_0x3a6e7a(0xae)]())return;if(!Imported[_0x3a6e7a(0x214)])return;VisuMZ[_0x3a6e7a(0x3cb)](_0x309e36,_0x309e36);const _0xadcca3=VisuMZ[_0x3a6e7a(0xa7c)](_0x309e36[_0x3a6e7a(0x2ab)]),_0x30328f=_0x309e36[_0x3a6e7a(0x44c)]||0x1;for(const _0x7d91be of _0xadcca3){if(_0x3a6e7a(0x880)===_0x3a6e7a(0x880)){if(!_0x7d91be)continue;if(!_0x7d91be[_0x3a6e7a(0x6dd)]())continue;_0x7d91be[_0x3a6e7a(0x95c)](_0x30328f);}else{const _0x2a52a2=_0x1c6a3a['BattleCore'][_0x3a6e7a(0x3f5)][_0x3a6e7a(0x9d2)],_0x363ab6=_0x2a52a2[_0x3a6e7a(0x3f7)],_0x8a77bc=_0x2a52a2[_0x3a6e7a(0x4f9)],_0x338c59=_0x2a52a2[_0x3a6e7a(0x9c5)];this[_0x3a6e7a(0x6a1)](-_0x363ab6,-_0x8a77bc,_0x338c59);}}}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x611),_0x2327c8=>{const _0x2f706c=_0x4ab18a;if(!SceneManager[_0x2f706c(0xae)]())return;if(!Imported[_0x2f706c(0x916)])return;if(!BattleManager[_0x2f706c(0x646)]())return;VisuMZ[_0x2f706c(0x3cb)](_0x2327c8,_0x2327c8);const _0x3c8a31=VisuMZ[_0x2f706c(0xa7c)](_0x2327c8[_0x2f706c(0x2ab)]),_0x4df8e8=_0x2327c8[_0x2f706c(0x5d1)],_0x540ea6=_0x2327c8[_0x2f706c(0x5d1)],_0xc4bf4e=_0x2327c8[_0x2f706c(0x86d)];for(const _0x417fbf of _0x3c8a31){if('iPSui'!=='dsNzf'){if(!_0x417fbf)continue;if(_0x417fbf[_0x2f706c(0x743)]())_0x417fbf[_0x2f706c(0x640)](_0x4df8e8);else{if(_0x417fbf[_0x2f706c(0x489)]()){if(_0x2f706c(0x540)==='GAxGT')_0x4cf84d=(_0x3f2f09+_0x5b8bfe)/0x2,_0x419a44=-0x1;else{_0x417fbf[_0x2f706c(0xaf1)](_0x540ea6);if(_0xc4bf4e)_0x417fbf[_0x2f706c(0x80c)]();}}}}else _0x4670b2[_0x2f706c(0x94c)]['Window_BattleLog_performEvasion'][_0x2f706c(0x45b)](this,_0x5bcbd4),this['callNextMethod']();}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x978),_0x1fa658=>{const _0x56ad73=_0x4ab18a;if(!SceneManager[_0x56ad73(0xae)]())return;if(!Imported[_0x56ad73(0x233)])return;VisuMZ['ConvertParams'](_0x1fa658,_0x1fa658);const _0x5896e5=VisuMZ[_0x56ad73(0xa7c)](_0x1fa658[_0x56ad73(0x2ab)]),_0x381483=_0x1fa658[_0x56ad73(0x42e)];for(const _0x2d794e of _0x5896e5){if(!_0x2d794e)continue;_0x2d794e[_0x56ad73(0x470)](_0x381483);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x682),_0xa122b9=>{const _0x2b569f=_0x4ab18a;if(!SceneManager[_0x2b569f(0xae)]())return;if(!Imported[_0x2b569f(0x233)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x2b569f(0x3cb)](_0xa122b9,_0xa122b9);const _0x2e89c3=_0xa122b9[_0x2b569f(0x9b8)];$gameVariables[_0x2b569f(0x77c)](_0x2e89c3,BattleManager['_subject']['toUseBoostPoints']());}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_BreakShieldChange',_0x3c05b3=>{const _0x56353b=_0x4ab18a;if(!SceneManager[_0x56353b(0xae)]())return;if(!Imported[_0x56353b(0x8df)])return;VisuMZ[_0x56353b(0x3cb)](_0x3c05b3,_0x3c05b3);const _0x3152f3=VisuMZ[_0x56353b(0xa7c)](_0x3c05b3[_0x56353b(0x2ab)]),_0x20e18c=_0x3c05b3['BreakShields'];for(const _0x12cdff of _0x3152f3){if(_0x56353b(0x172)!==_0x56353b(0x6c0)){if(!_0x12cdff)continue;if(_0x12cdff['isBreakStunned']())continue;if(!_0x12cdff[_0x56353b(0x414)]())continue;_0x12cdff[_0x56353b(0x73c)](_0x20e18c);}else{if(_0x2e529e===this[_0x56353b(0x2cc)]()&&this[_0x56353b(0x1b0)]())return!![];return _0x5a4274[_0x56353b(0x94c)][_0x56353b(0x995)][_0x56353b(0x45b)](this,_0x266826);}}}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x13e),_0x5ad027=>{const _0x51887a=_0x4ab18a;if(!SceneManager[_0x51887a(0xae)]())return;if(!Imported[_0x51887a(0x8df)])return;VisuMZ['ConvertParams'](_0x5ad027,_0x5ad027);const _0x5820c1=VisuMZ[_0x51887a(0xa7c)](_0x5ad027['Targets']);for(const _0x47eab1 of _0x5820c1){if(_0x51887a(0x7bc)===_0x51887a(0x77d))_0x283658[_0x51887a(0x94c)][_0x51887a(0x967)](_0x487203,_0x955cfd);else{if(!_0x47eab1)continue;if(_0x47eab1[_0x51887a(0x953)]())continue;if(!_0x47eab1[_0x51887a(0x414)]())continue;_0x47eab1['resetBreakShield']();}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_BtbGain',_0x90ab12=>{const _0x66d8e7=_0x4ab18a;if(!SceneManager[_0x66d8e7(0xae)]())return;if(!Imported[_0x66d8e7(0x94)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x66d8e7(0x3cb)](_0x90ab12,_0x90ab12);const _0x4dba89=VisuMZ[_0x66d8e7(0xa7c)](_0x90ab12['Targets']),_0x38000c=_0x90ab12['BravePoints'];for(const _0x43ef5d of _0x4dba89){if(_0x66d8e7(0x5f9)!==_0x66d8e7(0x3be)){if(!_0x43ef5d)continue;_0x43ef5d[_0x66d8e7(0xa0f)](_0x38000c);}else this[_0x66d8e7(0x3a5)][_0x66d8e7(0x242)]=![];}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x650),_0x47fb35=>{const _0x3ea46f=_0x4ab18a;if(!SceneManager[_0x3ea46f(0xae)]())return;VisuMZ[_0x3ea46f(0x3cb)](_0x47fb35,_0x47fb35);const _0x195633=$gameTemp[_0x3ea46f(0x9d8)](),_0x133082=BattleManager[_0x3ea46f(0x605)],_0x2809ea=BattleManager[_0x3ea46f(0xf7)];if(!_0x195633||!_0x133082||!_0x2809ea)return;if(!_0x133082['item']())return;const _0x1b54c7=VisuMZ[_0x3ea46f(0xa7c)](_0x47fb35[_0x3ea46f(0x2ab)]);for(const _0x36a223 of _0x1b54c7){if(!_0x36a223)continue;_0x47fb35[_0x3ea46f(0xe2)]&&(_0x3ea46f(0x76c)!==_0x3ea46f(0x73e)?(_0x36a223[_0x3ea46f(0x158)](),_0x36a223['addState'](_0x36a223[_0x3ea46f(0x2cc)]())):this[_0x3ea46f(0x268)][_0x3ea46f(0xac7)](_0x178377)),_0x36a223['isDeathStateAffected']()&&_0x36a223[_0x3ea46f(0x36d)]();}_0x195633[_0x3ea46f(0x37d)]('battleEffect');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x391),_0xfe22b4=>{const _0x5cef09=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5cef09(0x684)])return;if(!BattleManager[_0x5cef09(0x41b)]())return;VisuMZ[_0x5cef09(0x3cb)](_0xfe22b4,_0xfe22b4);const _0x12d61f=VisuMZ[_0x5cef09(0xa7c)](_0xfe22b4[_0x5cef09(0x2ab)]),_0x17dbf6=_0xfe22b4[_0x5cef09(0x97c)];for(const _0x48cb56 of _0x12d61f){if(_0x5cef09(0x21b)!==_0x5cef09(0x21b)){if(!_0x8af354[_0x5cef09(0xae)]())return;_0x4e901d[_0x5cef09(0x3cb)](_0x48b9de,_0x2ed6d6);const _0x14e2f8=_0x48a820['getLastPluginCommandInterpreter'](),_0x3a8a9a=_0x5370c9[_0x5cef09(0x605)],_0xb10d02=_0x1cafa6[_0x5cef09(0xf7)],_0x575a70=_0x5b8af7[_0x5cef09(0x4ef)]?_0x1c4988[_0x5cef09(0x4ef)][_0x5cef09(0x2e2)](0x0):[],_0x113275=_0x17e621[_0x5cef09(0x84a)];if(!_0x14e2f8||!_0x3a8a9a||!_0xb10d02)return;if(!_0x3a8a9a[_0x5cef09(0x925)]())return;if(_0x559d7b[_0x5cef09(0xfe)])_0x113275[_0x5cef09(0x80d)](_0xb10d02,_0x3a8a9a[_0x5cef09(0x925)]());_0x4075dd[_0x5cef09(0x544)]&&_0x113275[_0x5cef09(0x448)]('applyImmortal',_0xb10d02,_0x575a70,!![]);if(_0x3b2bc1['ActionStart'])_0x113275['push']('performActionStart',_0xb10d02,_0x3a8a9a);if(_0x517a0b[_0x5cef09(0x960)])_0x113275[_0x5cef09(0x448)](_0x5cef09(0x259));if(_0x1f4095['CastAnimation'])_0x113275['push'](_0x5cef09(0xa08),_0xb10d02,_0x3a8a9a);if(_0x27b423[_0x5cef09(0x407)])_0x113275[_0x5cef09(0x448)](_0x5cef09(0x70a));_0x14e2f8[_0x5cef09(0x37d)](_0x5cef09(0xa7));}else{if(!_0x48cb56)continue;_0x48cb56['changeTurnOrderByCTB'](_0x17dbf6);}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xf8),_0x3099e2=>{const _0xd79497=_0x4ab18a;if(!SceneManager[_0xd79497(0xae)]())return;if(!Imported[_0xd79497(0x684)])return;if(!BattleManager[_0xd79497(0x41b)]())return;VisuMZ[_0xd79497(0x3cb)](_0x3099e2,_0x3099e2);const _0x568ab8=VisuMZ[_0xd79497(0xa7c)](_0x3099e2['Targets']),_0x4ab9d3=_0x3099e2[_0xd79497(0x5d1)],_0x4dbf68=_0x3099e2[_0xd79497(0x5d1)];for(const _0x5436b3 of _0x568ab8){if(_0xd79497(0x1d2)==='JUlef'){if(!_0x5436b3)continue;if(_0x5436b3[_0xd79497(0x6ca)]===_0xd79497(0x4da))_0x5436b3[_0xd79497(0x340)](_0x4ab9d3);else _0x5436b3[_0xd79497(0x6ca)]===_0xd79497(0x130)&&('gCyKU'===_0xd79497(0x6e0)?this['startWeaponAnimation'](_0xafd9d4['weaponImageId']):_0x5436b3['changeCtbCastTime'](_0x4dbf68));}else{if(this[_0xd79497(0x8de)]['softDamageCap']!==_0x5cd735)return this['_cache'][_0xd79497(0x9cc)];let _0x5a46e4=_0x5b8a5b['BattleCore'][_0xd79497(0x3f5)]['Damage'][_0xd79497(0x67d)];const _0x5a2b40=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x2a2058=this[_0xd79497(0x9aa)]()[_0xd79497(0x71a)](_0x440a2c=>_0x440a2c&&_0x440a2c[_0xd79497(0x7d0)]['match'](_0x5a2b40)?_0x2e528c(_0x3f8b5a['$1'])/0x64:0x0);return _0x5a46e4=_0x2a2058[_0xd79497(0x985)]((_0x54426e,_0xfa1b48)=>_0x54426e+_0xfa1b48,_0x5a46e4),this[_0xd79497(0x8de)]['softDamageCap']=_0x5a46e4,this[_0xd79497(0x8de)]['softDamageCap']['clamp'](0.01,0x1);}}}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x42b),_0x46344b=>{const _0x20f95b=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x20f95b(0x3cb)](_0x46344b,_0x46344b);const _0x1580e5=BattleManager[_0x20f95b(0x605)];if(!_0x1580e5)return;let _0x259852=_0x46344b[_0x20f95b(0x2ee)];_0x1580e5['setCustomDamageFormula'](_0x259852);}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x7dc),_0x4599f1=>{const _0x32879c=_0x4ab18a;if(!SceneManager[_0x32879c(0xae)]())return;VisuMZ[_0x32879c(0x3cb)](_0x4599f1,_0x4599f1);const _0x416f31=VisuMZ[_0x32879c(0xa7c)](_0x4599f1[_0x32879c(0x2ab)]);for(const _0x2bf579 of _0x416f31){if(!_0x2bf579)continue;if(_0x2bf579[_0x32879c(0x48b)]())_0x2bf579[_0x32879c(0xa93)]();}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_DeathBreak',_0x57dc46=>{const _0x1b1934=_0x4ab18a;if(!SceneManager[_0x1b1934(0xae)]())return;VisuMZ[_0x1b1934(0x3cb)](_0x57dc46,_0x57dc46);const _0x2a493a=$gameTemp['getLastPluginCommandInterpreter'](),_0x1efd64=BattleManager[_0x1b1934(0xf7)],_0x3862a7=_0x57dc46['JumpToLabel'];if(!_0x2a493a)return;if(!_0x1efd64)return;_0x1efd64&&_0x1efd64['isDead']()&&_0x3862a7[_0x1b1934(0x9e5)]()['trim']()!==_0x1b1934(0xa33)&&_0x2a493a[_0x1b1934(0x668)]([_0x3862a7]);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x399),_0x34aed7=>{const _0x34084d=_0x4ab18a;if(!SceneManager[_0x34084d(0xae)]())return;VisuMZ[_0x34084d(0x3cb)](_0x34aed7,_0x34aed7);const _0x3ecf19=VisuMZ['CreateActionSequenceTargets'](_0x34aed7[_0x34084d(0x2ab)]);for(const _0x32859a of _0x3ecf19){if(!_0x32859a)continue;if(!_0x32859a[_0x34084d(0x6dd)]())continue;_0x32859a[_0x34084d(0x88e)]();}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x658),_0x208838=>{const _0x377010=_0x4ab18a;if(!SceneManager[_0x377010(0xae)]())return;if(!Imported[_0x377010(0x23e)])return;if(!BattleManager[_0x377010(0xa11)]())return;VisuMZ[_0x377010(0x3cb)](_0x208838,_0x208838);const _0x465c4b=_0x208838[_0x377010(0xa21)];BattleManager[_0x377010(0xf7)]&&(_0x377010(0x727)!==_0x377010(0x727)?_0x5af8e2+=_0x218b10:BattleManager[_0x377010(0xf7)]['friendsUnit']()[_0x377010(0x7f9)](_0x465c4b));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_FtbAction',_0x1b1e8d=>{const _0x3d18db=_0x4ab18a;if(!SceneManager[_0x3d18db(0xae)]())return;if(!Imported[_0x3d18db(0x2f3)])return;if(!BattleManager[_0x3d18db(0x70b)]())return;VisuMZ[_0x3d18db(0x3cb)](_0x1b1e8d,_0x1b1e8d);const _0x3b8f95=_0x1b1e8d[_0x3d18db(0xa21)];BattleManager[_0x3d18db(0xf7)]&&BattleManager[_0x3d18db(0xf7)][_0x3d18db(0xadc)]()[_0x3d18db(0x3ff)](_0x3b8f95);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x6fd),_0x28cf80=>{const _0x7b4aed=_0x4ab18a;if(!SceneManager[_0x7b4aed(0xae)]())return;VisuMZ[_0x7b4aed(0x3cb)](_0x28cf80,_0x28cf80);const _0x52f489=VisuMZ[_0x7b4aed(0xa7c)](_0x28cf80[_0x7b4aed(0x2ab)]),_0x2b1bfc=_0x28cf80[_0x7b4aed(0x1e7)],_0x34c732=_0x28cf80['HP_Flat'],_0x30d13c=_0x28cf80[_0x7b4aed(0x1f0)],_0x5a8977=_0x28cf80[_0x7b4aed(0x136)],_0x52b59a=_0x28cf80['TP_Rate'],_0x382ef8=_0x28cf80['TP_Flat'],_0x5eb1e3=_0x28cf80['ShowPopup'];for(const _0x24412e of _0x52f489){if(_0x7b4aed(0x56f)!=='JKoOC'){if(!_0x24412e)continue;const _0xda8af2=_0x24412e[_0x7b4aed(0x3ab)](),_0x43b5ac=Math[_0x7b4aed(0x1e2)](_0x2b1bfc*_0x24412e['mhp']+_0x34c732),_0x299407=Math[_0x7b4aed(0x1e2)](_0x30d13c*_0x24412e[_0x7b4aed(0x450)]+_0x5a8977),_0x5e49e4=Math[_0x7b4aed(0x1e2)](_0x52b59a*_0x24412e[_0x7b4aed(0x129)]()+_0x382ef8);if(_0x43b5ac!==0x0)_0x24412e['gainHp'](_0x43b5ac);if(_0x299407!==0x0)_0x24412e[_0x7b4aed(0x2fd)](_0x299407);if(_0x5e49e4!==0x0)_0x24412e[_0x7b4aed(0xaeb)](_0x5e49e4);if(_0x5eb1e3)_0x24412e[_0x7b4aed(0xa93)]();_0xda8af2&&_0x24412e['isDead']()&&(_0x7b4aed(0x9c7)!==_0x7b4aed(0x9c7)?this[_0x7b4aed(0x9c)]():_0x24412e[_0x7b4aed(0x36d)]());}else _0x2977ff=_0x147c1b*this['_multipliers'][_0x7b4aed(0x483)],_0x4fda0d+=this['_multipliers'][_0x7b4aed(0x802)]*(_0x460b97>=0x0?0x1:-0x1),_0x448143=this[_0x7b4aed(0x7b1)](_0x7b4aed(0x15b),_0x3e8388,_0x4391d1,![]),_0x5cccc7=this[_0x7b4aed(0x589)](_0x4f4669),_0x17f51f=_0x359804['round'](_0x285439),this[_0x7b4aed(0x952)]=_0x223603,this[_0x7b4aed(0x272)]=this['_totalValue']||0x0,this[_0x7b4aed(0x272)]+=_0x108e4f,_0xa87ab5[_0x7b4aed(0x94c)]['Game_Action_executeDamage'][_0x7b4aed(0x45b)](this,_0x33893e,_0x42e33a),this[_0x7b4aed(0x7b1)](_0x7b4aed(0x66a),_0x265fc9,_0x55aa0d,!![]);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x5be),_0x3eee10=>{const _0x43f0c5=_0x4ab18a;if(!SceneManager[_0x43f0c5(0xae)]())return;VisuMZ[_0x43f0c5(0x3cb)](_0x3eee10,_0x3eee10);const _0x3b8caa=VisuMZ[_0x43f0c5(0xa7c)](_0x3eee10['Targets']);for(const _0xa94ea of _0x3b8caa){if(!_0xa94ea)continue;_0xa94ea[_0x43f0c5(0x357)](_0x3eee10[_0x43f0c5(0xa98)]);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x85b),_0x1403d2=>{const _0x20d508=_0x4ab18a;if(!SceneManager[_0x20d508(0xae)]())return;VisuMZ[_0x20d508(0x3cb)](_0x1403d2,_0x1403d2);const _0x53185d=BattleManager[_0x20d508(0x605)],_0x3f694d={'criticalHitRate':_0x1403d2['CriticalHitRate'],'criticalHitFlat':_0x1403d2['CriticalHitFlat'],'criticalDmgRate':_0x1403d2[_0x20d508(0x9c1)],'criticalDmgFlat':_0x1403d2[_0x20d508(0x5cb)],'damageRate':_0x1403d2[_0x20d508(0x5b5)],'damageFlat':_0x1403d2[_0x20d508(0x80b)],'hitRate':_0x1403d2['HitRate'],'hitFlat':_0x1403d2[_0x20d508(0x4b4)]};_0x53185d[_0x20d508(0x3cf)]=_0x3f694d;}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x9c8),_0x528560=>{const _0x34b545=_0x4ab18a;if(!SceneManager[_0x34b545(0xae)]())return;VisuMZ[_0x34b545(0x3cb)](_0x528560,_0x528560);const _0x478ac4=_0x528560[_0x34b545(0x7b9)];SceneManager['_scene'][_0x34b545(0x690)](_0x478ac4);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_OtbOrder',_0x14e6b3=>{const _0x300374=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x300374(0x49c)])return;if(!BattleManager[_0x300374(0x620)]())return;VisuMZ['ConvertParams'](_0x14e6b3,_0x14e6b3);const _0x4794aa=VisuMZ[_0x300374(0xa7c)](_0x14e6b3[_0x300374(0x2ab)]);for(const _0x1807ef of _0x4794aa){if('MJuce'!==_0x300374(0x37c)){if(!_0x1807ef)continue;let _0x523770=_0x14e6b3['CurrentTurn'],_0x3ca8c0=_0x14e6b3[_0x300374(0x48f)],_0x46907e=_0x14e6b3[_0x300374(0xaea)];if(BattleManager[_0x300374(0xa19)][_0x300374(0xb2)](_0x1807ef))_0x523770+=_0x46907e;else{if(_0x300374(0x9b)!==_0x300374(0x25e))_0x3ca8c0+=_0x46907e;else{if(!_0x662449['isSideView']())return;const _0x5f4c93=this[_0x300374(0x173)]();if(!_0x5f4c93)return;_0x5f4c93[_0x300374(0x6a5)](_0x543bcb,_0x466879,_0x3eda22,_0x272347);}}BattleManager['turnOrderChangeOTB'](_0x1807ef,-_0x523770,![]),BattleManager[_0x300374(0x7ed)](_0x1807ef,-_0x3ca8c0,!![]);}else _0x23c2df[_0x300374(0x94c)]['Window_BattleLog_displayMiss'][_0x300374(0x45b)](this,_0x5d2648);}}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x531),_0x31aa0d=>{const _0x42b9d9=_0x4ab18a;if(!SceneManager[_0x42b9d9(0xae)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x42b9d9(0x73f)]())return;VisuMZ[_0x42b9d9(0x3cb)](_0x31aa0d,_0x31aa0d);const _0x4efe8a=BattleManager[_0x42b9d9(0xf7)]['friendsUnit'](),_0x32375b=_0x31aa0d[_0x42b9d9(0x724)],_0x37e70b=_0x31aa0d[_0x42b9d9(0x4bf)]||_0x42b9d9(0x750),_0x5c9b76=_0x31aa0d['alterType']||_0x42b9d9(0x750),_0x39b671=_0x31aa0d['alterCost']||0x0,_0x5e2092=_0x31aa0d['alterPriority']||0x0;(_0x4efe8a['canAlterActionCostPTB']()||_0x32375b)&&(_0x42b9d9(0x213)===_0x42b9d9(0x562)?(this[_0x42b9d9(0x52d)]['x']=(_0xeb509d['width']-_0x293efe[_0x42b9d9(0x958)])/0x2,this[_0x42b9d9(0x52d)]['y']=(_0x2816eb['height']-_0x4ebdca[_0x42b9d9(0x138)])/0x2):(_0x32375b&&(_0x4efe8a[_0x42b9d9(0x968)]=_0x4efe8a[_0x42b9d9(0x968)]||{},_0x4efe8a[_0x42b9d9(0x968)][_0x42b9d9(0x11f)]=0x0),_0x4efe8a[_0x42b9d9(0x7b7)](_0x37e70b,_0x5c9b76,_0x39b671,_0x5e2092)));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xaec),_0x2fb7db=>{const _0x5a328f=_0x4ab18a;if(!SceneManager[_0x5a328f(0xae)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x5a328f(0x73f)]())return;VisuMZ[_0x5a328f(0x3cb)](_0x2fb7db,_0x2fb7db);const _0x568274=BattleManager['_subject'][_0x5a328f(0xadc)]();let _0x545d73=Math[_0x5a328f(0x877)](_0x2fb7db['ConvertCount'],0x0),_0x586b4e=_0x568274[_0x5a328f(0x74d)](),_0x5ebbe7=_0x568274['getHalfActionsPTB']();while(_0x545d73--){if(_0x586b4e<=0x0&&_0x5ebbe7<=0x0)break;else _0x586b4e>0x0?(_0x586b4e--,_0x5ebbe7++):_0x5ebbe7--;}_0x568274[_0x5a328f(0x546)](_0x586b4e),_0x568274[_0x5a328f(0x59b)](_0x5ebbe7);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_PtbFullHalfAction',_0x35ee8e=>{const _0x2e0c99=_0x4ab18a;if(!SceneManager[_0x2e0c99(0xae)]())return;if(!Imported[_0x2e0c99(0x8f2)])return;if(!BattleManager[_0x2e0c99(0x73f)]())return;VisuMZ[_0x2e0c99(0x3cb)](_0x35ee8e,_0x35ee8e);const _0x32c137=BattleManager[_0x2e0c99(0xf7)]['friendsUnit']();let _0x40f177=_0x35ee8e[_0x2e0c99(0x46f)],_0x1d6091=_0x35ee8e['HalfActions'];_0x32c137[_0x2e0c99(0x5d4)](_0x40f177),_0x32c137[_0x2e0c99(0x8ae)](_0x1d6091);}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x14cecc=>{const _0x42c1c8=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x42c1c8(0x3cb)](_0x14cecc,_0x14cecc);const _0x345958=['MAXHP',_0x42c1c8(0xa81),_0x42c1c8(0x4ed),'DEF','MAT',_0x42c1c8(0xac3),_0x42c1c8(0x40d),_0x42c1c8(0x343)],_0x4cadef=_0x14cecc[_0x42c1c8(0x9f3)],_0x37a084=_0x14cecc[_0x42c1c8(0x5df)],_0x4d9fdd=VisuMZ['CreateActionSequenceTargets'](_0x14cecc[_0x42c1c8(0x2ab)]);for(const _0x2371dd of _0x4d9fdd){if(!_0x2371dd)continue;for(const _0x3219cb of _0x4cadef){if(_0x42c1c8(0xa45)===_0x42c1c8(0x78a)){if(!_0x36e5a9['BattleCore'][_0x42c1c8(0x3f5)][_0x42c1c8(0x582)]['NameLegacy'])return;this['_enemyNameContainer']=new _0x20cd33(),this['_enemyNameContainer']['x']=this[_0x42c1c8(0x52d)]['x'],this[_0x42c1c8(0x937)]['y']=this[_0x42c1c8(0x52d)]['y'];const _0x23fdbd=this[_0x42c1c8(0x16b)][_0x42c1c8(0x50a)](this[_0x42c1c8(0x52d)]);this[_0x42c1c8(0xa1b)](this[_0x42c1c8(0x937)],_0x23fdbd);for(let _0x23c5f8=0x0;_0x23c5f8<0x8;_0x23c5f8++){const _0x58f948=new _0x312288(_0x23c5f8);this[_0x42c1c8(0x937)][_0x42c1c8(0x19a)](_0x58f948);}}else{const _0x2ba7cb=_0x345958[_0x42c1c8(0x50a)](_0x3219cb['toUpperCase']()[_0x42c1c8(0x3a3)]());_0x2ba7cb>=0x0&&_0x2ba7cb<=0x7&&_0x2371dd[_0x42c1c8(0x80f)](_0x2ba7cb)&&_0x2371dd[_0x42c1c8(0x361)](_0x2ba7cb);}}for(const _0x36e972 of _0x37a084){if(_0x42c1c8(0xde)===_0x42c1c8(0x3e7))_0x388d24[_0x42c1c8(0x49d)][_0x42c1c8(0xa07)][_0x42c1c8(0x45b)](this),this[_0x42c1c8(0x27c)](_0x42c1c8(0x91b));else{const _0x4e12cb=_0x345958[_0x42c1c8(0x50a)](_0x36e972[_0x42c1c8(0x9e5)]()[_0x42c1c8(0x3a3)]());_0x4e12cb>=0x0&&_0x4e12cb<=0x7&&_0x2371dd[_0x42c1c8(0x9ff)](_0x4e12cb)&&_0x2371dd[_0x42c1c8(0x361)](_0x4e12cb);}}}}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0xa42),_0xddf90e=>{const _0xee83d4=_0x4ab18a;if(!SceneManager[_0xee83d4(0xae)]())return;VisuMZ[_0xee83d4(0x3cb)](_0xddf90e,_0xddf90e);const _0x49834a=_0xddf90e[_0xee83d4(0x454)],_0x3b65e9=VisuMZ[_0xee83d4(0xa7c)](_0xddf90e[_0xee83d4(0x2ab)]);for(const _0x3a4fe0 of _0x3b65e9){if('mlSXs'!=='mlSXs'){const _0x48a66d=_0x323e7c[_0xee83d4(0x958)]/0x2,_0x34783f=this[_0xee83d4(0x17d)](_0x552d8d[_0xee83d4(0x94c)][_0xee83d4(0x3f5)][_0xee83d4(0x377)][_0xee83d4(0x889)],!![]),_0x599b79=_0x1360e7['round']((_0x5b12c6['boxWidth']-_0x48a66d)/0x2),_0x494350=_0x4968ec[_0xee83d4(0x138)]-_0x34783f-this['statusWindowRectXPStyle']()[_0xee83d4(0x428)];return new _0x1d29a5(_0x599b79,_0x494350,_0x48a66d,_0x34783f);}else{if(!_0x3a4fe0)continue;for(const _0x1bde9b of _0x49834a){_0x3a4fe0['removeState'](_0x1bde9b);}}}}),PluginManager['registerCommand'](pluginData['name'],_0x4ab18a(0x739),_0x1a25c6=>{const _0x150fe5=_0x4ab18a;if(!SceneManager[_0x150fe5(0xae)]())return;if(!Imported[_0x150fe5(0xc9)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x150fe5(0x3cb)](_0x1a25c6,_0x1a25c6);const _0x3f8807=_0x1a25c6[_0x150fe5(0x7fe)],_0x36bd79=VisuMZ['CreateActionSequenceTargets'](_0x1a25c6[_0x150fe5(0x2ab)]),_0x4ae18c=_0x1a25c6['ForceExploited'],_0x2ed045=_0x1a25c6['Exploiter'],_0x421d77=_0x1a25c6['ForceExploiter'],_0x17d3b=BattleManager[_0x150fe5(0x605)];if(_0x3f8807)for(const _0x5797c6 of _0x36bd79){if(_0x150fe5(0x893)===_0x150fe5(0x148)){const _0xdcce5e=this[_0x150fe5(0x95f)](_0xc49e20);if(_0xdcce5e['match'](/\\I\[(\d+)\]/i)){const _0x1bc675=this[_0x150fe5(0x1a3)](_0x2397dd),_0x1a56ef=this[_0x150fe5(0x3a1)](_0xdcce5e)[_0x150fe5(0x999)];return _0x1a56ef<=_0x1bc675[_0x150fe5(0x999)]?'iconText':'icon';}}else{if(!_0x5797c6)continue;if(_0x5797c6===user)continue;if(_0x4ae18c)_0x5797c6[_0x150fe5(0x6c8)](![]);_0x5797c6[_0x150fe5(0x8bc)](BattleManager[_0x150fe5(0xf7)],_0x17d3b);}}if(_0x2ed045&&BattleManager[_0x150fe5(0xf7)]){if(_0x421d77)BattleManager[_0x150fe5(0xf7)][_0x150fe5(0x6c8)](![]);const _0x77fee0=_0x36bd79[0x0];BattleManager[_0x150fe5(0x447)](_0x77fee0,_0x17d3b);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xa0d),_0x28b19a=>{const _0x2da0f7=_0x4ab18a;if(!SceneManager[_0x2da0f7(0xae)]())return;if(!Imported[_0x2da0f7(0xc9)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x2da0f7(0x3cb)](_0x28b19a,_0x28b19a);const _0x3a91d3=_0x28b19a['Actions'];BattleManager['_subject']&&BattleManager[_0x2da0f7(0xf7)][_0x2da0f7(0x58b)](_0x3a91d3);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x87e),_0x2a614d=>{const _0x507b94=_0x4ab18a;if(!SceneManager[_0x507b94(0xae)]())return;if(!Imported[_0x507b94(0xc9)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x2a614d,_0x2a614d);let _0x4bf93e=_0x2a614d[_0x507b94(0x3a8)];if(BattleManager['_subject']){BattleManager[_0x507b94(0xf7)][_0x507b94(0x207)]=BattleManager[_0x507b94(0xf7)]['_actions']||[];while(_0x4bf93e--){if('oADCu'===_0x507b94(0xa97)){if(BattleManager[_0x507b94(0xf7)][_0x507b94(0x207)]['length']<=0x0)break;BattleManager['_subject'][_0x507b94(0x207)]['shift']();}else _0x3f0072+=_0x2c04d5,_0x3c6460+=_0x2b3884['isActor']()?-_0x3d08d3:_0x21ad9b;}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x817),_0x110fb7=>{const _0x105df7=_0x4ab18a;if(!SceneManager[_0x105df7(0xae)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x105df7(0x3cb)](_0x110fb7,_0x110fb7);const _0x85a67e=VisuMZ[_0x105df7(0xa7c)](_0x110fb7['Targets']),_0x147426=_0x110fb7[_0x105df7(0x304)];for(const _0x429e4a of _0x85a67e){if(!_0x429e4a)continue;if(!_0x429e4a[_0x105df7(0x526)]())continue;_0x429e4a[_0x105df7(0x431)](_0x147426);}}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x69c),_0x193889=>{const _0x2252ad=_0x4ab18a;if(!SceneManager[_0x2252ad(0xae)]())return;VisuMZ[_0x2252ad(0x3cb)](_0x193889,_0x193889);const _0x1140fe=VisuMZ[_0x2252ad(0xa7c)](_0x193889[_0x2252ad(0x2ab)]),_0x2ae683=_0x193889['Text'],_0xad62e9={'textColor':ColorManager[_0x2252ad(0x444)](_0x193889[_0x2252ad(0x50c)]),'flashColor':_0x193889['FlashColor'],'flashDuration':_0x193889[_0x2252ad(0x458)]};for(const _0x29b00f of _0x1140fe){if(_0x2252ad(0x45a)===_0x2252ad(0x542)){if(!_0xe07556[_0x2252ad(0xae)]())return;const _0x458665=_0x1d720d[_0x2252ad(0x84a)];_0x458665[_0x2252ad(0x338)]();}else{if(!_0x29b00f)continue;_0x29b00f[_0x2252ad(0x79a)](_0x2ae683,_0xad62e9);}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x6d7),_0x7ae4b2=>{const _0x566815=_0x4ab18a;if(!SceneManager[_0x566815(0xae)]())return;VisuMZ['ConvertParams'](_0x7ae4b2,_0x7ae4b2);const _0x20edbc=VisuMZ[_0x566815(0xa7c)](_0x7ae4b2['Targets']);let _0x125892=$gameVariables[_0x566815(0x7ce)](_0x7ae4b2['Variable']);Imported[_0x566815(0x1fc)]&&_0x7ae4b2[_0x566815(0x5c1)]&&(_0x125892=VisuMZ['GroupDigits'](_0x125892));const _0x4bdcac=String(_0x125892),_0x46c811={'textColor':ColorManager[_0x566815(0x444)](_0x7ae4b2[_0x566815(0x50c)]),'flashColor':_0x7ae4b2['FlashColor'],'flashDuration':_0x7ae4b2[_0x566815(0x458)]};for(const _0x10db8a of _0x20edbc){if(_0x566815(0x6d3)!==_0x566815(0x6d3)){if(this['hasSvBattler']())this[_0x566815(0x1f8)][_0x566815(0x405)](_0x5a156c);}else{if(!_0x10db8a)continue;_0x10db8a[_0x566815(0x79a)](_0x4bdcac,_0x46c811);}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x5b4),_0x236012=>{const _0x10715b=_0x4ab18a;if(!SceneManager[_0x10715b(0xae)]())return;const _0x4938e1=$gameTemp[_0x10715b(0x9d8)]();if(!_0x4938e1)return;_0x4938e1[_0x10715b(0x37d)]('battleEffect');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xa40),_0x1b8f33=>{const _0x244096=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1b8f33,_0x1b8f33);const _0xc473d6=VisuMZ[_0x244096(0xa7c)](_0x1b8f33[_0x244096(0x2ab)]);for(const _0x1e9b7d of _0xc473d6){if('nhine'==='edPwQ'){if(!_0x43283c['isSideView']())return;const _0x3173ba=this['battler']();if(!_0x3173ba)return;_0x3173ba[_0x244096(0xa3)](_0x1aadeb,_0x16c7d6,_0x2d1299);}else{if(!_0x1e9b7d)continue;_0x1e9b7d[_0x244096(0x99)]();}}}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x5f0),_0x1b31a2=>{const _0x152b30=_0x4ab18a;if(!SceneManager[_0x152b30(0xae)]())return;VisuMZ[_0x152b30(0x3cb)](_0x1b31a2,_0x1b31a2);const _0x34512a=VisuMZ['CreateActionSequenceTargets'](_0x1b31a2[_0x152b30(0x2ab)]),_0x58e765=_0x1b31a2[_0x152b30(0x929)]['toLowerCase']()[_0x152b30(0x3a3)]();let _0x2a0cf8=_0x1b31a2[_0x152b30(0x494)];const _0x2b4d91=_0x1b31a2[_0x152b30(0x5bc)];![_0x152b30(0x141),_0x152b30(0x806),_0x152b30(0x49f),_0x152b30(0xada)][_0x152b30(0xb2)](_0x58e765)&&(_0x2a0cf8=![]);for(const _0x1e4230 of _0x34512a){if(!_0x1e4230)continue;_0x1e4230[_0x152b30(0xb0)](_0x58e765,_0x2a0cf8,_0x2b4d91);}}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x9bc),_0x4e28e6=>{const _0x452a95=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4e28e6,_0x4e28e6);const _0x360a42=VisuMZ[_0x452a95(0xa7c)](_0x4e28e6['Targets']),_0x55378f=_0x4e28e6[_0x452a95(0x929)]['toLowerCase']()[_0x452a95(0x3a3)](),_0x2dafc8=_0x4e28e6[_0x452a95(0x494)];for(const _0x271831 of _0x360a42){if(_0x452a95(0x287)===_0x452a95(0x773))this[_0x452a95(0x736)]=(this[_0x452a95(0x736)]*(_0x47e02e-0x1)+this[_0x452a95(0x90)])/_0x52f1b9;else{if(!_0x271831)continue;if(_0x55378f[_0x452a95(0x378)](/ATTACK[ ](\d+)/i))_0x271831[_0x452a95(0x715)](Number(RegExp['$1']));else{if(_0x55378f===_0x452a95(0x141)){if('lCraG'==='YSVKc'){_0x4aa5c1=_0x35b28e[_0x452a95(0x94c)]['JS'][_0x293cc2]['call'](this,this['subject'](),_0x166a2a,this[_0x452a95(0x925)](),_0x598dba);if(_0x120c45)_0x4621eb=_0x342b4b;}else _0x271831['performAttack']();}else _0x271831['requestMotion'](_0x55378f);}if(!_0x2dafc8)_0x271831['startWeaponAnimation'](0x0);else{if(_0x2dafc8&&[_0x452a95(0x806),_0x452a95(0x49f),_0x452a95(0xa4c)]['includes'](_0x55378f)){}}}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x3fc),_0x265a8a=>{const _0x316450=_0x4ab18a;if(!SceneManager[_0x316450(0xae)]())return;VisuMZ[_0x316450(0x3cb)](_0x265a8a,_0x265a8a);const _0x3d1113=BattleManager[_0x316450(0x605)];if(!_0x3d1113)return;if(!_0x3d1113[_0x316450(0x925)]())return;const _0x5a9ce4=VisuMZ[_0x316450(0xa7c)](_0x265a8a[_0x316450(0x2ab)]);for(const _0x1465d0 of _0x5a9ce4){if(!_0x1465d0)continue;_0x1465d0[_0x316450(0xa23)](_0x3d1113);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x931),_0x25c847=>{const _0x2147d9=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x25c847,_0x25c847);const _0x1f29a1=VisuMZ[_0x2147d9(0xa7c)](_0x25c847[_0x2147d9(0x2ab)]);for(const _0x88c77 of _0x1f29a1){if(!_0x88c77)continue;if(!_0x88c77[_0x2147d9(0x173)]())continue;_0x88c77[_0x2147d9(0x173)]()['refreshMotion']();}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Motion_WaitMotionFrame',_0x33936c=>{const _0x22fa37=_0x4ab18a;if(!SceneManager[_0x22fa37(0xae)]())return;VisuMZ[_0x22fa37(0x3cb)](_0x33936c,_0x33936c);const _0x393695=$gameTemp[_0x22fa37(0x9d8)](),_0x2257e4=_0x33936c[_0x22fa37(0x5e1)]*Sprite_Battler[_0x22fa37(0x355)];_0x393695[_0x22fa37(0x1d4)](_0x2257e4);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x8ec),_0x4cc54b=>{const _0x5f22ad=_0x4ab18a;if(!SceneManager[_0x5f22ad(0xae)]())return;VisuMZ[_0x5f22ad(0x3cb)](_0x4cc54b,_0x4cc54b);const _0x209258=$gameTemp['getLastPluginCommandInterpreter'](),_0x2d1a5e=BattleManager[_0x5f22ad(0x605)];if(!_0x209258||!_0x2d1a5e)return;if(!_0x2d1a5e['item']())return;const _0x4ccd2a=VisuMZ[_0x5f22ad(0xa7c)](_0x4cc54b[_0x5f22ad(0x2ab)]);for(const _0x54895b of _0x4ccd2a){if(!_0x54895b)continue;_0x54895b[_0x5f22ad(0x21d)](_0x2d1a5e);}if(_0x4cc54b[_0x5f22ad(0x960)])_0x209258[_0x5f22ad(0x37d)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x4ab18a(0x10f),_0x20b2a5=>{const _0x247fc3=_0x4ab18a;if(!SceneManager[_0x247fc3(0xae)]())return;if(!$gameSystem[_0x247fc3(0x332)]())return;VisuMZ[_0x247fc3(0x3cb)](_0x20b2a5,_0x20b2a5);const _0x1dd0d=VisuMZ[_0x247fc3(0xa7c)](_0x20b2a5[_0x247fc3(0x2ab)]);let _0x405cde=_0x20b2a5[_0x247fc3(0x2c9)][_0x247fc3(0x378)](/back/i);for(const _0x5d1225 of _0x1dd0d){if(!_0x5d1225)continue;if(_0x20b2a5[_0x247fc3(0x2c9)][_0x247fc3(0x378)](/rand/i))_0x405cde=Math['randomInt'](0x2);_0x5d1225[_0x247fc3(0x453)](!!_0x405cde);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Movement_FacePoint',_0x258898=>{const _0x549e7d=_0x4ab18a;if(!SceneManager[_0x549e7d(0xae)]())return;if(!$gameSystem[_0x549e7d(0x332)]())return;VisuMZ[_0x549e7d(0x3cb)](_0x258898,_0x258898);const _0x286c04=VisuMZ['CreateActionSequenceTargets'](_0x258898[_0x549e7d(0x2ab)]);let _0x33bef8=_0x258898[_0x549e7d(0x4e5)];const _0x54bfd0=_0x258898[_0x549e7d(0x599)];for(const _0x4e3927 of _0x286c04){if(!_0x4e3927)continue;let _0x51e238=_0x4e3927[_0x549e7d(0x173)]()[_0x549e7d(0x520)],_0x49fb73=_0x4e3927['battler']()[_0x549e7d(0x5e7)];if(_0x33bef8[_0x549e7d(0x378)](/home/i))'nlFNH'!==_0x549e7d(0x200)?(_0x51e238=_0x4e3927[_0x549e7d(0x173)]()[_0x549e7d(0x9f)],_0x49fb73=_0x4e3927[_0x549e7d(0x173)]()[_0x549e7d(0x665)]):(this[_0x549e7d(0x904)]=_0x53e12e[_0x549e7d(0x9f6)]>=0x0?0x2:0x3,this[_0x549e7d(0x854)](_0x1ad391[_0x549e7d(0x9f6)]));else{if(_0x33bef8[_0x549e7d(0x378)](/center/i))_0x549e7d(0x6f1)===_0x549e7d(0x6f1)?(_0x51e238=Graphics[_0x549e7d(0x958)]/0x2,_0x49fb73=Graphics[_0x549e7d(0x138)]/0x2):(_0x1f7abb['x']=_0x598c9b['x']+_0x297115[_0x549e7d(0x973)]*_0x100a29,_0xb3f288['y']=_0x4fc6a3['y']+_0x3e5948[_0x549e7d(0x1d7)]);else _0x33bef8[_0x549e7d(0x378)](/point (\d+), (\d+)/i)&&(_0x51e238=Number(RegExp['$1']),_0x49fb73=Number(RegExp['$2']));}_0x4e3927[_0x549e7d(0x240)](Math[_0x549e7d(0x1e2)](_0x51e238),Math[_0x549e7d(0x1e2)](_0x49fb73),!!_0x54bfd0);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Movement_FaceTarget',_0x50c7d8=>{const _0x330a87=_0x4ab18a;if(!SceneManager[_0x330a87(0xae)]())return;if(!$gameSystem[_0x330a87(0x332)]())return;VisuMZ[_0x330a87(0x3cb)](_0x50c7d8,_0x50c7d8);const _0x2b4993=VisuMZ[_0x330a87(0xa7c)](_0x50c7d8[_0x330a87(0x302)]),_0x438139=VisuMZ[_0x330a87(0xa7c)](_0x50c7d8[_0x330a87(0x370)]),_0x460169=_0x438139[_0x330a87(0x71a)](_0x496f02=>_0x496f02&&_0x496f02[_0x330a87(0x173)]()?_0x496f02[_0x330a87(0x173)]()[_0x330a87(0x520)]:0x0)/(_0x438139[_0x330a87(0x820)]||0x1),_0xbf845b=_0x438139['map'](_0x255ddf=>_0x255ddf&&_0x255ddf[_0x330a87(0x173)]()?_0x255ddf[_0x330a87(0x173)]()['_baseY']:0x0)/(_0x438139['length']||0x1),_0x503186=_0x50c7d8['FaceAway'];for(const _0x3f1b4d of _0x2b4993){if(!_0x3f1b4d)continue;_0x3f1b4d[_0x330a87(0x240)](Math['round'](_0x460169),Math[_0x330a87(0x1e2)](_0xbf845b),!!_0x503186);}}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x8bb),_0x4d3bfd=>{const _0x4cab72=_0x4ab18a;if(!SceneManager[_0x4cab72(0xae)]())return;VisuMZ[_0x4cab72(0x3cb)](_0x4d3bfd,_0x4d3bfd);const _0x1be566=$gameTemp[_0x4cab72(0x9d8)](),_0x3570e4=VisuMZ['CreateActionSequenceTargets'](_0x4d3bfd[_0x4cab72(0x2ab)]),_0x195f90=_0x4d3bfd[_0x4cab72(0x4a4)],_0x4edab7=_0x4d3bfd[_0x4cab72(0x532)],_0x5a34bd=_0x4d3bfd['EasingType'],_0x1a4062=_0x4d3bfd[_0x4cab72(0x110)];if(!_0x1be566)return;for(const _0x1b0a74 of _0x3570e4){if(!_0x1b0a74)continue;_0x1b0a74[_0x4cab72(0x1a1)](_0x195f90,_0x4edab7,_0x5a34bd);}if(_0x1a4062)_0x1be566['setWaitMode']('battleFloat');}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x7c2),_0x354491=>{const _0x124622=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x124622(0x3cb)](_0x354491,_0x354491);const _0x1d183d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1d183d)return;const _0x4aa327=VisuMZ[_0x124622(0xa7c)](_0x354491[_0x124622(0x2ab)]);for(const _0xe18e1d of _0x4aa327){if(!_0xe18e1d)continue;_0xe18e1d[_0x124622(0x71e)]();}BattleManager['_subject']&&BattleManager[_0x124622(0xf7)][_0x124622(0x325)]();if(_0x354491[_0x124622(0x960)])_0x1d183d[_0x124622(0x37d)](_0x124622(0x888));}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x488),_0x41cdac=>{const _0x2a695c=_0x4ab18a;if(!SceneManager[_0x2a695c(0xae)]())return;VisuMZ[_0x2a695c(0x3cb)](_0x41cdac,_0x41cdac);const _0x32fb96=$gameTemp['getLastPluginCommandInterpreter'](),_0x1fc068=VisuMZ[_0x2a695c(0xa7c)](_0x41cdac[_0x2a695c(0x2ab)]),_0x1ab6bf=_0x41cdac[_0x2a695c(0x4a4)],_0x1b0641=_0x41cdac[_0x2a695c(0x532)],_0x1fc608=_0x41cdac[_0x2a695c(0x974)];if(!_0x32fb96)return;for(const _0x5a40d9 of _0x1fc068){if(!_0x5a40d9)continue;_0x5a40d9[_0x2a695c(0x64d)](_0x1ab6bf,_0x1b0641);}if(_0x1fc608)_0x32fb96[_0x2a695c(0x37d)](_0x2a695c(0x9c3));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x9af),_0x280630=>{const _0x1177d0=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1177d0(0x332)]())return;VisuMZ['ConvertParams'](_0x280630,_0x280630);const _0x196f04=$gameTemp[_0x1177d0(0x9d8)](),_0x48d3fa=VisuMZ['CreateActionSequenceTargets'](_0x280630[_0x1177d0(0x2ab)]),_0x58a9c0=_0x280630[_0x1177d0(0x97d)],_0x140467=_0x280630[_0x1177d0(0x44d)],_0x3803c2=_0x280630[_0x1177d0(0x8b2)],_0x3e36cc=_0x280630['Duration'],_0x3fdd68=_0x280630[_0x1177d0(0x247)],_0x58b389=_0x280630[_0x1177d0(0x5c7)],_0x38f4cf=_0x280630[_0x1177d0(0x929)],_0x14aae7=_0x280630[_0x1177d0(0x960)];if(!_0x196f04)return;for(const _0x241461 of _0x48d3fa){if(!_0x241461)continue;let _0x2f1c30=_0x140467,_0xbf582e=_0x3803c2;if(_0x58a9c0[_0x1177d0(0x378)](/horz/i))_0x2f1c30*=_0x241461['isActor']()?-0x1:0x1;if(_0x58a9c0[_0x1177d0(0x378)](/vert/i))_0xbf582e*=_0x241461[_0x1177d0(0x526)]()?-0x1:0x1;_0x241461['moveBattlerDistance'](_0x2f1c30,_0xbf582e,_0x3e36cc,_0x3fdd68,_0x58b389),_0x241461['requestMotion'](_0x38f4cf);}if(_0x14aae7)_0x196f04['setWaitMode'](_0x1177d0(0x888));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x91d),_0x2bcd36=>{const _0x473bf6=_0x4ab18a;if(!SceneManager[_0x473bf6(0xae)]())return;if(!$gameSystem[_0x473bf6(0x332)]())return;VisuMZ[_0x473bf6(0x3cb)](_0x2bcd36,_0x2bcd36);const _0xc83085=$gameTemp[_0x473bf6(0x9d8)](),_0x3fd0f9=VisuMZ[_0x473bf6(0xa7c)](_0x2bcd36['Targets']),_0x2e93cf=_0x2bcd36['Destination'],_0x38b1e5=_0x2bcd36['OffsetAdjust'],_0x310e05=_0x2bcd36['OffsetX'],_0x4364f5=_0x2bcd36[_0x473bf6(0xab3)],_0x44d100=_0x2bcd36[_0x473bf6(0x532)],_0x4ec512=_0x2bcd36[_0x473bf6(0x247)],_0x474d6d=_0x2bcd36[_0x473bf6(0x5c7)],_0x2fdd2c=_0x2bcd36[_0x473bf6(0x929)],_0x162948=_0x2bcd36[_0x473bf6(0x960)];if(!_0xc83085)return;for(const _0x222b11 of _0x3fd0f9){if(!_0x222b11)continue;let _0x42d772=_0x222b11['battler']()[_0x473bf6(0x520)],_0x2d98e0=_0x222b11['battler']()[_0x473bf6(0x5e7)];if(_0x2e93cf[_0x473bf6(0x378)](/home/i))_0x42d772=_0x222b11['battler']()['_homeX'],_0x2d98e0=_0x222b11['battler']()[_0x473bf6(0x665)];else{if(_0x2e93cf[_0x473bf6(0x378)](/center/i)){if('SxpJo'===_0x473bf6(0x6c1))return _0x100563[_0x473bf6(0x150)]();else _0x42d772=Graphics[_0x473bf6(0x958)]/0x2,_0x2d98e0=Graphics[_0x473bf6(0x138)]/0x2;}else{if(_0x2e93cf[_0x473bf6(0x378)](/point (\d+), (\d+)/i)){if(_0x473bf6(0x6fc)!==_0x473bf6(0x6fc))return 0x0;else _0x42d772=Number(RegExp['$1']),_0x2d98e0=Number(RegExp['$2']);}}}if(_0x38b1e5[_0x473bf6(0x378)](/none/i))_0x42d772+=_0x310e05,_0x2d98e0+=_0x4364f5;else{if(_0x38b1e5[_0x473bf6(0x378)](/horz/i)&&_0x38b1e5[_0x473bf6(0x378)](/vert/i))_0x42d772+=_0x222b11[_0x473bf6(0x526)]()?-_0x310e05:_0x310e05,_0x2d98e0+=_0x222b11[_0x473bf6(0x526)]()?-_0x4364f5:_0x4364f5;else{if(_0x38b1e5[_0x473bf6(0x378)](/horz/i))_0x42d772+=_0x222b11[_0x473bf6(0x526)]()?-_0x310e05:_0x310e05,_0x2d98e0+=_0x4364f5;else _0x38b1e5[_0x473bf6(0x378)](/vert/i)&&(_0x473bf6(0x771)!==_0x473bf6(0x886)?(_0x42d772+=_0x310e05,_0x2d98e0+=_0x222b11[_0x473bf6(0x526)]()?-_0x4364f5:_0x4364f5):this['_speed']=_0x9aa181[_0x473bf6(0x769)]);}}_0x222b11['moveBattlerToPoint'](_0x42d772,_0x2d98e0,_0x44d100,_0x4ec512,_0x474d6d,-0x1),_0x222b11[_0x473bf6(0x27c)](_0x2fdd2c);}if(_0x162948)_0xc83085[_0x473bf6(0x37d)](_0x473bf6(0x888));}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x8a5),_0x456d03=>{const _0x1abb23=_0x4ab18a;if(!SceneManager[_0x1abb23(0xae)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x456d03,_0x456d03);const _0x50b8d1=$gameTemp[_0x1abb23(0x9d8)](),_0x4c9ff7=VisuMZ[_0x1abb23(0xa7c)](_0x456d03[_0x1abb23(0x302)]),_0x5c82fd=VisuMZ[_0x1abb23(0xa7c)](_0x456d03['Targets2']),_0x1a9ac6=_0x456d03['TargetLocation'];let _0x4d5d04=_0x456d03[_0x1abb23(0x5e9)];const _0x4e0e41=_0x456d03[_0x1abb23(0x4ec)],_0x4e0b7f=_0x456d03[_0x1abb23(0x4c3)],_0x439af6=_0x456d03[_0x1abb23(0xab3)],_0x3a6feb=_0x456d03['Duration'],_0x5eb02f=_0x456d03[_0x1abb23(0x247)],_0xf0704b=_0x456d03[_0x1abb23(0x5c7)],_0x2af014=_0x456d03[_0x1abb23(0x929)],_0x33b58f=_0x456d03[_0x1abb23(0x960)],_0x2a27ef=Math['min'](..._0x5c82fd[_0x1abb23(0x71a)](_0x4a128b=>_0x4a128b[_0x1abb23(0x173)]()['_baseX']-_0x4a128b[_0x1abb23(0x173)]()[_0x1abb23(0x2e5)]()/0x2)),_0x26d52e=Math[_0x1abb23(0x877)](..._0x5c82fd['map'](_0x919acd=>_0x919acd[_0x1abb23(0x173)]()[_0x1abb23(0x520)]+_0x919acd[_0x1abb23(0x173)]()[_0x1abb23(0x2e5)]()/0x2)),_0x133652=Math[_0x1abb23(0x8f1)](..._0x5c82fd[_0x1abb23(0x71a)](_0x10b628=>_0x10b628[_0x1abb23(0x173)]()[_0x1abb23(0x5e7)]-_0x10b628[_0x1abb23(0x173)]()[_0x1abb23(0x6da)]())),_0x4fc377=Math['max'](..._0x5c82fd[_0x1abb23(0x71a)](_0x2eeaef=>_0x2eeaef[_0x1abb23(0x173)]()[_0x1abb23(0x5e7)])),_0x6ae85b=_0x5c82fd[_0x1abb23(0xa47)](_0x156292=>_0x156292[_0x1abb23(0x526)]())[_0x1abb23(0x820)],_0x1bf97f=_0x5c82fd[_0x1abb23(0xa47)](_0x36a0e8=>_0x36a0e8[_0x1abb23(0x6dd)]())[_0x1abb23(0x820)];let _0x245966=0x0,_0x2aa4a7=0x0;if(_0x1a9ac6[_0x1abb23(0x378)](/front/i))_0x245966=_0x6ae85b>=_0x1bf97f?_0x2a27ef:_0x26d52e;else{if(_0x1a9ac6[_0x1abb23(0x378)](/middle/i))_0x245966=(_0x2a27ef+_0x26d52e)/0x2,_0x4d5d04=-0x1;else _0x1a9ac6['match'](/back/i)&&(_0x245966=_0x6ae85b>=_0x1bf97f?_0x26d52e:_0x2a27ef);}if(_0x1a9ac6[_0x1abb23(0x378)](/head/i))_0x2aa4a7=_0x133652;else{if(_0x1a9ac6['match'](/center/i))_0x2aa4a7=(_0x133652+_0x4fc377)/0x2;else _0x1a9ac6['match'](/base/i)&&(_0x2aa4a7=_0x4fc377);}if(!_0x50b8d1)return;for(const _0x506517 of _0x4c9ff7){if(!_0x506517)continue;let _0x158319=_0x245966,_0x291b62=_0x2aa4a7;if(_0x4e0e41[_0x1abb23(0x378)](/none/i))_0x158319+=_0x4e0b7f,_0x291b62+=_0x439af6;else{if(_0x4e0e41[_0x1abb23(0x378)](/horz/i)&&_0x4e0e41['match'](/vert/i))_0x158319+=_0x506517[_0x1abb23(0x526)]()?-_0x4e0b7f:_0x4e0b7f,_0x291b62+=_0x506517[_0x1abb23(0x526)]()?-_0x439af6:_0x439af6;else{if(_0x4e0e41['match'](/horz/i))_0x158319+=_0x506517[_0x1abb23(0x526)]()?-_0x4e0b7f:_0x4e0b7f,_0x291b62+=_0x439af6;else _0x4e0e41[_0x1abb23(0x378)](/vert/i)&&(_0x1abb23(0x8e7)===_0x1abb23(0x8e7)?(_0x158319+=_0x4e0b7f,_0x291b62+=_0x506517[_0x1abb23(0x526)]()?-_0x439af6:_0x439af6):this[_0x1abb23(0x335)]=_0x37b4de(_0x4da6b1['$1']));}}_0x506517[_0x1abb23(0x7c6)](_0x158319,_0x291b62,_0x3a6feb,_0x5eb02f,_0xf0704b,_0x4d5d04),_0x506517[_0x1abb23(0x27c)](_0x2af014);}if(_0x33b58f)_0x50b8d1['setWaitMode']('battleMove');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Movement_Opacity',_0x1d5543=>{const _0x3e1d63=_0x4ab18a;if(!SceneManager[_0x3e1d63(0xae)]())return;VisuMZ[_0x3e1d63(0x3cb)](_0x1d5543,_0x1d5543);const _0x2b8fef=$gameTemp[_0x3e1d63(0x9d8)](),_0x36b943=VisuMZ['CreateActionSequenceTargets'](_0x1d5543['Targets']),_0x20aac4=_0x1d5543[_0x3e1d63(0xa18)],_0xa19c76=_0x1d5543['Duration'],_0x208c27=_0x1d5543[_0x3e1d63(0x5c7)],_0x4aef2f=_0x1d5543[_0x3e1d63(0x63b)];if(!_0x2b8fef)return;for(const _0x47b51a of _0x36b943){if(!_0x47b51a)continue;_0x47b51a[_0x3e1d63(0xa94)](_0x20aac4,_0xa19c76,_0x208c27);}if(_0x4aef2f)_0x2b8fef[_0x3e1d63(0x37d)](_0x3e1d63(0xb6));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xc6),_0x2aaf01=>{const _0x423749=_0x4ab18a;if(!SceneManager[_0x423749(0xae)]())return;VisuMZ[_0x423749(0x3cb)](_0x2aaf01,_0x2aaf01);const _0x2a9557=$gameTemp[_0x423749(0x9d8)](),_0x55554=VisuMZ['CreateActionSequenceTargets'](_0x2aaf01[_0x423749(0x2ab)]),_0x7ab19=_0x2aaf01[_0x423749(0x44b)],_0x167a81=_0x2aaf01[_0x423749(0x401)],_0x5e1829=_0x2aaf01[_0x423749(0x532)],_0x38e81d=_0x2aaf01[_0x423749(0x5c7)],_0x48a95a=_0x2aaf01[_0x423749(0x4e4)];if(!_0x2a9557)return;for(const _0x32b73f of _0x55554){if(!_0x32b73f)continue;_0x32b73f[_0x423749(0xaf6)](_0x7ab19,_0x167a81,_0x5e1829,_0x38e81d);}if(_0x48a95a)_0x2a9557[_0x423749(0x37d)]('battleGrow');}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0xae4),_0x33522a=>{const _0x189f9b=_0x4ab18a;if(!SceneManager[_0x189f9b(0xae)]())return;VisuMZ[_0x189f9b(0x3cb)](_0x33522a,_0x33522a);const _0x4fbf5c=$gameTemp['getLastPluginCommandInterpreter'](),_0x3256c6=VisuMZ['CreateActionSequenceTargets'](_0x33522a[_0x189f9b(0x2ab)]),_0x132766=_0x33522a['SkewX'],_0x292986=_0x33522a[_0x189f9b(0x17e)],_0xf9a0ec=_0x33522a[_0x189f9b(0x532)],_0x4afd70=_0x33522a['EasingType'],_0x16c47f=_0x33522a['WaitForSkew'];if(!_0x4fbf5c)return;for(const _0x2c3036 of _0x3256c6){if(!_0x2c3036)continue;_0x2c3036[_0x189f9b(0x96c)](_0x132766,_0x292986,_0xf9a0ec,_0x4afd70);}if(_0x16c47f)_0x4fbf5c['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Movement_Spin',_0x2c0673=>{const _0x1632df=_0x4ab18a;if(!SceneManager[_0x1632df(0xae)]())return;VisuMZ[_0x1632df(0x3cb)](_0x2c0673,_0x2c0673);const _0x2777eb=$gameTemp[_0x1632df(0x9d8)](),_0x3ae4f3=VisuMZ['CreateActionSequenceTargets'](_0x2c0673['Targets']),_0x1a48f3=_0x2c0673[_0x1632df(0x306)],_0x46607c=_0x2c0673[_0x1632df(0x532)],_0x535f4c=_0x2c0673[_0x1632df(0x5c7)],_0x2cd9d0=_0x2c0673[_0x1632df(0x2dc)],_0x4c5626=_0x2c0673['WaitForSpin'];if(!_0x2777eb)return;for(const _0x3efc52 of _0x3ae4f3){if(!_0x3efc52)continue;_0x3efc52[_0x1632df(0x26f)](_0x1a48f3,_0x46607c,_0x535f4c,_0x2cd9d0);}if(_0x4c5626)_0x2777eb[_0x1632df(0x37d)]('battleSpin');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x702),_0x36f39e=>{const _0x4e248b=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;const _0x55500e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x55500e)return;_0x55500e['setWaitMode'](_0x4e248b(0xa69));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x3a9),_0x576519=>{const _0x5d1f0d=_0x4ab18a;if(!SceneManager[_0x5d1f0d(0xae)]())return;const _0x53ded6=$gameTemp[_0x5d1f0d(0x9d8)]();if(!_0x53ded6)return;_0x53ded6[_0x5d1f0d(0x37d)](_0x5d1f0d(0x9c3));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Movement_WaitForMovement',_0x3fb254=>{const _0x703bf3=_0x4ab18a;if(!SceneManager[_0x703bf3(0xae)]())return;const _0xfbb4c0=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xfbb4c0)return;_0xfbb4c0[_0x703bf3(0x37d)]('battleMove');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x681),_0x156d3a=>{const _0x85321f=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;const _0x26364b=$gameTemp[_0x85321f(0x9d8)]();if(!_0x26364b)return;_0x26364b[_0x85321f(0x37d)](_0x85321f(0xb6));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Movement_WaitForScale',_0xfa56ed=>{const _0x5b6fe5=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;const _0xcc37f0=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xcc37f0)return;_0xcc37f0[_0x5b6fe5(0x37d)](_0x5b6fe5(0x4af));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x232),_0x530da2=>{const _0x338dcb=_0x4ab18a;if(!SceneManager[_0x338dcb(0xae)]())return;const _0x1f9016=$gameTemp[_0x338dcb(0x9d8)]();if(!_0x1f9016)return;_0x1f9016[_0x338dcb(0x37d)](_0x338dcb(0x677));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x9a1),_0x327a1d=>{const _0x1281b5=_0x4ab18a;if(!SceneManager[_0x1281b5(0xae)]())return;const _0x74b491=$gameTemp[_0x1281b5(0x9d8)]();if(!_0x74b491)return;_0x74b491[_0x1281b5(0x37d)](_0x1281b5(0xa84));}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x8f4),_0x1f6e8e=>{const _0x3e6668=_0x4ab18a;if(!SceneManager[_0x3e6668(0xae)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x3e6668(0x3cb)](_0x1f6e8e,_0x1f6e8e);const _0x4d9563=$gameTemp[_0x3e6668(0x9d8)](),_0x212a54=_0x1f6e8e[_0x3e6668(0x632)];if(!_0x4d9563)return;const _0x19a4f9=BattleManager[_0x3e6668(0x6f4)];if(!_0x19a4f9)return;_0x19a4f9[_0x3e6668(0x99c)](_0x1f6e8e);if(_0x212a54)_0x4d9563[_0x3e6668(0x37d)](_0x3e6668(0x6e7));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x3af),_0x5535a1=>{const _0x4aeb9c=_0x4ab18a;if(!SceneManager[_0x4aeb9c(0xae)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x4aeb9c(0x3cb)](_0x5535a1,_0x5535a1);const _0x3152f6=$gameTemp[_0x4aeb9c(0x9d8)](),_0x369690=_0x5535a1[_0x4aeb9c(0x632)];if(!_0x3152f6)return;const _0x752044=BattleManager[_0x4aeb9c(0x6f4)];if(!_0x752044)return;_0x752044['createActionSequenceProjectile'](_0x5535a1);if(_0x369690)_0x3152f6[_0x4aeb9c(0x37d)](_0x4aeb9c(0x6e7));}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x171),_0x3d17d1=>{const _0x39555b=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x39555b(0x2d2)])return;VisuMZ[_0x39555b(0x3cb)](_0x3d17d1,_0x3d17d1);const _0xddaaf5=$gameTemp[_0x39555b(0x9d8)](),_0x57dd37=_0x3d17d1[_0x39555b(0x632)];if(!_0xddaaf5)return;const _0xdda763=BattleManager['_spriteset'];if(!_0xdda763)return;_0xdda763[_0x39555b(0x99c)](_0x3d17d1);if(_0x57dd37)_0xddaaf5[_0x39555b(0x37d)]('battleProjectiles');}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x369),_0x4be901=>{const _0x572ee8=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x572ee8(0x3cb)](_0x4be901,_0x4be901);const _0x1c5e6b=$gameTemp[_0x572ee8(0x9d8)](),_0x371e0e=_0x4be901[_0x572ee8(0x9a)];if(!_0x1c5e6b)return;$gameScreen[_0x572ee8(0x94f)](_0x4be901['SkewX'],_0x4be901['SkewY'],_0x4be901[_0x572ee8(0x532)],_0x4be901[_0x572ee8(0x5c7)]);if(_0x371e0e)_0x1c5e6b[_0x572ee8(0x37d)](_0x572ee8(0x30a));}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],_0x4ab18a(0x6b2),_0x43687f=>{const _0x3ecd25=_0x4ab18a;if(!SceneManager[_0x3ecd25(0xae)]())return;if(!Imported[_0x3ecd25(0x7c0)])return;VisuMZ[_0x3ecd25(0x3cb)](_0x43687f,_0x43687f);const _0x527cbf=$gameTemp[_0x3ecd25(0x9d8)](),_0x3bf40e=_0x43687f[_0x3ecd25(0x9a)];if(!_0x527cbf)return;$gameScreen[_0x3ecd25(0x94f)](0x0,0x0,_0x43687f[_0x3ecd25(0x532)],_0x43687f[_0x3ecd25(0x5c7)]);if(_0x3bf40e)_0x527cbf[_0x3ecd25(0x37d)](_0x3ecd25(0x30a));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x979),_0x319a2a=>{const _0x23bb79=_0x4ab18a;if(!SceneManager[_0x23bb79(0xae)]())return;if(!Imported[_0x23bb79(0x7c0)])return;const _0x1e0afa=$gameTemp[_0x23bb79(0x9d8)]();if(!_0x1e0afa)return;_0x1e0afa[_0x23bb79(0x37d)](_0x23bb79(0x30a));}),PluginManager['registerCommand'](pluginData['name'],_0x4ab18a(0x3b0),_0x3a6f42=>{const _0x37ff18=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3a6f42,_0x3a6f42);const _0x48f6ba=$gameTemp[_0x37ff18(0x9d8)](),_0x5d1f1f=_0x3a6f42[_0x37ff18(0x8a4)],_0x4bac1e=_0x3a6f42[_0x37ff18(0x1f1)];if(!_0x48f6ba)return;BattleManager[_0x37ff18(0x5ab)]=_0x5d1f1f,BattleManager[_0x37ff18(0x2d8)]=BattleManager[_0x37ff18(0x4ef)]?BattleManager[_0x37ff18(0x4ef)][BattleManager['_targetIndex']]||null:null;if(BattleManager[_0x37ff18(0x2d8)]&&_0x4bac1e[_0x37ff18(0x9e5)]()['trim']()!==_0x37ff18(0xa33)){if(_0x37ff18(0x6ac)===_0x37ff18(0x11c)){if(!_0x5dd404['isSceneBattle']())return;if(!_0x34bb96[_0x37ff18(0x7c0)])return;_0x3f6d34[_0x37ff18(0x3cb)](_0x2b7eeb,_0x2d397f);const _0x12d41a=_0x2d7d69[_0x37ff18(0x9d8)](),_0x415b99=_0x491fa1[_0x37ff18(0x5d5)];if(!_0x12d41a)return;_0x248730[_0x37ff18(0x695)](_0x945812[_0x37ff18(0x249)],_0x55f46b[_0x37ff18(0x532)],_0x4da038[_0x37ff18(0x5c7)]);if(_0x415b99)_0x12d41a[_0x37ff18(0x37d)](_0x37ff18(0x239));}else _0x48f6ba[_0x37ff18(0x668)]([_0x4bac1e]);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x6cc),_0x5e1387=>{const _0x4974ee=_0x4ab18a;if(!SceneManager[_0x4974ee(0xae)]())return;VisuMZ[_0x4974ee(0x3cb)](_0x5e1387,_0x5e1387);const _0x53afb3=$gameTemp[_0x4974ee(0x9d8)](),_0x403ea0=_0x5e1387[_0x4974ee(0x1f1)];if(!_0x53afb3)return;BattleManager[_0x4974ee(0x5ab)]++,BattleManager['_target']=BattleManager[_0x4974ee(0x4ef)][BattleManager[_0x4974ee(0x5ab)]]||null;if(BattleManager[_0x4974ee(0x2d8)]&&_0x403ea0[_0x4974ee(0x9e5)]()['trim']()!==_0x4974ee(0xa33)){if(_0x4974ee(0x68e)===_0x4974ee(0x7d3)){if(_0xe64d8c[_0x4974ee(0x679)]()[_0x4974ee(0x162)]>0x0)return!![];if(_0x20cc69[_0x4974ee(0x679)]()[_0x4974ee(0x3c6)]>0x0)return!![];this[_0x4974ee(0x2d7)]='';}else _0x53afb3['command119']([_0x403ea0]);}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Target_PrevTarget',_0x2ebfe8=>{const _0x463eac=_0x4ab18a;if(!SceneManager[_0x463eac(0xae)]())return;VisuMZ['ConvertParams'](_0x2ebfe8,_0x2ebfe8);const _0x546abd=$gameTemp[_0x463eac(0x9d8)](),_0x296085=_0x2ebfe8[_0x463eac(0x1f1)];if(!_0x546abd)return;BattleManager[_0x463eac(0x5ab)]--,BattleManager['_target']=BattleManager[_0x463eac(0x4ef)][BattleManager[_0x463eac(0x5ab)]]||null,BattleManager[_0x463eac(0x2d8)]&&_0x296085[_0x463eac(0x9e5)]()[_0x463eac(0x3a3)]()!=='UNTITLED'&&_0x546abd[_0x463eac(0x668)]([_0x296085]);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0xa13),_0x8ece3=>{const _0x5508b9=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5508b9(0x3cb)](_0x8ece3,_0x8ece3);const _0x359477=$gameTemp[_0x5508b9(0x9d8)](),_0xa20380=_0x8ece3[_0x5508b9(0x8fe)],_0x288179=_0x8ece3['JumpToLabel'];if(!_0x359477)return;const _0x1a8673=BattleManager[_0x5508b9(0x5ab)];for(;;){if(_0x5508b9(0x8c8)===_0x5508b9(0x8c8)){BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x5508b9(0x4ef)][_0x5508b9(0x820)]);if(!_0xa20380)break;if(BattleManager['_targetIndex']!==_0x1a8673)break;if(BattleManager[_0x5508b9(0x4ef)]['length']<=0x1){BattleManager[_0x5508b9(0x5ab)]=0x0;break;}}else return this['displayBattleCoreTransitionErrorMsg'](_0x5ef2a3);}BattleManager[_0x5508b9(0x2d8)]=BattleManager[_0x5508b9(0x4ef)][BattleManager['_targetIndex']]||null,BattleManager[_0x5508b9(0x2d8)]&&_0x288179['toUpperCase']()[_0x5508b9(0x3a3)]()!==_0x5508b9(0xa33)&&_0x359477[_0x5508b9(0x668)]([_0x288179]);}),PluginManager['registerCommand'](pluginData[_0x4ab18a(0x8ff)],'ActSeq_Weapon_ClearActiveWeapon',_0x524f45=>{const _0xb51adf=_0x4ab18a;if(!SceneManager[_0xb51adf(0xae)]())return;VisuMZ[_0xb51adf(0x3cb)](_0x524f45,_0x524f45);const _0x5653ae=VisuMZ['CreateActionSequenceTargets'](_0x524f45[_0xb51adf(0x2ab)]);for(const _0x1ed6c7 of _0x5653ae){if(!_0x1ed6c7)continue;if(!_0x1ed6c7[_0xb51adf(0x526)]())continue;_0x1ed6c7[_0xb51adf(0x206)]();}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x940),_0x2bc44e=>{const _0x534d06=_0x4ab18a;if(!SceneManager[_0x534d06(0xae)]())return;VisuMZ['ConvertParams'](_0x2bc44e,_0x2bc44e);const _0x21eecc=$gameTemp[_0x534d06(0x9d8)]();let _0x1f5b9e=![];const _0x2902fa=_0x2bc44e[_0x534d06(0x1f1)],_0x55ab84=VisuMZ['CreateActionSequenceTargets'](_0x2bc44e[_0x534d06(0x2ab)]);for(const _0x344214 of _0x55ab84){if('MHOhR'!=='MHOhR')_0x42aaa3[_0x534d06(0x18d)]();else{if(!_0x344214)continue;if(!_0x344214['isActor']())continue;_0x344214[_0x534d06(0xaf2)](),_0x344214[_0x534d06(0x9f9)]()[_0x534d06(0x820)]>0x0?_0x1f5b9e=!![]:_0x344214['clearActiveWeaponSlot']();}}_0x1f5b9e&&_0x2902fa['toUpperCase']()[_0x534d06(0x3a3)]()!=='UNTITLED'&&_0x21eecc['command119']([_0x2902fa]);}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x24e),_0x3206f9=>{const _0x5d4a11=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5d4a11(0x3cb)](_0x3206f9,_0x3206f9);let _0x2da8fa=_0x3206f9['SlotID'];_0x2da8fa--,_0x2da8fa=Math[_0x5d4a11(0x877)](_0x2da8fa,0x0);const _0x49f630=VisuMZ[_0x5d4a11(0xa7c)](_0x3206f9['Targets']);for(const _0x3de83d of _0x49f630){if(_0x5d4a11(0x5ac)!==_0x5d4a11(0x6e4)){if(!_0x3de83d)continue;if(!_0x3de83d[_0x5d4a11(0x526)]())continue;_0x3de83d[_0x5d4a11(0x6a6)](_0x2da8fa);}else{if(!_0x47f5c5[_0x5d4a11(0x4d3)])return;const _0x42a17c=_0x513a69[_0x5d4a11(0xa10)][_0x5d4a11(0x6f4)];if(!_0x42a17c)return;_0x46daf3['ConvertParams'](_0x68936,_0x3d7e22);const _0x25645a=_0xcfc305['X']||0x0,_0x2b46f6=_0x1be7ac['Y']||0x0,_0x24ae34=_0x50d464['Strength']||0x0,_0x173c97=_0x32dbf8[_0x5d4a11(0x927)]||0x0,_0x408e62=_0x3b7bbe['Duration']||0x1,_0x21168c=_0x28587a[_0x5d4a11(0x5c7)]||_0x5d4a11(0xfb);_0x42a17c[_0x5d4a11(0x9fe)](_0x24ae34,_0x25645a,_0x2b46f6,_0x173c97,_0x408e62,_0x21168c);}}}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x402),_0x3b0529=>{const _0x2122ac=_0x4ab18a;if(!SceneManager[_0x2122ac(0xae)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2122ac(0x3cb)](_0x3b0529,_0x3b0529);const _0x1d56d0=$gameTemp[_0x2122ac(0x9d8)](),_0x547c88=_0x3b0529[_0x2122ac(0x5d5)];if(!_0x1d56d0)return;$gameScreen[_0x2122ac(0x695)](_0x3b0529[_0x2122ac(0x249)],_0x3b0529[_0x2122ac(0x532)],_0x3b0529[_0x2122ac(0x5c7)]);if(_0x547c88)_0x1d56d0[_0x2122ac(0x37d)]('battleZoom');}),PluginManager[_0x4ab18a(0x196)](pluginData['name'],'ActSeq_Zoom_Reset',_0x40f1e9=>{const _0x284eab=_0x4ab18a;if(!SceneManager[_0x284eab(0xae)]())return;if(!Imported[_0x284eab(0x7c0)])return;VisuMZ[_0x284eab(0x3cb)](_0x40f1e9,_0x40f1e9);const _0x33a954=$gameTemp[_0x284eab(0x9d8)](),_0x160d24=_0x40f1e9[_0x284eab(0x5d5)];if(!_0x33a954)return;$gameScreen[_0x284eab(0x695)](0x1,_0x40f1e9[_0x284eab(0x532)],_0x40f1e9[_0x284eab(0x5c7)]);if(_0x160d24)_0x33a954[_0x284eab(0x37d)](_0x284eab(0x239));}),PluginManager[_0x4ab18a(0x196)](pluginData[_0x4ab18a(0x8ff)],_0x4ab18a(0x456),_0x1c2a2c=>{const _0xa80b47=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x56a0bc=$gameTemp[_0xa80b47(0x9d8)]();if(!_0x56a0bc)return;_0x56a0bc[_0xa80b47(0x37d)](_0xa80b47(0x239));}),VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x2a6)]=Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0x78c)],Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0x78c)]=function(){const _0x1aa77d=_0x4ab18a;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x1aa77d(0x6d5)](),this[_0x1aa77d(0x180)](),this[_0x1aa77d(0x13b)](),VisuMZ['BattleCore'][_0x1aa77d(0x2a6)]['call'](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x1aa77d(0x601)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x1aa77d(0x764)]();},Scene_Boot[_0x4ab18a(0x49d)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x21dcfd=_0x4ab18a;if(VisuMZ[_0x21dcfd(0x5d7)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x21dcfd(0x3e1)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0xa1e)]=function(){const _0x1f3760=_0x4ab18a,_0x3d5151=$dataSystem['weaponTypes'][_0x1f3760(0x820)];for(let _0x26824d=0x0;_0x26824d<_0x3d5151;_0x26824d++){const _0x5e8323=$dataSystem[_0x1f3760(0x22b)][_0x26824d];if(_0x5e8323)continue;$dataSystem[_0x1f3760(0x22b)][_0x26824d]=JsonEx[_0x1f3760(0x6e6)]($dataSystem['attackMotions'][0x0]);}},Scene_Boot['prototype'][_0x4ab18a(0x6d5)]=function(){const _0x4b9f97=_0x4ab18a,_0x971751=VisuMZ[_0x4b9f97(0x94c)][_0x4b9f97(0x3f5)];_0x971751[_0x4b9f97(0x486)][_0x4b9f97(0xad9)]===undefined&&(_0x971751[_0x4b9f97(0x486)]['PopupPosition']=_0x4b9f97(0x22e));if(_0x971751[_0x4b9f97(0x56a)]['SmoothImage']===undefined){if('QKZUz'===_0x4b9f97(0x787))return this['_battleLayoutStyle'];else _0x971751[_0x4b9f97(0x56a)][_0x4b9f97(0x4a9)]=![];}_0x971751[_0x4b9f97(0x582)][_0x4b9f97(0x4a9)]===undefined&&(_0x971751['Enemy'][_0x4b9f97(0x4a9)]=!![]);if(_0x971751[_0x4b9f97(0x56a)]['PrioritySortActive']===undefined){if(_0x4b9f97(0x6dc)!=='WZRuW')_0x971751[_0x4b9f97(0x56a)][_0x4b9f97(0x55d)]=![];else return _0x1182b9[_0x4b9f97(0x94c)][_0x4b9f97(0x62c)]['call'](this);}_0x971751[_0x4b9f97(0x56a)][_0x4b9f97(0xe1)]===undefined&&(_0x971751[_0x4b9f97(0x56a)][_0x4b9f97(0xe1)]=!![]);},VisuMZ['DamageStyles']={},Scene_Boot['prototype'][_0x4ab18a(0x180)]=function(){const _0x9a3e58=_0x4ab18a;for(const _0x4c474f of VisuMZ['BattleCore']['Settings'][_0x9a3e58(0x486)]['DamageStyleList']){if(_0x9a3e58(0x47a)===_0x9a3e58(0x661)){const _0x1bc2bd=this[_0x9a3e58(0x526)]()?this[_0x9a3e58(0x475)]():this[_0x9a3e58(0x637)]();if(_0x1bc2bd){const _0x3f0d8c=_0x1bc2bd[_0x9a3e58(0x7d0)];if(_0x3f0d8c[_0x9a3e58(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x2e4882(_0x41037b['$1'])*0.01;else{if(_0x3f0d8c[_0x9a3e58(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x23541f(_0x3f5049['$1'])||0x0;}}return 0x1;}else{if(!_0x4c474f)continue;const _0x46df14=_0x4c474f[_0x9a3e58(0x16c)][_0x9a3e58(0x9e5)]()[_0x9a3e58(0x3a3)]();VisuMZ[_0x9a3e58(0x3f8)][_0x46df14]=_0x4c474f;}}},VisuMZ['BattleCore']['RegExp']={},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x2422fb=_0x4ab18a,_0x544df0=VisuMZ['BattleCore'][_0x2422fb(0x90b)],_0x2c6602=_0x2422fb(0x868),_0x3e2018=[[_0x2422fb(0x2ff),'PRE-'],['Post',_0x2422fb(0x366)]],_0x386ac2=[['%1Apply%2JS',_0x2422fb(0x92d)],[_0x2422fb(0x152),_0x2422fb(0x759)]],_0x12a9b6=[['',''],[_0x2422fb(0x301),_0x2422fb(0x8c5)],['AsTarget','AS\x20TARGET']];for(const _0x510eb1 of _0x386ac2){if('LKkpr'===_0x2422fb(0x545))_0x3af7d9=(_0x501370+_0x5d61ab)/0x2;else for(const _0x1cf294 of _0x12a9b6){if(_0x2422fb(0x132)!==_0x2422fb(0x132))return 0x1;else for(const _0x270487 of _0x3e2018){if(_0x2422fb(0x131)!==_0x2422fb(0x131)){const _0x5ac21e=this[_0x2422fb(0x422)]['bitmap'];this['_shadowSprite'][_0x2422fb(0x849)](0x0,0x0,_0x5ac21e[_0x2422fb(0x999)],_0x5ac21e[_0x2422fb(0x428)]);}else{const _0x35c124=_0x510eb1[0x0][_0x2422fb(0x278)](_0x270487[0x0],_0x1cf294[0x0]),_0x127145=_0x510eb1[0x1][_0x2422fb(0x278)](_0x270487[0x1],_0x1cf294[0x1])[_0x2422fb(0x3a3)](),_0x3a64e3=new RegExp(_0x2c6602[_0x2422fb(0x278)](_0x127145),'i');_0x544df0[_0x35c124]=_0x3a64e3;}}}}const _0x1b2f85=[[_0x2422fb(0x1ba),_0x2422fb(0x505)],[_0x2422fb(0x572),_0x2422fb(0x9cb)]];for(const _0x329319 of _0x1b2f85){if(_0x2422fb(0x2e7)!=='KUyAL')for(const _0x335a5f of _0x3e2018){if('vmupX'===_0x2422fb(0x184)){const _0x34d447=_0x329319[0x0][_0x2422fb(0x278)](_0x335a5f[0x0]),_0x554a48=_0x329319[0x1][_0x2422fb(0x278)](_0x335a5f[0x1]),_0x151c6a=new RegExp(_0x2c6602['format'](_0x554a48),'i');_0x544df0[_0x34d447]=_0x151c6a;}else return _0x22c8c5[_0x2422fb(0x94c)][_0x2422fb(0x3f5)]['BattleLayout'][_0x2422fb(0xab)];}else this['_defeatedEnemies']=this[_0x2422fb(0x93e)]||[];}const _0x1b08f4=[[_0x2422fb(0x7c8),_0x2422fb(0x235)],['%1EndBattleJS',_0x2422fb(0x3ec)],[_0x2422fb(0x169),_0x2422fb(0xc1)],['BattleDefeatJS',_0x2422fb(0x667)],[_0x2422fb(0x8c9),_0x2422fb(0x351)],['EscapeFailureJS',_0x2422fb(0x29f)],[_0x2422fb(0x365),_0x2422fb(0x1bf)],[_0x2422fb(0x6a4),_0x2422fb(0x8b8)],[_0x2422fb(0x591),_0x2422fb(0x997)]];for(const _0x5eb53 of _0x1b08f4){if(_0x2422fb(0xa52)!==_0x2422fb(0xa52))this[_0x2422fb(0x448)](_0x2422fb(0x49b),_0x51091f);else for(const _0x4575c6 of _0x3e2018){const _0x38f33d=_0x5eb53[0x0][_0x2422fb(0x278)](_0x4575c6[0x0]),_0x337466=_0x5eb53[0x1][_0x2422fb(0x278)](_0x4575c6[0x1]),_0x4333e4=new RegExp(_0x2c6602[_0x2422fb(0x278)](_0x337466),'i');_0x544df0[_0x38f33d]=_0x4333e4;}}},Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0x959)]=function(){const _0x33e9b3=_0x4ab18a,_0x3255b9=$dataSkills[_0x33e9b3(0x11d)]($dataItems);for(const _0x943ed2 of _0x3255b9){if(!_0x943ed2)continue;VisuMZ[_0x33e9b3(0x94c)][_0x33e9b3(0x2bd)](_0x943ed2);}},Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0x3e1)]=function(){const _0x523d67=_0x4ab18a,_0x44e3cb=$dataActors[_0x523d67(0x11d)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0xe0851e of _0x44e3cb){if(!_0xe0851e)continue;VisuMZ[_0x523d67(0x94c)]['Parse_Notetags_TraitObjects'](_0xe0851e);}},Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0x601)]=function(){const _0x36c460=_0x4ab18a,_0x50d93f=VisuMZ[_0x36c460(0x94c)][_0x36c460(0x3f5)][_0x36c460(0x1c6)][_0x36c460(0x760)],_0xf6e29c=[];for(const _0xc66bb7 of _0x50d93f){if(_0x36c460(0x26e)!==_0x36c460(0x829)){const _0x3e8a7d=$dataTroops[_0xc66bb7];if(_0x3e8a7d)_0xf6e29c[_0x36c460(0x448)](JsonEx[_0x36c460(0x6e6)](_0x3e8a7d));}else this[_0x36c460(0xa86)](_0x36c460(0x1d4));}for(const _0x1d5587 of $dataTroops){if(!_0x1d5587)continue;for(const _0x58f0bd of _0xf6e29c){if(_0x36c460(0x477)!==_0x36c460(0x8d)){if(_0x58f0bd['id']===_0x1d5587['id'])continue;_0x1d5587['pages']=_0x1d5587['pages'][_0x36c460(0x11d)](_0x58f0bd[_0x36c460(0x859)]);}else{if(!_0x3a9cbc['isSceneBattle']())return;const _0x83c96d=_0x235529[_0x36c460(0x9d8)]();if(!_0x83c96d)return;_0x83c96d['setWaitMode']('battleFloat');}}}},Scene_Boot[_0x4ab18a(0x49d)][_0x4ab18a(0x17f)]=function(){const _0x36a6d3=_0x4ab18a,_0x535f8e=VisuMZ[_0x36a6d3(0x94c)][_0x36a6d3(0x3f5)][_0x36a6d3(0x1c6)];if(_0x535f8e[_0x36a6d3(0x21a)]>0x0&&$dataCommonEvents[_0x535f8e[_0x36a6d3(0x21a)]]){if(_0x36a6d3(0x28b)===_0x36a6d3(0x600))return _0x23f86b[_0x36a6d3(0x94c)][_0x36a6d3(0x3f5)]['AutoBattle'][_0x36a6d3(0x512)][_0x36a6d3(0x45b)](this);else{const _0x5bfc59=$dataCommonEvents[_0x535f8e['BattleStartEvent']],_0x3d3ba8=_0x5bfc59['list'][_0x36a6d3(0x820)]-0x2,_0x5aa2d2=_0x5bfc59['list'][_0x3d3ba8];if(_0x5aa2d2&&_0x5aa2d2[_0x36a6d3(0x12f)]!==0xe6){if(_0x36a6d3(0x866)===_0x36a6d3(0x18b))this['_forcedBattleLayout']='default';else{const _0x2de59d={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x412deb=_0x5bfc59[_0x36a6d3(0x5fb)][_0x36a6d3(0x74b)]();_0x5bfc59[_0x36a6d3(0x5fb)][_0x36a6d3(0x9ce)](_0x2de59d),_0x5bfc59[_0x36a6d3(0x5fb)][_0x36a6d3(0x9ce)](_0x412deb);}}}}},Scene_Boot['prototype'][_0x4ab18a(0x764)]=function(){const _0x16f5b8=_0x4ab18a;VisuMZ[_0x16f5b8(0x94c)][_0x16f5b8(0x7a1)](),VisuMZ[_0x16f5b8(0x94c)][_0x16f5b8(0x945)]($dataSkills),VisuMZ['BattleCore'][_0x16f5b8(0x945)]($dataItems);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x7a1)]=function(){const _0xc3edb7=_0x4ab18a;VisuMZ['BattleCore'][_0xc3edb7(0x3b7)]={};for(const _0x4468c4 of $dataCommonEvents){if(!_0x4468c4)continue;if(_0x4468c4[_0xc3edb7(0x8ff)]['match'](/\[(.*)\]/i)){let _0xf6da13=String(RegExp['$1'])['replace'](/,/g,'')['toUpperCase']()[_0xc3edb7(0x3a3)]();VisuMZ['BattleCore'][_0xc3edb7(0x3b7)][_0xf6da13]=_0x4468c4['id'];}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x945)]=function(_0x1b877d){const _0x51587f=_0x4ab18a;for(const _0x26d2bd of _0x1b877d){if(!_0x26d2bd)continue;VisuMZ['BattleCore'][_0x51587f(0xf0)](_0x26d2bd);}},VisuMZ['BattleCore'][_0x4ab18a(0xf0)]=function(_0x779cd3){const _0x2c9e2b=_0x4ab18a;if(!_0x779cd3)return;if(!_0x779cd3[_0x2c9e2b(0x4ab)])return;VisuMZ[_0x2c9e2b(0x94c)][_0x2c9e2b(0x3b7)]=VisuMZ['BattleCore'][_0x2c9e2b(0x3b7)]||{};const _0x4b2ab9=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x40b3f0=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0xa53ca=[];const _0x59feae=_0x779cd3[_0x2c9e2b(0x7d0)][_0x2c9e2b(0x378)](_0x4b2ab9);if(_0x59feae){for(const _0x30815c of _0x59feae){_0x30815c[_0x2c9e2b(0x378)](_0x4b2ab9);const _0x4b0e0c=String(RegExp['$1'])[_0x2c9e2b(0x9e7)](',')[_0x2c9e2b(0x71a)](_0x4220c0=>String(_0x4220c0)[_0x2c9e2b(0x9e5)]()[_0x2c9e2b(0x3a3)]());_0xa53ca=_0xa53ca[_0x2c9e2b(0x11d)](_0x4b0e0c);}!_0x779cd3[_0x2c9e2b(0x7d0)][_0x2c9e2b(0x378)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x779cd3[_0x2c9e2b(0x7d0)]+=_0x2c9e2b(0x3ee));;}if(_0x779cd3[_0x2c9e2b(0x7d0)][_0x2c9e2b(0x378)](_0x40b3f0)){const _0x39419a=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x2c9e2b(0x71a)](_0x275588=>String(_0x275588)[_0x2c9e2b(0x9e5)]()[_0x2c9e2b(0x3a3)]());_0xa53ca=_0xa53ca[_0x2c9e2b(0x11d)](_0x39419a);!_0x779cd3[_0x2c9e2b(0x7d0)][_0x2c9e2b(0x378)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x779cd3[_0x2c9e2b(0x7d0)]+=_0x2c9e2b(0x3ee));;}for(const _0x30335c of _0xa53ca){if(VisuMZ[_0x2c9e2b(0x94c)]['_commonEventKey'][_0x30335c]){if(_0x2c9e2b(0xa51)!==_0x2c9e2b(0x788)){const _0xfb00d2=VisuMZ[_0x2c9e2b(0x94c)][_0x2c9e2b(0x3b7)][_0x30335c],_0x4c8093={'code':0x2c,'dataId':_0xfb00d2,'value1':0x1,'value2':0x0};_0x779cd3['effects'][_0x2c9e2b(0x448)](_0x4c8093);}else this[_0x2c9e2b(0xa87)](_0x599d52,_0x510b69,_0x2e1d1b);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x35a8d7=_0x4ab18a,_0x2c1c21=$dataSkills[_0x35a8d7(0x11d)]($dataItems);for(const _0x4af816 of _0x2c1c21){if(_0x35a8d7(0x894)!==_0x35a8d7(0x894))_0x4fdfd3+=(_0x2cc616[_0x35a8d7(0x6dd)]()?0x1:-0x1)*_0x310365[_0x35a8d7(0x2e5)]()/0x2;else{if(!_0x4af816)continue;VisuMZ[_0x35a8d7(0x94c)]['Parse_Notetags_Targets'](_0x4af816);}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x8e3)]=VisuMZ[_0x4ab18a(0x8e3)],VisuMZ[_0x4ab18a(0x8e3)]=function(_0x1db998){const _0x5327f0=_0x4ab18a;VisuMZ[_0x5327f0(0x94c)]['ParseActorNotetags']&&VisuMZ[_0x5327f0(0x94c)]['ParseActorNotetags']['call'](this,_0x1db998),VisuMZ[_0x5327f0(0x94c)][_0x5327f0(0x420)](_0x1db998);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x32a)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x4ab18a(0x32a)]=function(_0x375e62){const _0x1f40e0=_0x4ab18a;VisuMZ[_0x1f40e0(0x94c)][_0x1f40e0(0x32a)]&&VisuMZ[_0x1f40e0(0x94c)][_0x1f40e0(0x32a)][_0x1f40e0(0x45b)](this,_0x375e62),VisuMZ[_0x1f40e0(0x94c)]['Parse_Notetags_TraitObjects'](_0x375e62);},VisuMZ[_0x4ab18a(0x94c)]['ParseSkillNotetags']=VisuMZ[_0x4ab18a(0x230)],VisuMZ['ParseSkillNotetags']=function(_0x327bd5){const _0xda2aed=_0x4ab18a;if(VisuMZ['BattleCore'][_0xda2aed(0x230)]){if(_0xda2aed(0x65b)===_0xda2aed(0x65b))VisuMZ[_0xda2aed(0x94c)]['ParseSkillNotetags'][_0xda2aed(0x45b)](this,_0x327bd5);else{const _0x2d3a5a=this[_0xda2aed(0xaf0)]();if(['xp'][_0xda2aed(0xb2)](_0x2d3a5a)&&!_0x527965[_0xda2aed(0x332)]()){this[_0xda2aed(0xa30)](0x0,0x0,0x0,0x0);return;}_0x2cf773[_0xda2aed(0x49d)][_0xda2aed(0x311)][_0xda2aed(0x45b)](this);}}VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x327bd5),VisuMZ[_0xda2aed(0x94c)][_0xda2aed(0x4d6)](_0x327bd5);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x515)]=VisuMZ[_0x4ab18a(0x515)],VisuMZ[_0x4ab18a(0x515)]=function(_0x5e6061){const _0x338852=_0x4ab18a;VisuMZ[_0x338852(0x94c)][_0x338852(0x515)]&&VisuMZ[_0x338852(0x94c)]['ParseItemNotetags'][_0x338852(0x45b)](this,_0x5e6061),VisuMZ[_0x338852(0x94c)][_0x338852(0x2bd)](_0x5e6061),VisuMZ[_0x338852(0x94c)][_0x338852(0x4d6)](_0x5e6061);},VisuMZ['BattleCore'][_0x4ab18a(0x410)]=VisuMZ[_0x4ab18a(0x410)],VisuMZ[_0x4ab18a(0x410)]=function(_0x4e469f){const _0x495a0d=_0x4ab18a;VisuMZ['BattleCore'][_0x495a0d(0x410)]&&VisuMZ[_0x495a0d(0x94c)][_0x495a0d(0x410)][_0x495a0d(0x45b)](this,_0x4e469f),VisuMZ[_0x495a0d(0x94c)][_0x495a0d(0x420)](_0x4e469f);},VisuMZ['BattleCore'][_0x4ab18a(0x4bd)]=VisuMZ[_0x4ab18a(0x4bd)],VisuMZ['ParseArmorNotetags']=function(_0x57ddcd){const _0x48ee4e=_0x4ab18a;VisuMZ['BattleCore'][_0x48ee4e(0x4bd)]&&(_0x48ee4e(0xa03)!==_0x48ee4e(0xa03)?this[_0x48ee4e(0x6ec)]():VisuMZ[_0x48ee4e(0x94c)]['ParseArmorNotetags'][_0x48ee4e(0x45b)](this,_0x57ddcd)),VisuMZ[_0x48ee4e(0x94c)][_0x48ee4e(0x420)](_0x57ddcd);},VisuMZ['BattleCore']['ParseEnemyNotetags']=VisuMZ[_0x4ab18a(0x4b7)],VisuMZ['ParseEnemyNotetags']=function(_0x20ec04){const _0x11ce7b=_0x4ab18a;VisuMZ[_0x11ce7b(0x94c)]['ParseEnemyNotetags']&&VisuMZ['BattleCore'][_0x11ce7b(0x4b7)][_0x11ce7b(0x45b)](this,_0x20ec04),VisuMZ[_0x11ce7b(0x94c)][_0x11ce7b(0x420)](_0x20ec04);},VisuMZ['BattleCore'][_0x4ab18a(0x117)]=VisuMZ[_0x4ab18a(0x117)],VisuMZ['ParseStateNotetags']=function(_0x2f7942){const _0x34d781=_0x4ab18a;VisuMZ['BattleCore'][_0x34d781(0x117)]&&VisuMZ[_0x34d781(0x94c)]['ParseStateNotetags'][_0x34d781(0x45b)](this,_0x2f7942),VisuMZ[_0x34d781(0x94c)][_0x34d781(0x420)](_0x2f7942);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x2bd)]=function(_0x2bd083){const _0x17f250=_0x4ab18a,_0x34700a=[_0x17f250(0x568),_0x17f250(0x625),_0x17f250(0xa59),_0x17f250(0x42c),_0x17f250(0xa57),'PostStartActionJS',_0x17f250(0xa39),_0x17f250(0x27e)];for(const _0x3882c3 of _0x34700a){VisuMZ[_0x17f250(0x94c)][_0x17f250(0x967)](_0x2bd083,_0x3882c3);}const _0x16e635=_0x2bd083['note'];_0x16e635[_0x17f250(0x378)](/<ALWAYS CRITICAL/i)&&(_0x2bd083[_0x17f250(0x938)][_0x17f250(0x33e)]=!![]);_0x16e635[_0x17f250(0x378)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x2bd083[_0x17f250(0x49e)]=Math['max'](0x1,Number(RegExp['$1'])));if(_0x16e635[_0x17f250(0x378)](/<TARGET:[ ](.*)>/i)){if(_0x17f250(0xa16)===_0x17f250(0x867))return _0x16407b[_0x17f250(0x94c)][_0x17f250(0x3f5)][_0x17f250(0x3dd)][_0x17f250(0x791)];else _0x2bd083[_0x17f250(0x7f8)]=String(RegExp['$1'])[_0x17f250(0x9e5)]()[_0x17f250(0x3a3)]();}},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0xf719db){const _0xa22edf=_0x4ab18a,_0x20d955=[_0xa22edf(0xaf7),'PostApplyAsUserJS','PreDamageAsUserJS',_0xa22edf(0x68d),_0xa22edf(0x91e),_0xa22edf(0x8a6),'PreDamageAsTargetJS','PostDamageAsTargetJS',_0xa22edf(0xa57),_0xa22edf(0x72a),_0xa22edf(0xa39),_0xa22edf(0x27e),_0xa22edf(0x577),_0xa22edf(0x606),'PreEndBattleJS',_0xa22edf(0x95),'BattleVictoryJS',_0xa22edf(0x86b),_0xa22edf(0x8c9),_0xa22edf(0x299),_0xa22edf(0x9c2),_0xa22edf(0x3d8),_0xa22edf(0x653),_0xa22edf(0x5aa),_0xa22edf(0x226),'PostRegenerateJS'];for(const _0x4d8731 of _0x20d955){VisuMZ[_0xa22edf(0x94c)]['createJS'](_0xf719db,_0x4d8731);}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x4d6)]=function(_0x48e63c){const _0x3aca83=_0x4ab18a,_0x4da677=_0x48e63c[_0x3aca83(0x7d0)];if(_0x4da677['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x30dc10=String(RegExp['$1']),_0x3bc8f6=VisuMZ[_0x3aca83(0x94c)][_0x3aca83(0x4ae)](_0x48e63c,_0x3aca83(0x2ab));VisuMZ[_0x3aca83(0x94c)][_0x3aca83(0x738)](_0x30dc10,_0x3bc8f6);}if(_0x4da677[_0x3aca83(0x378)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if('zmCEs'!==_0x3aca83(0x205))this[_0x3aca83(0x422)][_0x3aca83(0x242)]=this[_0x3aca83(0x69e)]['hasSvBattler'](),this[_0x3aca83(0x642)]();else{const _0x1a9b0c=String(RegExp['$1']),_0x1ba7dc=VisuMZ['BattleCore']['createKeyJS'](_0x48e63c,_0x3aca83(0xd5));VisuMZ['BattleCore'][_0x3aca83(0xbf)](_0x1a9b0c,_0x1ba7dc);}}},VisuMZ[_0x4ab18a(0x94c)]['JS']={},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x967)]=function(_0x29f4e1,_0x42faf9){const _0x257840=_0x4ab18a,_0x47eed1=_0x29f4e1[_0x257840(0x7d0)];if(_0x47eed1['match'](VisuMZ[_0x257840(0x94c)][_0x257840(0x90b)][_0x42faf9])){const _0x5b5b5b=RegExp['$1'],_0x4f72c2=_0x257840(0x331)[_0x257840(0x278)](_0x5b5b5b),_0xcdd329=VisuMZ[_0x257840(0x94c)][_0x257840(0x4ae)](_0x29f4e1,_0x42faf9);VisuMZ[_0x257840(0x94c)]['JS'][_0xcdd329]=new Function(_0x4f72c2);}},VisuMZ[_0x4ab18a(0x94c)]['createKeyJS']=function(_0xb8047c,_0x2bb8ff){const _0x13b516=_0x4ab18a;let _0x23e406='';if($dataActors[_0x13b516(0xb2)](_0xb8047c))_0x23e406=_0x13b516(0x563)['format'](_0xb8047c['id'],_0x2bb8ff);if($dataClasses[_0x13b516(0xb2)](_0xb8047c))_0x23e406=_0x13b516(0x763)[_0x13b516(0x278)](_0xb8047c['id'],_0x2bb8ff);if($dataSkills[_0x13b516(0xb2)](_0xb8047c))_0x23e406=_0x13b516(0x9a4)[_0x13b516(0x278)](_0xb8047c['id'],_0x2bb8ff);if($dataItems[_0x13b516(0xb2)](_0xb8047c))_0x23e406='Item-%1-%2'[_0x13b516(0x278)](_0xb8047c['id'],_0x2bb8ff);if($dataWeapons[_0x13b516(0xb2)](_0xb8047c))_0x23e406='Weapon-%1-%2'[_0x13b516(0x278)](_0xb8047c['id'],_0x2bb8ff);if($dataArmors[_0x13b516(0xb2)](_0xb8047c))_0x23e406=_0x13b516(0x878)['format'](_0xb8047c['id'],_0x2bb8ff);if($dataEnemies['includes'](_0xb8047c))_0x23e406=_0x13b516(0x5fd)['format'](_0xb8047c['id'],_0x2bb8ff);if($dataStates['includes'](_0xb8047c))_0x23e406=_0x13b516(0x8aa)[_0x13b516(0x278)](_0xb8047c['id'],_0x2bb8ff);return _0x23e406;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x738)]=function(_0x506d65,_0x31505a){const _0x4b452b=_0x4ab18a,_0x32e251=_0x4b452b(0x943)[_0x4b452b(0x278)](_0x506d65);VisuMZ[_0x4b452b(0x94c)]['JS'][_0x31505a]=new Function(_0x32e251);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xbf)]=function(_0x2111fa,_0x3a6e37){const _0x13b4b6=_0x4ab18a,_0x2117dc=_0x13b4b6(0xfa)[_0x13b4b6(0x278)](_0x2111fa);VisuMZ[_0x13b4b6(0x94c)]['JS'][_0x3a6e37]=new Function(_0x2117dc);},TextManager[_0x4ab18a(0x4ea)]=VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3f5)][_0x4ab18a(0x965)][_0x4ab18a(0x12d)],TextManager['autoBattleStart']=VisuMZ[_0x4ab18a(0x94c)]['Settings'][_0x4ab18a(0x581)][_0x4ab18a(0xa6d)],TextManager[_0x4ab18a(0x183)]=VisuMZ[_0x4ab18a(0x94c)]['Settings'][_0x4ab18a(0x581)][_0x4ab18a(0xad3)],TextManager[_0x4ab18a(0x8c1)]=VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3f5)][_0x4ab18a(0x7bb)]['Name'],ColorManager[_0x4ab18a(0x444)]=function(_0x3b2ff1){const _0x1d380e=_0x4ab18a;_0x3b2ff1=String(_0x3b2ff1);if(_0x3b2ff1['match'](/#(.*)/i))return _0x1d380e(0x19d)['format'](String(RegExp['$1']));else{if('BsPkA'==='viqtW'){const _0x1d7bfb=_0x1a0a8c(_0x32f7da['$1'])[_0x1d380e(0x9e5)]()[_0x1d380e(0x3a3)]();return _0x1d7bfb;}else return this[_0x1d380e(0x1bd)](Number(_0x3b2ff1));}},DataManager[_0x4ab18a(0x2ac)]=function(_0x11ea26){const _0x554cb7=_0x4ab18a;if(_0x11ea26[_0x554cb7(0x7d0)][_0x554cb7(0x378)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2ce6ec=String(RegExp['$1'])['toUpperCase']()[_0x554cb7(0x3a3)]();if(_0x2ce6ec==='MANUAL')return _0x554cb7(0x57c);if(VisuMZ[_0x554cb7(0x3f8)][_0x2ce6ec])return _0x2ce6ec;}const _0x3cc999=VisuMZ[_0x554cb7(0x94c)][_0x554cb7(0x3f5)][_0x554cb7(0x486)][_0x554cb7(0x796)][_0x554cb7(0x9e5)]()[_0x554cb7(0x3a3)]();if(VisuMZ[_0x554cb7(0x3f8)][_0x3cc999])return _0x3cc999;return _0x554cb7(0x57c);},DataManager[_0x4ab18a(0xa54)]=function(_0x406df7){const _0x40652d=_0x4ab18a;_0x406df7=_0x406df7[_0x40652d(0x9e5)]()[_0x40652d(0x3a3)](),this[_0x40652d(0x318)]=this[_0x40652d(0x318)]||{};if(this[_0x40652d(0x318)][_0x406df7])return this['_stypeIDs'][_0x406df7];for(let _0x303b18=0x1;_0x303b18<0x64;_0x303b18++){if(_0x40652d(0x53e)===_0x40652d(0x53e)){if(!$dataSystem[_0x40652d(0x286)][_0x303b18])continue;let _0x2324ba=$dataSystem['skillTypes'][_0x303b18]['toUpperCase']()[_0x40652d(0x3a3)]();_0x2324ba=_0x2324ba['replace'](/\x1I\[(\d+)\]/gi,''),_0x2324ba=_0x2324ba['replace'](/\\I\[(\d+)\]/gi,''),this[_0x40652d(0x318)][_0x2324ba]=_0x303b18;}else return _0x5bbdfd[_0x40652d(0x94c)][_0x40652d(0x3f5)][_0x40652d(0x581)][_0x40652d(0x3d3)];}return this['_stypeIDs'][_0x406df7]||0x0;},DataManager[_0x4ab18a(0x40e)]=function(_0x5e5084){const _0x19c431=_0x4ab18a;_0x5e5084=_0x5e5084['toUpperCase']()[_0x19c431(0x3a3)](),this[_0x19c431(0x15a)]=this[_0x19c431(0x15a)]||{};if(this[_0x19c431(0x15a)][_0x5e5084])return this[_0x19c431(0x15a)][_0x5e5084];for(const _0x258edf of $dataSkills){if(!_0x258edf)continue;this['_skillIDs'][_0x258edf[_0x19c431(0x8ff)][_0x19c431(0x9e5)]()[_0x19c431(0x3a3)]()]=_0x258edf['id'];}return this[_0x19c431(0x15a)][_0x5e5084]||0x0;},DataManager[_0x4ab18a(0x78f)]=function(_0x43a761){const _0x5bd400=_0x4ab18a;_0x43a761=_0x43a761['toUpperCase']()[_0x5bd400(0x3a3)](),this[_0x5bd400(0x1d5)]=this[_0x5bd400(0x1d5)]||{};if(this[_0x5bd400(0x1d5)][_0x43a761])return this[_0x5bd400(0x1d5)][_0x43a761];for(const _0x12c53f of $dataEnemies){if(!_0x12c53f)continue;this[_0x5bd400(0x1d5)][_0x12c53f['name']['toUpperCase']()[_0x5bd400(0x3a3)]()]=_0x12c53f['id'];}return this[_0x5bd400(0x1d5)][_0x43a761]||0x0;},DataManager[_0x4ab18a(0x16f)]=function(_0x4246b0){const _0x53f2c1=_0x4ab18a;_0x4246b0=_0x4246b0[_0x53f2c1(0x9e5)]()['trim'](),this[_0x53f2c1(0x883)]=this[_0x53f2c1(0x883)]||{};if(this[_0x53f2c1(0x883)][_0x4246b0])return this['_wtypeIDs'][_0x4246b0];for(let _0x39f8b9=0x1;_0x39f8b9<0x64;_0x39f8b9++){if(_0x53f2c1(0x4b9)!==_0x53f2c1(0x51d)){if(!$dataSystem[_0x53f2c1(0x2df)][_0x39f8b9])continue;let _0x154c42=$dataSystem['weaponTypes'][_0x39f8b9][_0x53f2c1(0x9e5)]()[_0x53f2c1(0x3a3)]();_0x154c42=_0x154c42[_0x53f2c1(0x277)](/\x1I\[(\d+)\]/gi,''),_0x154c42=_0x154c42[_0x53f2c1(0x277)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x154c42]=_0x39f8b9;}else return _0x5f31b5[_0x53f2c1(0xa7b)][_0x53f2c1(0x3f5)][_0x53f2c1(0x550)][_0x53f2c1(0x59e)];}return this[_0x53f2c1(0x883)][_0x53f2c1(0x530)]=0x0,this[_0x53f2c1(0x883)][_0x4246b0]||0x0;},DataManager[_0x4ab18a(0x77f)]=function(_0x36d813){const _0x35f13d=_0x4ab18a,_0x232960=_0x35f13d(0x2fa);let _0x502d3b=_0x36d813[_0x35f13d(0xa49)],_0xfa4f68=_0x36d813['name'];const _0x5f1e78=_0x36d813[_0x35f13d(0x7d0)];if(_0x5f1e78['match'](/<DISPLAY ICON: (\d+)>/i)){if('stZDp'===_0x35f13d(0x630))return[_0x1e3c1b][_0x35f13d(0x11d)](_0x1b8475);else _0x502d3b=Number(RegExp['$1']);}return _0x5f1e78[_0x35f13d(0x378)](/<DISPLAY TEXT: (.*)>/i)&&(_0xfa4f68=String(RegExp['$1'])),_0x232960[_0x35f13d(0x278)](_0x502d3b,_0xfa4f68);},DataManager[_0x4ab18a(0xadd)]=function(_0x568f83){const _0x3db097=_0x4ab18a;return _0x568f83['note'][_0x3db097(0x378)](/<COMMAND TEXT: (.*)>/i)?_0x3db097(0x421)!==_0x3db097(0xbd)?String(RegExp['$1']):this[_0x3db097(0x335)]||0x0:_0x568f83[_0x3db097(0x8ff)];},DataManager[_0x4ab18a(0x8e2)]=function(_0x30b874){const _0x26ffbc=_0x4ab18a;if(_0x30b874[_0x26ffbc(0x7d0)]['match'](/<COMMAND ICON: (\d+)>/i))return Number(RegExp['$1']);else{if('wcUyU'!==_0x26ffbc(0x5ba))return _0x30b874[_0x26ffbc(0xa49)];else this[_0x26ffbc(0x43a)]=this[_0x26ffbc(0x9f8)](this[_0x26ffbc(0x43a)],this['_targetOpacity'],_0x244325,_0x45e200,_0x444713);}},DataManager[_0x4ab18a(0xa0e)]=function(_0x4c48aa){const _0x4f55bc=_0x4ab18a,_0x504ac5=$dataEnemies[_0x4c48aa];if(_0x504ac5){if(_0x504ac5['note'][_0x4f55bc(0x378)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x51f301=String(RegExp['$1'])[_0x4f55bc(0x9e7)](/[\r\n]+/)[_0x4f55bc(0x8d3)](''),_0x393a0b=this['processRandomizedData'](_0x51f301);_0x4c48aa=this[_0x4f55bc(0x78f)](_0x393a0b)||_0x4c48aa,_0x4c48aa=DataManager[_0x4f55bc(0xa0e)](_0x4c48aa);}}return _0x4c48aa;},DataManager['processRandomizedData']=function(_0x351d54){const _0x2c3447=_0x4ab18a;let _0x55a057=0x0;const _0x525e83={};for(const _0x46d34b of _0x351d54){if('FOafI'===_0x2c3447(0xb1))_0x37f23f+=_0x3fe907[_0x2c3447(0x27f)](_0x74fc02[_0x2c3447(0x9c0)]);else{if(_0x46d34b[_0x2c3447(0x378)](/(.*):[ ](\d+)/i)){const _0x48d357=String(RegExp['$1'])[_0x2c3447(0x3a3)](),_0x1fda5c=Number(RegExp['$2']);_0x525e83[_0x48d357]=_0x1fda5c,_0x55a057+=_0x1fda5c;}else{if(_0x46d34b[_0x2c3447(0x378)](/(.*):[ ](\d+\.?\d+)/i)){const _0x576a0d=String(RegExp['$1'])[_0x2c3447(0x3a3)](),_0x58d4ab=Number(RegExp['$2']);_0x525e83[_0x576a0d]=_0x58d4ab,_0x55a057+=_0x58d4ab;}else _0x46d34b!==''&&(_0x2c3447(0x1ae)!==_0x2c3447(0x1ae)?_0x4668d6=_0x2c3447(0x657):(_0x525e83[_0x46d34b]=0x1,_0x55a057++));}}}if(_0x55a057<=0x0)return'';let _0x3d3706=Math[_0x2c3447(0xeb)]()*_0x55a057;for(const _0x2d4be8 in _0x525e83){_0x3d3706-=_0x525e83[_0x2d4be8];if(_0x3d3706<=0x0)return _0x2d4be8;}return'';},DataManager[_0x4ab18a(0x430)]=function(_0x143af8){const _0x50a189=_0x4ab18a;if(!_0x143af8)return![];if(!VisuMZ[_0x50a189(0x94c)][_0x50a189(0x3f5)][_0x50a189(0x9d2)]['AutoNotetag'])return![];if(_0x143af8['note'][_0x50a189(0x378)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x143af8['note'][_0x50a189(0x378)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4135ed of _0x143af8[_0x50a189(0x4ab)]){if(_0x50a189(0x2f7)===_0x50a189(0x2f7)){if(!_0x4135ed)continue;if(_0x4135ed[_0x50a189(0x12f)]===Game_Action[_0x50a189(0x468)])return!![];}else{if(!_0x871565[_0x50a189(0x332)]())return;const _0x15522e=this[_0x50a189(0x173)](),_0x556470=_0x14338c['battler']();if(!_0x15522e||!_0x556470)return;const _0xd1c09b=_0x556470[_0x50a189(0x520)],_0x3e30cd=_0x556470[_0x50a189(0x5e7)];this[_0x50a189(0x7c6)](_0xd1c09b,_0x3e30cd,0x0,![],_0x50a189(0xfb),-0x1),_0x15522e[_0x50a189(0x1ec)]();const _0xb9d23f=_0x4b413f[_0x50a189(0x94c)][_0x50a189(0x3f5)][_0x50a189(0x9d2)];let _0x4fca8f=(_0x556470[_0x50a189(0x999)]+_0x15522e[_0x50a189(0x999)])/0x2;_0x4fca8f*=this[_0x50a189(0x526)]()?0x1:-0x1;let _0x190d23=_0xb9d23f[_0x50a189(0x4f9)]*(this['isActor']()?0x1:-0x1);_0x5d51db['moveBattlerDistance'](_0x4fca8f,_0x190d23,0x0,![],_0x50a189(0xfb)),_0x556470[_0x50a189(0x1ec)]();}}return![];},DataManager[_0x4ab18a(0x16a)]=function(_0x4f6c99){const _0x4ae1b2=_0x4ab18a,_0xafbf58=$dataTroops[_0x4f6c99];if(!_0xafbf58)return'';let _0x5cefd4='';_0x5cefd4+=_0xafbf58['name'];for(const _0x3ad58a of _0xafbf58['pages']){for(const _0x26b163 of _0x3ad58a['list']){if(_0x4ae1b2(0xb9)!==_0x4ae1b2(0x17c)){if([0x6c,0x198][_0x4ae1b2(0xb2)](_0x26b163[_0x4ae1b2(0x12f)])){if(_0x4ae1b2(0x47c)==='NUfOm'){const _0x1c9491=_0x402d69[_0x4ae1b2(0x50a)](_0x1d79e6[_0x4ae1b2(0x9e5)]()[_0x4ae1b2(0x3a3)]());_0x1c9491>=0x0&&_0x1c9491<=0x7&&_0x13e639[_0x4ae1b2(0x5fa)](_0x1c9491,_0x55a4ab);}else _0x5cefd4+='\x0a',_0x5cefd4+=_0x26b163[_0x4ae1b2(0x9fa)][0x0];}}else return;}}return _0x5cefd4;},ConfigManager[_0x4ab18a(0xaae)]=ConfigManager[_0x4ab18a(0xaae)]??![],ConfigManager[_0x4ab18a(0xa75)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x4ab18a(0x8c1)]=ConfigManager[_0x4ab18a(0x8c1)]??!![],VisuMZ[_0x4ab18a(0x94c)]['ConfigManager_makeData']=ConfigManager[_0x4ab18a(0x673)],ConfigManager['makeData']=function(){const _0x4ab2a4=_0x4ab18a,_0x1c55e4=VisuMZ[_0x4ab2a4(0x94c)][_0x4ab2a4(0xb8)][_0x4ab2a4(0x45b)](this);return _0x1c55e4[_0x4ab2a4(0xaae)]=this['autoBattleAtStart'],_0x1c55e4[_0x4ab2a4(0xa75)]=this[_0x4ab2a4(0xa75)],_0x1c55e4[_0x4ab2a4(0x8c1)]=this[_0x4ab2a4(0x8c1)],_0x1c55e4;},VisuMZ[_0x4ab18a(0x94c)]['ConfigManager_applyData']=ConfigManager[_0x4ab18a(0x8e4)],ConfigManager[_0x4ab18a(0x8e4)]=function(_0x2e9c5a){const _0x5e1e87=_0x4ab18a;VisuMZ['BattleCore'][_0x5e1e87(0x119)][_0x5e1e87(0x45b)](this,_0x2e9c5a);_0x5e1e87(0xaae)in _0x2e9c5a?this[_0x5e1e87(0xaae)]=_0x2e9c5a[_0x5e1e87(0xaae)]:_0x5e1e87(0x7ad)!==_0x5e1e87(0x41a)?this[_0x5e1e87(0xaae)]=![]:(this[_0x5e1e87(0x422)]=new _0x1e4bd3(),this[_0x5e1e87(0x422)][_0x5e1e87(0x6db)]=_0xa4e71e[_0x5e1e87(0xac4)]('Shadow2'),this[_0x5e1e87(0x422)][_0x5e1e87(0x6db)]['smooth']=_0x884932['BattleCore'][_0x5e1e87(0x3f5)]['Actor']['SmoothImage'],this[_0x5e1e87(0x422)]['anchor']['x']=0.5,this['_shadowSprite'][_0x5e1e87(0x8a)]['y']=0.5,this[_0x5e1e87(0x422)]['y']=-0x2,this['_shadowSprite'][_0x5e1e87(0x242)]=![],this[_0x5e1e87(0x19a)](this[_0x5e1e87(0x422)]));if('autoBattleUseSkills'in _0x2e9c5a){if(_0x5e1e87(0x374)!=='wsnnF')this[_0x5e1e87(0xa75)]=_0x2e9c5a[_0x5e1e87(0xa75)];else{if(!_0x131413)return![];if(!_0x1bd016[_0x5e1e87(0x291)])return![];if(_0x3cefe0[_0x5e1e87(0x291)][_0x5e1e87(0x858)]!==0x0)return![];if(!_0x2fd683[_0x5e1e87(0x7aa)][0x0])return![];if(_0x4642e6[_0x5e1e87(0x7aa)][0x0][_0x5e1e87(0x526)]&&!_0x4c2c6e[_0x5e1e87(0x7aa)][0x0][_0x5e1e87(0x526)]())return![];if(_0x5289f5['isSideView']())return![];if(!this[_0x5e1e87(0x846)]())return![];const _0x592514=_0x81248c[_0x5e1e87(0x49d)][_0x5e1e87(0xaf0)]();return['portrait','xp']['contains'](_0x592514);}}else this['autoBattleUseSkills']=![];if('visualHpGauge'in _0x2e9c5a)this['visualHpGauge']=_0x2e9c5a[_0x5e1e87(0x8c1)];else{if(_0x5e1e87(0x197)!==_0x5e1e87(0xa06))this[_0x5e1e87(0x8c1)]=!![];else{_0x93e284['prototype']['refresh'][_0x5e1e87(0x45b)](this),this[_0x5e1e87(0x46a)][_0x5e1e87(0x7e0)]();if(!this[_0x5e1e87(0x637)]())return;this[_0x5e1e87(0x482)]();}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x6d0)]=BattleManager[_0x4ab18a(0x78b)],BattleManager[_0x4ab18a(0x78b)]=function(){const _0x394911=_0x4ab18a;VisuMZ[_0x394911(0x94c)][_0x394911(0x6d0)]['call'](this),this[_0x394911(0xf5)]=[];},BattleManager[_0x4ab18a(0x76f)]=function(){const _0x185d3a=_0x4ab18a;if(!SceneManager[_0x185d3a(0xae)]())return;const _0x5a58f8=SceneManager['_scene'][_0x185d3a(0xc3)];if(_0x5a58f8)_0x5a58f8['requestRefresh']();},BattleManager[_0x4ab18a(0x61f)]=function(){const _0x5cc9b7=_0x4ab18a;if(BattleManager[_0x5cc9b7(0x14b)]())return'TPB';return _0x5cc9b7(0x9d9);},BattleManager[_0x4ab18a(0x8ac)]=function(_0x5d67f6){const _0x4528b7=_0x4ab18a;return _0x5d67f6=_0x5d67f6[_0x4528b7(0x9e5)]()['trim'](),this['battleSys']()===_0x5d67f6;},BattleManager[_0x4ab18a(0x4d7)]=function(){const _0x4404ca=_0x4ab18a;return this[_0x4404ca(0x8ac)](_0x4404ca(0x9d9));},BattleManager['isTurnBased']=function(){return this['isDTB']();},BattleManager[_0x4ab18a(0x9e0)]=function(){const _0x331e36=_0x4ab18a;return!this[_0x331e36(0x666)]();},BattleManager[_0x4ab18a(0x2a7)]=function(){const _0x535c8c=_0x4ab18a;return!this[_0x535c8c(0x666)]()&&!this[_0x535c8c(0x9e0)]();},BattleManager[_0x4ab18a(0xa66)]=function(_0xe978ba){const _0x72450d=_0x4ab18a;$gameParty[_0x72450d(0xa66)](_0xe978ba),$gameTroop['processBattleCoreJS'](_0xe978ba);},VisuMZ[_0x4ab18a(0x94c)]['BattleManager_startBattle']=BattleManager[_0x4ab18a(0x75a)],BattleManager[_0x4ab18a(0x75a)]=function(){const _0x321c45=_0x4ab18a;this[_0x321c45(0xa20)]=![],this[_0x321c45(0x5cc)]=ConfigManager[_0x321c45(0xaae)],this['processBattleCoreJS']('PreStartBattleJS'),VisuMZ['BattleCore'][_0x321c45(0x77e)][_0x321c45(0x45b)](this),this[_0x321c45(0xa66)](_0x321c45(0x606));},BattleManager[_0x4ab18a(0x317)]=function(_0x30bf04){const _0x478f20=_0x4ab18a,_0x4d7d59=VisuMZ['BattleCore'][_0x478f20(0x3f5)]['Mechanics'];if(_0x4d7d59[_0x478f20(0x7e4)]&&VisuMZ[_0x478f20(0x94c)][_0x478f20(0xa05)](_0x4d7d59[_0x478f20(0x7e4)])){if(_0x478f20(0x417)!==_0x478f20(0x417))return _0x29fd3e[_0x478f20(0xa47)](_0x53c713=>_0x53c713[_0x478f20(0x3ab)]());else $gameTemp[_0x478f20(0x35a)](_0x4d7d59[_0x478f20(0x7e4)]);}const _0xafccdd='%1Event'[_0x478f20(0x278)](_0x30bf04);_0x4d7d59[_0xafccdd]&&VisuMZ[_0x478f20(0x94c)][_0x478f20(0xa05)](_0x4d7d59[_0xafccdd])&&$gameTemp[_0x478f20(0x35a)](_0x4d7d59[_0xafccdd]);},VisuMZ[_0x4ab18a(0x94c)]['BattleManager_processVictory']=BattleManager['processVictory'],BattleManager['processVictory']=function(){const _0x4c622b=_0x4ab18a;this[_0x4c622b(0xa66)](_0x4c622b(0x169)),VisuMZ[_0x4c622b(0x94c)]['BattleManager_processVictory'][_0x4c622b(0x45b)](this),this[_0x4c622b(0x317)](_0x4c622b(0x1a6));},VisuMZ['BattleCore']['BattleManager_processDefeat']=BattleManager['processDefeat'],BattleManager['processDefeat']=function(){const _0x4ea3ac=_0x4ab18a;this[_0x4ea3ac(0xa66)](_0x4ea3ac(0x86b)),VisuMZ[_0x4ea3ac(0x94c)]['BattleManager_processDefeat'][_0x4ea3ac(0x45b)](this),this[_0x4ea3ac(0x317)](_0x4ea3ac(0x8ba));},VisuMZ['BattleCore'][_0x4ab18a(0x4df)]=BattleManager[_0x4ab18a(0x4a6)],BattleManager['endBattle']=function(_0x44d4bc){const _0x52de3a=_0x4ab18a;this['_endBattle']=!![],this[_0x52de3a(0x5cc)]=![],this[_0x52de3a(0xa66)](_0x52de3a(0x70e)),VisuMZ[_0x52de3a(0x94c)][_0x52de3a(0x4df)]['call'](this,_0x44d4bc),this[_0x52de3a(0xa66)]('PostEndBattleJS');},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x805)]=BattleManager[_0x4ab18a(0xd7)],BattleManager[_0x4ab18a(0xd7)]=function(){const _0x251783=_0x4ab18a;if(this[_0x251783(0x666)]())this[_0x251783(0xa66)](_0x251783(0x9c2));VisuMZ[_0x251783(0x94c)]['BattleManager_startTurn'][_0x251783(0x45b)](this);if(this[_0x251783(0x666)]())this['processBattleCoreJS'](_0x251783(0x3d8));},VisuMZ[_0x4ab18a(0x94c)]['BattleManager_startAction']=BattleManager[_0x4ab18a(0x553)],BattleManager[_0x4ab18a(0x553)]=function(){const _0x277ff7=_0x4ab18a,_0x218c39=this[_0x277ff7(0xf7)][_0x277ff7(0x4e0)](),_0x11af0a=this[_0x277ff7(0xf7)];_0x218c39&&_0x218c39[_0x277ff7(0x3d1)]()===_0x11af0a&&(_0x277ff7(0x509)===_0x277ff7(0x509)?_0x218c39['actionBattleCoreJS'](_0x277ff7(0xa57)):this[_0x277ff7(0x23b)](this[_0x277ff7(0x728)]));VisuMZ['BattleCore'][_0x277ff7(0x45f)][_0x277ff7(0x45b)](this);if(_0x218c39&&_0x218c39[_0x277ff7(0x3d1)]()===_0x11af0a){if('hSVlC'!=='NxmOQ')_0x218c39[_0x277ff7(0x901)]('PostStartActionJS');else{if(!_0x1124aa[_0x277ff7(0x332)]())return;const _0x2ef698=this[_0x277ff7(0x173)]();if(!_0x2ef698)return;_0x2ef698['startSpin'](_0x3862cd,_0x361c65,_0x4574d6,_0x4a1088);}}},VisuMZ['BattleCore'][_0x4ab18a(0x250)]=BattleManager[_0x4ab18a(0x159)],BattleManager[_0x4ab18a(0x159)]=function(){const _0xeb7497=_0x4ab18a,_0x839f67=this['_action'],_0x399098=this[_0xeb7497(0xf7)];if(_0x839f67&&_0x839f67!==this[_0xeb7497(0x6c5)]&&_0x839f67[_0xeb7497(0x3d1)]()===_0x399098){if(_0xeb7497(0x522)==='SPWyT')_0x839f67[_0xeb7497(0x901)]('PreEndActionJS');else{const _0x270aea=this['_distortionSprite'];_0x270aea&&(_0x270aea['scale']['x']=this['mainSpriteScaleX'](),_0x270aea[_0xeb7497(0x443)]['y']=this[_0xeb7497(0x7b5)]());}}VisuMZ[_0xeb7497(0x94c)][_0xeb7497(0x250)][_0xeb7497(0x45b)](this);if(_0x839f67&&_0x839f67!==this[_0xeb7497(0x6c5)]&&_0x839f67[_0xeb7497(0x3d1)]()===_0x399098){if(_0xeb7497(0x569)===_0xeb7497(0x9f1)){const _0x189029=this['isOnCurrentMap']()?this[_0xeb7497(0x571)]:0x0,_0x5ab7f7=_0x15b56d[_0xeb7497(0x5fb)];this[_0xeb7497(0x2e4)](_0x5ab7f7,_0x189029),this[_0xeb7497(0x915)]=_0x228237['makeDeepCopy'](this['_list']);const _0x59cc2c={'code':0xbc3,'indent':this[_0xeb7497(0x211)],'parameters':_0x5a6af0[_0xeb7497(0x6e6)](_0x57696d)};return this[_0xeb7497(0x915)][_0xeb7497(0x6e3)](this[_0xeb7497(0x2ed)]+0x1,0x0,_0x59cc2c),!![];}else _0x839f67[_0xeb7497(0x901)](_0xeb7497(0x27e));}this['refreshBattlerMotions'](this[_0xeb7497(0xe6)]()),this[_0xeb7497(0x6c5)]=this[_0xeb7497(0x605)];},BattleManager[_0x4ab18a(0x1e8)]=function(_0xbb376){const _0x50958a=_0x4ab18a;for(const _0x52a66e of _0xbb376){if(!_0x52a66e)continue;if(!_0x52a66e['battler']())continue;_0x52a66e[_0x50958a(0x173)]()[_0x50958a(0x1dc)]();}},BattleManager[_0x4ab18a(0x636)]=function(){const _0x455baa=_0x4ab18a;!this[_0x455baa(0x84a)][_0x455baa(0x433)]()&&this[_0x455baa(0x159)]();},Game_Battler[_0x4ab18a(0x49d)]['onAllActionsEnd']=function(){const _0x9dd274=_0x4ab18a;this[_0x9dd274(0x656)]();if(Imported[_0x9dd274(0x273)]){const _0x373ca8=VisuMZ['SkillsStatesCore'][_0x9dd274(0x3f5)][_0x9dd274(0x454)];_0x373ca8&&_0x373ca8[_0x9dd274(0x7d5)]===![]&&this[_0x9dd274(0x87)](0x1);}else{if('uyhIi'!==_0x9dd274(0x7a5)){const _0x30a0d=_0x503cb0['inputtingAction'](),_0x15fbdb=this[_0x9dd274(0x475)](this[_0x9dd274(0xa34)]());if(!_0x30a0d)return!![];if(!_0x30a0d[_0x9dd274(0x925)]())return!![];const _0x1a0430=_0x30a0d['item']()[_0x9dd274(0x7d0)];if(_0x1a0430[_0x9dd274(0x378)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x15fbdb===_0x4afef4[_0x9dd274(0x475)]())return![];}return!![];}else this[_0x9dd274(0x87)](0x1);}this[_0x9dd274(0x29e)]();},BattleManager[_0x4ab18a(0x6af)]=function(){const _0x5cebd5=_0x4ab18a;this[_0x5cebd5(0x1df)]=VisuMZ['BattleCore'][_0x5cebd5(0x3f5)][_0x5cebd5(0x1c6)][_0x5cebd5(0xa5d)]['call'](this);},VisuMZ['BattleCore'][_0x4ab18a(0x3bc)]=BattleManager['onEscapeSuccess'],BattleManager['onEscapeSuccess']=function(){const _0x2aaf53=_0x4ab18a;this[_0x2aaf53(0xa66)](_0x2aaf53(0x8c9)),BattleManager[_0x2aaf53(0x6f4)][_0x2aaf53(0xabc)](),VisuMZ['BattleCore'][_0x2aaf53(0x3bc)][_0x2aaf53(0x45b)](this),this[_0x2aaf53(0x317)](_0x2aaf53(0x62f));},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa2d)]=BattleManager['onEscapeFailure'],BattleManager['onEscapeFailure']=function(){const _0x51c259=_0x4ab18a;this[_0x51c259(0xa66)](_0x51c259(0x299));const _0x1be446=this[_0x51c259(0x1df)];VisuMZ['BattleCore']['BattleManager_onEscapeFailure'][_0x51c259(0x45b)](this),this[_0x51c259(0x1df)]=_0x1be446+VisuMZ[_0x51c259(0x94c)][_0x51c259(0x3f5)][_0x51c259(0x1c6)][_0x51c259(0x40a)][_0x51c259(0x45b)](this),this[_0x51c259(0x317)](_0x51c259(0x780));},BattleManager[_0x4ab18a(0x7bd)]=function(){const _0x59270b=_0x4ab18a;let _0x24116e=![];if(this['isDisplayEmergedEnemies']())for(const _0x12dbcb of $gameTroop[_0x59270b(0x8c2)]()){if('cumQB'!==_0x59270b(0x629))this[_0x59270b(0x84a)][_0x59270b(0x448)](_0x59270b(0x39c),TextManager['emerge'][_0x59270b(0x278)](_0x12dbcb)),this[_0x59270b(0x84a)]['push'](_0x59270b(0x1d4)),_0x24116e=!![];else{const _0x27e640=_0x77ba9f[_0x59270b(0x2ac)](this[_0x59270b(0x925)]()),_0x4b8c2d=_0x2461d8[_0x59270b(0x3f8)][_0x27e640];try{return _0x4b8c2d[_0x59270b(0x2ee)][_0x59270b(0x45b)](this,_0x1a433f);}catch(_0x1d4b15){if(_0x273146[_0x59270b(0x31a)]())_0x5f064f[_0x59270b(0x63c)](_0x1d4b15);return _0x289858[_0x59270b(0x94c)][_0x59270b(0x772)][_0x59270b(0x45b)](this);}}}if(this[_0x59270b(0x3a2)]){if(_0x59270b(0x427)!==_0x59270b(0xea))this[_0x59270b(0x84a)][_0x59270b(0x448)](_0x59270b(0x39c),TextManager[_0x59270b(0xa58)][_0x59270b(0x278)]($gameParty[_0x59270b(0x8ff)]())),this[_0x59270b(0x84a)][_0x59270b(0x448)](_0x59270b(0x1d4));else return this[_0x59270b(0xae0)]>0x0;}else this[_0x59270b(0x356)]&&(this['_logWindow'][_0x59270b(0x448)](_0x59270b(0x39c),TextManager['surprise']['format']($gameParty['name']())),this[_0x59270b(0x84a)][_0x59270b(0x448)]('wait'));_0x24116e&&(_0x59270b(0x8b4)!=='jyUgx'?(this[_0x59270b(0x84a)][_0x59270b(0x448)](_0x59270b(0x1d4)),this[_0x59270b(0x84a)][_0x59270b(0x448)](_0x59270b(0x7e0))):_0x3ca4a5=_0x42e503(_0x53ea6c['$1'])),this[_0x59270b(0x14b)]()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x4ab18a(0x7ea)]=function(){const _0x3b63e9=_0x4ab18a;if(BattleManager[_0x3b63e9(0x5cc)])return![];return VisuMZ[_0x3b63e9(0x94c)][_0x3b63e9(0x3f5)][_0x3b63e9(0x582)][_0x3b63e9(0x7f3)];},VisuMZ['BattleCore']['BattleManager_startInput']=BattleManager[_0x4ab18a(0x41c)],BattleManager[_0x4ab18a(0x41c)]=function(){const _0x40df03=_0x4ab18a;VisuMZ[_0x40df03(0x94c)][_0x40df03(0x730)]['call'](this),this[_0x40df03(0x4d7)]()&&this[_0x40df03(0x34e)]()&&!this['_surprise']&&$gameParty['canInput']()&&this[_0x40df03(0xad4)]();},BattleManager[_0x4ab18a(0x34e)]=function(){const _0x5153c8=_0x4ab18a;return VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x5153c8(0x275)];},BattleManager['checkTpbInputOpen']=function(){const _0x5db228=_0x4ab18a;this[_0x5db228(0x500)]()&&this[_0x5db228(0xad4)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x6b6)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x5ca)],Scene_Battle[_0x4ab18a(0x49d)]['startActorCommandSelection']=function(){const _0x572ba2=_0x4ab18a;VisuMZ['BattleCore'][_0x572ba2(0x6b6)][_0x572ba2(0x45b)](this),BattleManager[_0x572ba2(0x14b)]()&&BattleManager[_0x572ba2(0xa5b)]&&(BattleManager[_0x572ba2(0xa5b)]=![],this['actorCommandCancelTPB']());},BattleManager['invokeMagicReflection']=function(_0x59c73b,_0x153db7){const _0x2c2e80=_0x4ab18a;this['_action'][_0x2c2e80(0x354)]=_0x153db7,this['_logWindow']['displayReflection'](_0x153db7),this['_logWindow'][_0x2c2e80(0x947)](_0x59c73b,this['_action']),this['_action']['apply'](_0x59c73b),this[_0x2c2e80(0x84a)][_0x2c2e80(0x5b8)](_0x59c73b,_0x59c73b);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x83d)]=BattleManager[_0x4ab18a(0x70f)],BattleManager[_0x4ab18a(0x70f)]=function(){const _0x1644dc=_0x4ab18a;VisuMZ[_0x1644dc(0x94c)]['BattleManager_makeActionOrders']['call'](this),this[_0x1644dc(0xa19)]=this[_0x1644dc(0xa19)][_0x1644dc(0xa47)](_0x55473b=>_0x55473b&&_0x55473b['isAppeared']());},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x659)]=BattleManager[_0x4ab18a(0x68b)],BattleManager[_0x4ab18a(0x68b)]=function(_0x1e9735){const _0x1f950d=_0x4ab18a;if(this[_0x1f950d(0xd1)]===_0x1f950d(0xaed))_0x1f950d(0x1b3)!==_0x1f950d(0x452)?this[_0x1f950d(0x34f)]():this[_0x1f950d(0x846)]()[_0x1f950d(0xac7)](_0x5e75a6);else{if(this['_phase']==='forceAction'){if(_0x1f950d(0x2bc)!==_0x1f950d(0x309))this[_0x1f950d(0x9ba)]();else{if(this['enemy']()[_0x1f950d(0x7d0)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x353f20[_0x1f950d(0x49d)][_0x1f950d(0x8dc)]['call'](this);}}else _0x1f950d(0x140)!=='UZEaK'?_0x1fdf42=_0x1450a8[_0x1f950d(0xa8e)]:VisuMZ[_0x1f950d(0x94c)][_0x1f950d(0x659)][_0x1f950d(0x45b)](this,_0x1e9735);}},BattleManager[_0x4ab18a(0x18d)]=function(){const _0x499343=_0x4ab18a;this['_allTargets']=this[_0x499343(0x285)][_0x499343(0x2e2)](0x0),this[_0x499343(0x5ab)]=0x0,this[_0x499343(0x2d8)]=this[_0x499343(0x4ef)][0x0]||null,this['_phase']='custom';},BattleManager[_0x4ab18a(0x34f)]=function(){const _0x37808a=_0x4ab18a;!this[_0x37808a(0x603)]()&&!this['_logWindow'][_0x37808a(0x433)]()&&(this['_phase']='action');},BattleManager[_0x4ab18a(0x9f2)]=function(_0x25235d){const _0x3a73e8=_0x4ab18a;this[_0x3a73e8(0xa19)][_0x3a73e8(0x8d3)](_0x25235d);if(_0x25235d===this[_0x3a73e8(0xf7)])return;const _0x38524a=JsonEx[_0x3a73e8(0x6e6)](_0x25235d[_0x3a73e8(0x4e0)]());this['_forcedBattlers'][_0x3a73e8(0x448)]([_0x25235d,_0x38524a]);},BattleManager[_0x4ab18a(0x2fb)]=function(){},BattleManager[_0x4ab18a(0x988)]=function(){const _0x1a1686=_0x4ab18a;if(this['isTpb']()){if('tlxhP'===_0x1a1686(0xa04))this[_0x1a1686(0xd1)]=_0x1a1686(0x815);else{if(this[_0x1a1686(0x93e)]===_0x173ef7)this[_0x1a1686(0xa37)]();return this[_0x1a1686(0x93e)];}}else{if(this[_0x1a1686(0xf5)][_0x1a1686(0x820)]>0x0){if('AZJsQ'!=='sQjRt')this[_0x1a1686(0xd1)]='turn';else{_0x403810['changeWeather'](_0x257758[0x0],_0xf69ac0[0x1],_0x583e2c[0x2]);if(_0x1508e6[0x3])this[_0x1a1686(0x1d4)](_0x445c69[0x2]);return!![];}}else this[_0x1a1686(0x41c)]();}},BattleManager[_0x4ab18a(0x30e)]=function(){const _0x46c3fa=_0x4ab18a,_0x231c9e=this['_subject'];_0x231c9e&&this[_0x46c3fa(0x14b)]()&&_0x231c9e[_0x46c3fa(0x219)](_0x46c3fa(0x701));for(;;){const _0x42f702=this['getNextSubjectFromPool']();if(!_0x42f702){if(_0x46c3fa(0x490)==='MgzOd')return null;else _0x288137[_0x46c3fa(0x56a)][_0x46c3fa(0xe1)]=!![];}if(_0x42f702[_0x46c3fa(0x258)]()&&_0x42f702[_0x46c3fa(0x3ab)]())return _0x42f702;}},BattleManager[_0x4ab18a(0xcf)]=function(){const _0x5a7d86=_0x4ab18a;if(this[_0x5a7d86(0xf5)][_0x5a7d86(0x820)]>0x0){const _0x302d34=this['_forcedBattlers']['shift'](),_0x106dcb=_0x302d34[0x0];return _0x106dcb[_0x5a7d86(0x207)]=_0x106dcb[_0x5a7d86(0x207)]||[],_0x106dcb[_0x5a7d86(0x207)][0x0]=_0x302d34[0x1],_0x106dcb;}else return this['_actionBattlers'][_0x5a7d86(0x2af)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x21e)]=Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x9f2)],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x9f2)]=function(_0x499d92,_0x5497f6){const _0x498dfe=_0x4ab18a;VisuMZ['BattleCore'][_0x498dfe(0x21e)][_0x498dfe(0x45b)](this,_0x499d92,_0x5497f6),this[_0x498dfe(0x207)][this[_0x498dfe(0x207)][_0x498dfe(0x820)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x4ab18a(0x49d)]['command339']=function(_0x281bfa){const _0x3fc36c=_0x4ab18a;return this[_0x3fc36c(0x994)](_0x281bfa[0x0],_0x281bfa[0x1],_0x1c33f1=>{const _0x573b01=_0x3fc36c;if(_0x573b01(0x935)===_0x573b01(0x10a))return this[_0x573b01(0x5c8)][_0x2e1c88];else!_0x1c33f1[_0x573b01(0x33c)]()&&(_0x573b01(0x930)!==_0x573b01(0x585)?(_0x1c33f1[_0x573b01(0x9f2)](_0x281bfa[0x2],_0x281bfa[0x3]),BattleManager['forceAction'](_0x1c33f1)):this[_0x573b01(0x176)]());}),!![];},VisuMZ[_0x4ab18a(0x94c)]['Game_Battler_makeSpeed']=Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x341)],Game_Battler['prototype'][_0x4ab18a(0x341)]=function(){const _0x193d55=_0x4ab18a;VisuMZ['BattleCore'][_0x193d55(0x4a1)][_0x193d55(0x45b)](this),this[_0x193d55(0x207)][_0x193d55(0x820)]<=0x0&&(this['_speed']=Number['MIN_SAFE_INTEGER']);},VisuMZ['BattleCore'][_0x4ab18a(0x147)]=BattleManager[_0x4ab18a(0xad4)],BattleManager['selectNextCommand']=function(){const _0x2e36a5=_0x4ab18a;this[_0x2e36a5(0x14b)]()?_0x2e36a5(0x11e)!==_0x2e36a5(0x870)?this['selectNextCommandTpb']():(_0xf30b13[_0x2e36a5(0x94c)][_0x2e36a5(0x440)][_0x2e36a5(0x45b)](this,_0x28fe5d),this[_0x2e36a5(0x61b)]()):VisuMZ[_0x2e36a5(0x94c)]['BattleManager_selectNextCommand']['call'](this);},BattleManager[_0x4ab18a(0x153)]=function(){const _0x45fe80=_0x4ab18a;if(this[_0x45fe80(0xabf)]){if(this[_0x45fe80(0xabf)][_0x45fe80(0xad4)]()){if('JLskB'===_0x45fe80(0x676)){const _0x5796b3=_0x5a0577(_0x5669b9['$1']);return[_0x2bafb0['members']()[_0x5796b3]];}else return;}this[_0x45fe80(0x8d1)](),this['checkTpbInputClose']();if(!this['_subject']&&!this['_currentActor']){if(_0x45fe80(0x594)===_0x45fe80(0x446)){if(this['enemy']()[_0x45fe80(0x7d0)][_0x45fe80(0x378)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];}else SceneManager[_0x45fe80(0xa10)][_0x45fe80(0x5ee)]();}}else!this[_0x45fe80(0xf7)]&&this[_0x45fe80(0xee)]();},BattleManager['checkTpbInputClose']=function(){const _0x144e6c=_0x4ab18a;(!this['isPartyTpbInputtable']()||this['needsActorInputCancel']())&&(this[_0x144e6c(0x52f)]&&(!$gameParty[_0x144e6c(0x5ec)]()[_0x144e6c(0xb2)](this[_0x144e6c(0x52f)])&&('CLAQB'===_0x144e6c(0x8fb)?this[_0x144e6c(0x52f)]=null:_0x3acf06[_0x144e6c(0x901)](_0x144e6c(0x27e)))),!this[_0x144e6c(0x52f)]?(this['cancelActorInput'](),this['_currentActor']=null,this[_0x144e6c(0x88f)]=![]):this[_0x144e6c(0xd6)]());},BattleManager['revertTpbCachedActor']=function(){const _0x2fa544=_0x4ab18a;!$gameParty[_0x2fa544(0x5ec)]()[_0x2fa544(0xb2)](this[_0x2fa544(0x52f)])&&(this['_tpbSceneChangeCacheActor']=null);if(this[_0x2fa544(0x52f)])this[_0x2fa544(0xabf)]=this[_0x2fa544(0x52f)],this['_currentActor']['_tpbState']=_0x2fa544(0x627),this[_0x2fa544(0x88f)]=!![],this['_tpbSceneChangeCacheActor']=null;else{if(_0x2fa544(0xa7a)===_0x2fa544(0xa4e))return _0x13cd9f[_0x2fa544(0xa43)]('ok');else this[_0x2fa544(0x12b)](),this[_0x2fa544(0xabf)]=null,this['_inputting']=![];}},VisuMZ['BattleCore'][_0x4ab18a(0x114)]=BattleManager[_0x4ab18a(0x120)],BattleManager[_0x4ab18a(0x120)]=function(){const _0x1ecc44=_0x4ab18a;return this[_0x1ecc44(0xd1)]===_0x1ecc44(0xaed)?this['battleCoreTpbMainPhase']():VisuMZ['BattleCore'][_0x1ecc44(0x114)][_0x1ecc44(0x45b)](this);},BattleManager[_0x4ab18a(0x47e)]=function(){const _0x156b81=_0x4ab18a;return this[_0x156b81(0x150)]();},VisuMZ['BattleCore']['BattleManager_cancelActorInput']=BattleManager['cancelActorInput'],BattleManager[_0x4ab18a(0x12b)]=function(){const _0x2c54e3=_0x4ab18a;this[_0x2c54e3(0x14b)]()&&this['_phase']==='battleEnd'&&(this[_0x2c54e3(0xabf)]=null),VisuMZ[_0x2c54e3(0x94c)][_0x2c54e3(0xa62)][_0x2c54e3(0x45b)](this);},VisuMZ['BattleCore'][_0x4ab18a(0x18e)]=BattleManager[_0x4ab18a(0x83e)],BattleManager[_0x4ab18a(0x83e)]=function(){const _0x476a42=_0x4ab18a,_0x53b2db=this[_0x476a42(0xabf)];if(_0x53b2db&&!_0x53b2db[_0x476a42(0x83e)]()){if(_0x476a42(0x58d)==='rMarO'){const _0x1c315a=_0x53b2db[_0x476a42(0xa68)];_0x53b2db[_0x476a42(0x207)][_0x1c315a]=new Game_Action(_0x53b2db);}else _0x26ba4a=_0x52a227>=_0x394833?_0x96dfdf:_0x3a989f;}return VisuMZ[_0x476a42(0x94c)][_0x476a42(0x18e)]['call'](this);},SceneManager[_0x4ab18a(0xae)]=function(){const _0xd6be2d=_0x4ab18a;return this[_0xd6be2d(0xa10)]&&this[_0xd6be2d(0xa10)][_0xd6be2d(0x164)]===Scene_Battle;},SceneManager[_0x4ab18a(0x313)]=function(){const _0x2492eb=_0x4ab18a;return Spriteset_Battle[_0x2492eb(0x49d)]['isFlipped']();},SceneManager[_0x4ab18a(0x6f3)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager[_0x4ab18a(0x47d)]=function(){const _0x59db3a=_0x4ab18a;if(SceneManager[_0x59db3a(0xab0)](Scene_Options))return!![];return![];},SceneManager[_0x4ab18a(0x697)]=function(_0x473b43){const _0x2512c3=_0x4ab18a;if(!SceneManager[_0x2512c3(0xae)]())return!![];const _0xe26f9a=['Scene_Options',_0x2512c3(0x367)];return _0xe26f9a[_0x2512c3(0xb2)](_0x473b43[_0x2512c3(0x8ff)]);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x99d)]=SceneManager['push'],SceneManager[_0x4ab18a(0x448)]=function(_0x3d62c2){const _0xa5350c=_0x4ab18a;if(!SceneManager[_0xa5350c(0x697)](_0x3d62c2))return this[_0xa5350c(0x5bd)](_0x3d62c2);VisuMZ[_0xa5350c(0x94c)]['SceneManager_push']['call'](this,_0x3d62c2);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x2cf148){const _0x5dfa1b=_0x4ab18a;if(!$gameTemp['isPlaytest']())return;if(this[_0x5dfa1b(0x57f)])return;this[_0x5dfa1b(0x57f)]=!![];let _0x36ae0d='';_0x36ae0d+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x36ae0d+='\x20to\x20%1\x20midbattle.'[_0x5dfa1b(0x278)](_0x2cf148[_0x5dfa1b(0x8ff)]),alert(_0x36ae0d);},VisuMZ['BattleCore'][_0x4ab18a(0x77a)]=Game_Temp['prototype'][_0x4ab18a(0x9b2)],Game_Temp[_0x4ab18a(0x49d)][_0x4ab18a(0x9b2)]=function(_0x108d59,_0x3f218b,_0xb1da56){const _0x41a284=_0x4ab18a;_0x108d59=_0x108d59[_0x41a284(0xa47)]((_0x30d9d6,_0x11c96d,_0x3fc22a)=>_0x3fc22a[_0x41a284(0x50a)](_0x30d9d6)===_0x11c96d),SceneManager[_0x41a284(0xae)]()&&SceneManager[_0x41a284(0x313)]()&&(_0xb1da56=!_0xb1da56),VisuMZ[_0x41a284(0x94c)][_0x41a284(0x77a)]['call'](this,_0x108d59,_0x3f218b,_0xb1da56),SceneManager[_0x41a284(0xae)]()&&BattleManager[_0x41a284(0x6f4)][_0x41a284(0x204)]();},Game_Temp[_0x4ab18a(0x49d)][_0x4ab18a(0x79f)]=function(_0x4688c8){const _0x2bf543=_0x4ab18a;this[_0x2bf543(0x5e0)]=_0x4688c8;},Game_Temp[_0x4ab18a(0x49d)]['getLastPluginCommandInterpreter']=function(){const _0x79f095=_0x4ab18a;return this[_0x79f095(0x5e0)];},Game_Temp[_0x4ab18a(0x49d)][_0x4ab18a(0x426)]=function(){const _0x5302b7=_0x4ab18a;this[_0x5302b7(0x6ff)]=undefined;},Game_Temp['prototype']['applyForcedGameTroopSettingsBattleCore']=function(_0x4b616e){const _0x49cc9c=_0x4ab18a;$gameMap&&$dataMap&&$dataMap[_0x49cc9c(0x7d0)]&&this[_0x49cc9c(0x1b9)]($dataMap['note']);const _0x3399f7=$dataTroops[_0x4b616e];if(_0x3399f7){if(_0x49cc9c(0x27a)!==_0x49cc9c(0x31f)){let _0x539d5c=DataManager[_0x49cc9c(0x16a)](_0x3399f7['id']);this[_0x49cc9c(0x1b9)](_0x539d5c);}else _0x22d9f1['playEnemyAttack']();}},Game_Temp[_0x4ab18a(0x49d)]['parseForcedGameTroopSettingsBattleCore']=function(_0x102daf){const _0x19619f=_0x4ab18a;if(!_0x102daf)return;if(_0x102daf['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x19619f(0x89d)===_0x19619f(0x71f)){const _0x353940=_0x4e1402(_0x4d41b0['$1']);_0x353940!==_0x4b2c5d[_0x23148d]['version']&&(_0x538edf(_0x19619f(0x6ed)[_0x19619f(0x278)](_0x592db2,_0x353940)),_0x3eea32['exit']());}else{const _0x5a8876=String(RegExp['$1']);if(_0x5a8876[_0x19619f(0x378)](/DEFAULT/i))'rOjxK'!==_0x19619f(0x7de)?this[_0x19619f(0x6ff)]=_0x19619f(0x2d9):_0x28ef80[_0x19619f(0x37d)](_0x19619f(0x102));else{if(_0x5a8876[_0x19619f(0x378)](/LIST/i))this[_0x19619f(0x6ff)]=_0x19619f(0x5fb);else{if(_0x5a8876['match'](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x5a8876['match'](/PORTRAIT/i))this[_0x19619f(0x6ff)]=_0x19619f(0x6b3);else{if(_0x5a8876[_0x19619f(0x378)](/BORDER/i))this['_forcedBattleLayout']='border';else{if(_0x5a8876[_0x19619f(0x378)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported['VisuMZ_3_SideviewBattleUI'])this[_0x19619f(0x6ff)]=_0x19619f(0x9b7);else{if(_0x19619f(0x8c7)!==_0x19619f(0xade))this[_0x19619f(0x6ff)]=_0x19619f(0x2d9);else return this[_0x19619f(0x925)]()['note'][_0x19619f(0x378)](/<JS TARGETS>/i);}}}}}}}}}},VisuMZ[_0x4ab18a(0x94c)]['Game_System_initialize']=Game_System['prototype'][_0x4ab18a(0x9ed)],Game_System[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(){const _0x404084=_0x4ab18a;VisuMZ[_0x404084(0x94c)]['Game_System_initialize'][_0x404084(0x45b)](this),this[_0x404084(0xa37)]();},Game_System['prototype'][_0x4ab18a(0xa37)]=function(){const _0xc8e922=_0x4ab18a;this[_0xc8e922(0x93e)]=this[_0xc8e922(0x93e)]||[];},Game_System[_0x4ab18a(0x49d)]['getDefeatedEnemies']=function(){const _0x10ef7e=_0x4ab18a;if(this['_defeatedEnemies']===undefined)this[_0x10ef7e(0xa37)]();return this['_defeatedEnemies'];},Game_System[_0x4ab18a(0x49d)]['registerDefeatedEnemy']=function(_0x57ca9d){const _0xc7fafc=_0x4ab18a;if(this['_defeatedEnemies']===undefined)this[_0xc7fafc(0xa37)]();if(!_0x57ca9d)return;if(this[_0xc7fafc(0x93e)]['includes'](_0x57ca9d))return;this[_0xc7fafc(0x93e)][_0xc7fafc(0x448)](_0x57ca9d),this[_0xc7fafc(0x93e)][_0xc7fafc(0x592)]((_0x1a6224,_0x1eae65)=>_0x1a6224-_0x1eae65);},VisuMZ['BattleCore'][_0x4ab18a(0x4cf)]=Game_BattlerBase[_0x4ab18a(0x49d)]['addNewState'],Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x386)]=function(_0x46bbe5){const _0x207a72=_0x4ab18a,_0x29a09b=this[_0x207a72(0x3ab)](),_0x3edf40=this['stateMotionIndex']();VisuMZ[_0x207a72(0x94c)]['Game_BattlerBase_addNewState'][_0x207a72(0x45b)](this,_0x46bbe5),this['isEnemy']()&&_0x29a09b&&this[_0x207a72(0x9b4)]()&&(this[_0x207a72(0x7e9)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x207a72(0x86f)](this[_0x207a72(0x432)]())),SceneManager['isSceneBattle']()&&_0x3edf40!==this['stateMotionIndex']()&&(this['battler']()&&this['battler']()['refreshMotion']());},Game_Enemy['prototype']['hasBeenDefeatedBefore']=function(){const _0x4d792e=_0x4ab18a;return $gameSystem[_0x4d792e(0x3ca)]()[_0x4d792e(0xb2)](this['_enemyId']);},VisuMZ[_0x4ab18a(0x94c)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x754)],Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x754)]=function(_0xf20a0){const _0x88cddb=_0x4ab18a;VisuMZ[_0x88cddb(0x94c)]['Game_BattlerBase_eraseState'][_0x88cddb(0x45b)](this,_0xf20a0),this[_0x88cddb(0x6dd)]()&&_0xf20a0===this[_0x88cddb(0x2cc)]()&&this[_0x88cddb(0x3ab)]()&&(this[_0x88cddb(0x7e9)]=![]),!this[_0x88cddb(0x2b4)]&&!this[_0x88cddb(0xef)]&&SceneManager['isSceneBattle']()&&this['requestMotionRefresh']();},VisuMZ[_0x4ab18a(0x94c)]['Game_Action_clear']=Game_Action['prototype'][_0x4ab18a(0x7e0)],Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x7e0)]=function(){const _0x378787=_0x4ab18a;VisuMZ[_0x378787(0x94c)][_0x378787(0x8d0)]['call'](this),this[_0x378787(0x90e)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x378787(0x3cf)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']='default';},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x564)]=function(_0x113972,_0x10210f){const _0x1efa7d=_0x4ab18a;return VisuMZ[_0x1efa7d(0x94c)]['Settings'][_0x1efa7d(0x486)][_0x1efa7d(0xad5)][_0x1efa7d(0x45b)](this,_0x113972,_0x10210f);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x882)]=function(_0x1d11f6,_0x361399){const _0x2ae42d=_0x4ab18a;return VisuMZ['BattleCore'][_0x2ae42d(0x3f5)][_0x2ae42d(0x486)]['VarianceFormulaJS'][_0x2ae42d(0x45b)](this,_0x1d11f6,_0x361399);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x824)]=function(_0x7a4873,_0x5273ef){const _0xca4e11=_0x4ab18a;return VisuMZ[_0xca4e11(0x94c)][_0xca4e11(0x3f5)][_0xca4e11(0x486)]['GuardFormulaJS'][_0xca4e11(0x45b)](this,_0x7a4873,_0x5273ef);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x7cf)]=Game_Action[_0x4ab18a(0x49d)]['itemHit'],Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x4d1)]=function(_0x141de9){const _0x3c1edd=_0x4ab18a,_0x380a59=this[_0x3c1edd(0x925)]()[_0x3c1edd(0x7d0)];if(_0x380a59['match'](/<ALWAYS HIT>/i)){if(_0x3c1edd(0x9e4)===_0x3c1edd(0x9e4))return 0x1;else{this[_0x3c1edd(0x5c8)]={},this['_regionBattleback2']={};if(!_0x318c5e)return;const _0x4f8f26=_0x2f5b64[_0x3c1edd(0x7d0)];if(!_0x4f8f26)return;const _0x2c2f5d=_0x4f8f26[_0x3c1edd(0x378)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2c2f5d)for(const _0x30dc62 of _0x2c2f5d){_0x30dc62[_0x3c1edd(0x378)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4395aa=_0x1ddab2(_0x29b9e4['$1']),_0x3ccea9=_0x414364(_0x59f28c['$2']),_0x977c27=_0x3ccea9===0x1?this[_0x3c1edd(0x5c8)]:this[_0x3c1edd(0x881)],_0xdfac6b=_0x4a72e6(_0x464cf5['$3']);_0x977c27[_0x4395aa]=_0xdfac6b;}}}else{if(_0x380a59[_0x3c1edd(0x378)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if(_0x3c1edd(0x22f)===_0x3c1edd(0x1e3))_0x4fedc7[_0x3c1edd(0x99a)](),_0x1cf896['_autoBattle']=![],_0x284d7e['clear'](),_0x49bba6[_0x3c1edd(0x7e0)]();else{let _0x25b2b4=VisuMZ['BattleCore'][_0x3c1edd(0x7cf)]['call'](this,_0x141de9);return _0x25b2b4=this[_0x3c1edd(0x3cf)][_0x3c1edd(0x334)]*_0x25b2b4+this[_0x3c1edd(0x3cf)][_0x3c1edd(0x693)],_0x25b2b4;}}}},Game_Action[_0x4ab18a(0x49d)]['itemCri']=function(_0x3be6e0){const _0x4c9820=_0x4ab18a;if(!this[_0x4c9820(0x925)]()[_0x4c9820(0x938)][_0x4c9820(0x33e)])return 0x0;let _0x34d5d9=VisuMZ[_0x4c9820(0x94c)][_0x4c9820(0x3f5)][_0x4c9820(0x486)][_0x4c9820(0x35c)][_0x4c9820(0x45b)](this,_0x3be6e0);return _0x34d5d9=this[_0x4c9820(0x3cf)]['criticalHitRate']*_0x34d5d9+this['_multipliers'][_0x4c9820(0x765)],_0x34d5d9;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x6b0)]=function(_0x32d105){const _0x38d898=_0x4ab18a;return _0x32d105=VisuMZ['BattleCore']['Settings'][_0x38d898(0x486)][_0x38d898(0x566)][_0x38d898(0x45b)](this,_0x32d105),_0x32d105=this['_multipliers'][_0x38d898(0x678)]*_0x32d105+this['_multipliers'][_0x38d898(0x6c7)],_0x32d105;},VisuMZ[_0x4ab18a(0x94c)]['Game_Action_evalDamageFormula']=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x9a9)],Game_Action[_0x4ab18a(0x49d)]['evalDamageFormula']=function(_0x1ca420){const _0xef61c9=_0x4ab18a;if(this['_customDamageFormula']!==_0xef61c9(0x2d9))return this[_0xef61c9(0x6cb)](_0x1ca420);else return DataManager[_0xef61c9(0x2ac)](this[_0xef61c9(0x925)]())==='MANUAL'?VisuMZ['BattleCore'][_0xef61c9(0x772)][_0xef61c9(0x45b)](this,_0x1ca420):this[_0xef61c9(0x97b)](_0x1ca420);},Game_Action['prototype'][_0x4ab18a(0x3ed)]=function(_0x5a2160){const _0x1a5426=_0x4ab18a;this[_0x1a5426(0x3c7)]=_0x5a2160;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x6cb)]=function(_0x1a0c23){const _0xc5b3cb=_0x4ab18a,_0x12a7b5=this[_0xc5b3cb(0x925)](),_0x556501=_0x12a7b5['damage']['formula'];_0x12a7b5['damage']['formula']=this[_0xc5b3cb(0x3c7)];let _0x213919=VisuMZ['BattleCore'][_0xc5b3cb(0x772)][_0xc5b3cb(0x45b)](this,_0x1a0c23);return _0x12a7b5['damage']['formula']=_0x556501,_0x213919;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x909)]=function(){const _0x4a7474=_0x4ab18a;if(this[_0x4a7474(0x925)]()[_0x4a7474(0x7d0)][_0x4a7474(0x378)](/<DAMAGE STYLE:[ ](.*)>/i)){if('raOGU'!==_0x4a7474(0x897))_0x5dcc2[_0x4a7474(0x94c)][_0x4a7474(0x29a)]['call'](this),this[_0x4a7474(0x1d8)]();else{const _0x3ba754=String(RegExp['$1'])[_0x4a7474(0x9e5)]()[_0x4a7474(0x3a3)]();return _0x3ba754;}}return _0x4a7474(0x57c);},Game_Action[_0x4ab18a(0x49d)]['evalDamageFormulaBattleCore']=function(_0x548d75){const _0x282ecd=_0x4ab18a,_0x320edf=DataManager[_0x282ecd(0x2ac)](this['item']()),_0x46dfb7=VisuMZ[_0x282ecd(0x3f8)][_0x320edf];try{return _0x46dfb7[_0x282ecd(0x2ee)][_0x282ecd(0x45b)](this,_0x548d75);}catch(_0x1fe248){if(_0x282ecd(0x733)!==_0x282ecd(0x733)){if(this[_0x282ecd(0x3c7)]!==_0x282ecd(0x2d9))return this[_0x282ecd(0x6cb)](_0x2148a4);else return _0xae284a[_0x282ecd(0x2ac)](this[_0x282ecd(0x925)]())===_0x282ecd(0x57c)?_0x1948a0['BattleCore']['Game_Action_evalDamageFormula'][_0x282ecd(0x45b)](this,_0x1b2866):this['evalDamageFormulaBattleCore'](_0x772cc6);}else{if($gameTemp[_0x282ecd(0x31a)]())console[_0x282ecd(0x63c)](_0x1fe248);return VisuMZ[_0x282ecd(0x94c)][_0x282ecd(0x772)]['call'](this);}}},Game_Action['prototype'][_0x4ab18a(0x641)]=function(_0x37677b,_0x254130){const _0x4be442=_0x4ab18a;if(this[_0x4be442(0x962)]())return _0x254130;const _0x10e001=this[_0x4be442(0x3d1)](),_0x4115ff=_0x37677b;let _0x159052=[],_0x3a116f=[];_0x159052['push'](this[_0x4be442(0x90e)][_0x4be442(0x2c0)],this[_0x4be442(0x90e)][_0x4be442(0x451)]),_0x3a116f[_0x4be442(0x448)](this[_0x4be442(0x90e)][_0x4be442(0x60d)],this[_0x4be442(0x90e)][_0x4be442(0xab9)]);const _0x377253=this[_0x4be442(0x82d)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x37fda1=this[_0x4be442(0x82d)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x29dd85=this[_0x4be442(0x82d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x277e57=this[_0x4be442(0x82d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x159052=_0x159052[_0x4be442(0x11d)](_0x4115ff['traitObjects']()[_0x4be442(0x71a)](_0x37f80c=>_0x37f80c&&_0x37f80c[_0x4be442(0x7d0)][_0x4be442(0x378)](_0x377253)?Number(RegExp['$1']):0x0)),_0x3a116f=_0x3a116f['concat'](_0x4115ff[_0x4be442(0x9aa)]()[_0x4be442(0x71a)](_0x1ab547=>_0x1ab547&&_0x1ab547[_0x4be442(0x7d0)][_0x4be442(0x378)](_0x37fda1)?Number(RegExp['$1'])/0x64:0x0)),_0x159052=_0x159052[_0x4be442(0x11d)](_0x10e001[_0x4be442(0x9aa)]()[_0x4be442(0x71a)](_0x37bcc2=>_0x37bcc2&&_0x37bcc2['note']['match'](_0x29dd85)?Number(RegExp['$1']):0x0)),_0x3a116f=_0x3a116f['concat'](_0x10e001['traitObjects']()[_0x4be442(0x71a)](_0x1ab5af=>_0x1ab5af&&_0x1ab5af['note'][_0x4be442(0x378)](_0x277e57)?Number(RegExp['$1'])/0x64:0x0)),this['item']()['note'][_0x4be442(0x378)](_0x29dd85)&&_0x159052['push'](Number(RegExp['$1'])),this[_0x4be442(0x925)]()[_0x4be442(0x7d0)]['match'](_0x277e57)&&_0x3a116f[_0x4be442(0x448)](Number(RegExp['$1'])),_0x254130=_0x159052[_0x4be442(0x985)]((_0x232b6c,_0x1fb920)=>_0x232b6c-_0x1fb920,_0x254130),_0x254130>0x0&&(_0x4be442(0x32b)==='vfdjW'?_0x254130=_0x3a116f[_0x4be442(0x985)]((_0x13bf59,_0x13ca61)=>_0x13bf59*(0x1-_0x13ca61),_0x254130):(_0x28c1be=_0x1a0756[_0x4be442(0x173)]()[_0x4be442(0x9f)],_0x5181e2=_0x4e380a[_0x4be442(0x173)]()[_0x4be442(0x665)])),_0x254130;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x439)]=Game_Action['prototype'][_0x4ab18a(0x9a6)],Game_Action['prototype'][_0x4ab18a(0x9a6)]=function(_0x588b85,_0x307708){const _0x42f4ce=_0x4ab18a;_0x307708=_0x307708*this[_0x42f4ce(0x3cf)][_0x42f4ce(0x483)],_0x307708+=this[_0x42f4ce(0x3cf)][_0x42f4ce(0x802)]*(_0x307708>=0x0?0x1:-0x1),_0x307708=this[_0x42f4ce(0x7b1)](_0x42f4ce(0x15b),_0x588b85,_0x307708,![]),_0x307708=this[_0x42f4ce(0x589)](_0x307708),_0x307708=Math[_0x42f4ce(0x1e2)](_0x307708),this['_executedValue']=_0x307708,this[_0x42f4ce(0x272)]=this[_0x42f4ce(0x272)]||0x0,this[_0x42f4ce(0x272)]+=_0x307708,VisuMZ[_0x42f4ce(0x94c)][_0x42f4ce(0x439)][_0x42f4ce(0x45b)](this,_0x588b85,_0x307708),this[_0x42f4ce(0x7b1)](_0x42f4ce(0x66a),_0x588b85,_0x307708,!![]);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x589)]=function(_0x2bd107){const _0x1468db=_0x4ab18a;if(this[_0x1468db(0x776)]())return _0x2bd107;return _0x2bd107=this['applySoftDamageCap'](_0x2bd107),_0x2bd107=this[_0x1468db(0x493)](_0x2bd107),_0x2bd107;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x776)]=function(){const _0x50b539=_0x4ab18a,_0x1650bd=/<BYPASS DAMAGE CAP>/i;if(this[_0x50b539(0x925)]()[_0x50b539(0x7d0)][_0x50b539(0x378)](_0x1650bd))return!![];if(this[_0x50b539(0x3d1)]()[_0x50b539(0x9aa)]()[_0x50b539(0x7ae)](_0x586888=>_0x586888&&_0x586888[_0x50b539(0x7d0)][_0x50b539(0x378)](_0x1650bd)))return!![];return!VisuMZ[_0x50b539(0x94c)][_0x50b539(0x3f5)][_0x50b539(0x486)][_0x50b539(0x558)];},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x61e)]=function(_0x1736ad){const _0x4b8b9c=_0x4ab18a;if(!VisuMZ[_0x4b8b9c(0x94c)][_0x4b8b9c(0x3f5)][_0x4b8b9c(0x486)][_0x4b8b9c(0xad6)])return _0x1736ad;const _0x4daabb=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x4b8b9c(0x925)]()['note'][_0x4b8b9c(0x378)](_0x4daabb))return!![];if(this[_0x4b8b9c(0x3d1)]()['traitObjects']()[_0x4b8b9c(0x7ae)](_0x3e0dfc=>_0x3e0dfc&&_0x3e0dfc['note']['match'](_0x4daabb)))return!![];const _0x190e04=_0x1736ad<0x0?-0x1:0x1;_0x1736ad=Math[_0x4b8b9c(0x27f)](_0x1736ad);let _0x1eed0e=this['subject']()[_0x4b8b9c(0xaaa)]();this['item']()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x1eed0e+=Number(RegExp['$1'])/0x64);_0x1eed0e=_0x1eed0e[_0x4b8b9c(0x65f)](0.01,0x1);const _0x5a649e=this['getHardDamageCap'](),_0x4cc8b4=_0x1eed0e*_0x5a649e;if(_0x1736ad>_0x4cc8b4&&_0x5a649e>_0x4cc8b4){if('Pkgfq'==='XJJaT'){this['commandName'](_0x4c4acc)['match'](/\\I\[(\d+)\]/i);const _0x231322=_0x588952(_0x113e1a['$1'])||0x0,_0x2e0736=this[_0x4b8b9c(0x1a3)](_0x26560b),_0x7398ac=_0x2e0736['x']+_0x1d2bc3['floor']((_0x2e0736[_0x4b8b9c(0x999)]-_0x13a510['iconWidth'])/0x2),_0xe2b2bd=_0x2e0736['y']+(_0x2e0736[_0x4b8b9c(0x428)]-_0x15a75a['iconHeight'])/0x2;this[_0x4b8b9c(0x803)](_0x231322,_0x7398ac,_0xe2b2bd);}else{_0x1736ad-=_0x4cc8b4;const _0x350f33=VisuMZ[_0x4b8b9c(0x94c)]['Settings'][_0x4b8b9c(0x486)][_0x4b8b9c(0x7d1)],_0xe6386d=Math['max'](0x1-_0x1736ad/((_0x5a649e-_0x4cc8b4)*_0x350f33+_0x1736ad),0.01);_0x1736ad*=_0xe6386d,_0x1736ad+=_0x4cc8b4;}}return _0x1736ad*_0x190e04;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x3b9)]=function(){const _0x203a95=_0x4ab18a;if(this[_0x203a95(0x925)]()[_0x203a95(0x7d0)][_0x203a95(0x378)](/<DAMAGE CAP:[ ](\d+)>/i))return Number(RegExp['$1']);else{if(_0x203a95(0x8d2)!==_0x203a95(0xa9a))return this[_0x203a95(0x3d1)]()[_0x203a95(0x4b1)]();else this[_0x203a95(0x5d2)](_0x3ed8df,_0x100c4b);}},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x493)]=function(_0x2f108c){const _0x610749=_0x4ab18a;let _0x152b00=this['getHardDamageCap']();return _0x2f108c[_0x610749(0x65f)](-_0x152b00,_0x152b00);},VisuMZ[_0x4ab18a(0x94c)]['Game_Action_apply']=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x9a8)],Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x9a8)]=function(_0x4c48b8){const _0x1941b6=_0x4ab18a;this['applyBattleCoreJS'](_0x1941b6(0x107),_0x4c48b8,0x0,!![]),VisuMZ[_0x1941b6(0x94c)][_0x1941b6(0x70d)]['call'](this,_0x4c48b8),this[_0x1941b6(0x7b1)](_0x1941b6(0x81d),_0x4c48b8,this[_0x1941b6(0x952)]||0x0,!![]),this[_0x1941b6(0x4cd)](_0x4c48b8);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x7b1)]=function(_0x12d62e,_0x217f93,_0x85b81e,_0x312a12){const _0xa7c51f=_0x4ab18a;if(this[_0xa7c51f(0xef)]||this[_0xa7c51f(0x2b4)])return;_0x85b81e=_0x85b81e||0x0;const _0x4a9bd3=_0x85b81e,_0x4477a2=VisuMZ['BattleCore']['Settings']['Mechanics'],_0x30b83c=_0x12d62e['format']('');if(_0x4477a2[_0x30b83c]){if(_0xa7c51f(0x137)===_0xa7c51f(0x137)){_0x85b81e=_0x4477a2[_0x30b83c][_0xa7c51f(0x45b)](this,_0x85b81e,_0x217f93);if(_0x312a12)_0x85b81e=_0x4a9bd3;}else this[_0xa7c51f(0xa86)](_0xa7c51f(0x1b8));}let _0x1096ab=VisuMZ['BattleCore'][_0xa7c51f(0x4ae)](this[_0xa7c51f(0x925)](),_0x12d62e[_0xa7c51f(0x278)](''));if(VisuMZ[_0xa7c51f(0x94c)]['JS'][_0x1096ab]){_0x85b81e=VisuMZ[_0xa7c51f(0x94c)]['JS'][_0x1096ab][_0xa7c51f(0x45b)](this,this['subject'](),_0x217f93,this[_0xa7c51f(0x925)](),_0x85b81e);if(_0x312a12)_0x85b81e=_0x4a9bd3;}for(const _0x31fe73 of this[_0xa7c51f(0x3d1)]()['traitObjects']()){if(!_0x31fe73)continue;_0x1096ab=VisuMZ[_0xa7c51f(0x94c)]['createKeyJS'](_0x31fe73,_0x12d62e[_0xa7c51f(0x278)](_0xa7c51f(0x301)));if(VisuMZ['BattleCore']['JS'][_0x1096ab]){_0x85b81e=VisuMZ[_0xa7c51f(0x94c)]['JS'][_0x1096ab][_0xa7c51f(0x45b)](this,this[_0xa7c51f(0x3d1)](),_0x217f93,_0x31fe73,_0x85b81e);if(_0x312a12)_0x85b81e=_0x4a9bd3;}}for(const _0x4512e2 of _0x217f93[_0xa7c51f(0x9aa)]()){if(!_0x4512e2)continue;_0x1096ab=VisuMZ[_0xa7c51f(0x94c)][_0xa7c51f(0x4ae)](_0x4512e2,_0x12d62e[_0xa7c51f(0x278)](_0xa7c51f(0x95a)));if(VisuMZ[_0xa7c51f(0x94c)]['JS'][_0x1096ab]){_0x85b81e=VisuMZ[_0xa7c51f(0x94c)]['JS'][_0x1096ab][_0xa7c51f(0x45b)](this,this['subject'](),_0x217f93,_0x4512e2,_0x85b81e);if(_0x312a12)_0x85b81e=_0x4a9bd3;}}return _0x85b81e;},Game_Action[_0x4ab18a(0x49d)]['actionBattleCoreJS']=function(_0x162151){const _0x51959e=_0x4ab18a,_0x43f876=this[_0x51959e(0x272)]||0x0,_0x3f30d1=VisuMZ['BattleCore'][_0x51959e(0x3f5)][_0x51959e(0x1c6)],_0x3a14fb=_0x162151['format']('');if(_0x3f30d1[_0x3a14fb]){if(_0x51959e(0x971)===_0x51959e(0x971))_0x3f30d1[_0x3a14fb][_0x51959e(0x45b)](this,_0x43f876);else{if(this['_growDuration']<=0x0)return;if(!this[_0x51959e(0x8b7)])return;const _0x545f1b=this['_growDuration'],_0x4c3109=this[_0x51959e(0x26b)],_0x16278e=this[_0x51959e(0x4d2)];_0x3ddc78[_0x51959e(0x1fc)]?(this[_0x51959e(0x4f5)]=this[_0x51959e(0x9f8)](this[_0x51959e(0x4f5)],this[_0x51959e(0x436)],_0x545f1b,_0x4c3109,_0x16278e),this[_0x51959e(0x1f5)]=this[_0x51959e(0x9f8)](this['_growY'],this['_targetGrowY'],_0x545f1b,_0x4c3109,_0x16278e)):(this[_0x51959e(0x4f5)]=(this[_0x51959e(0x4f5)]*(_0x545f1b-0x1)+this[_0x51959e(0x436)])/_0x545f1b,this[_0x51959e(0x1f5)]=(this[_0x51959e(0x1f5)]*(_0x545f1b-0x1)+this[_0x51959e(0xcd)])/_0x545f1b);this[_0x51959e(0x949)]--;if(this['_growDuration']<=0x0)this[_0x51959e(0x9e)]();}}let _0x430228=VisuMZ[_0x51959e(0x94c)]['createKeyJS'](this[_0x51959e(0x925)](),_0x162151);VisuMZ[_0x51959e(0x94c)]['JS'][_0x430228]&&(_0x51959e(0xa1c)!=='AjKHF'?VisuMZ[_0x51959e(0x94c)]['JS'][_0x430228]['call'](this,this[_0x51959e(0x3d1)](),this[_0x51959e(0x3d1)](),this[_0x51959e(0x925)](),_0x43f876):(this[_0x51959e(0x14e)]=new _0xff5334(),this[_0x51959e(0x19a)](this['_effectsContainer'])));for(const _0x2219b7 of this[_0x51959e(0x3d1)]()['traitObjects']()){if(_0x51959e(0x187)===_0x51959e(0x187)){if(!_0x2219b7)continue;_0x430228=VisuMZ[_0x51959e(0x94c)][_0x51959e(0x4ae)](_0x2219b7,_0x162151);if(VisuMZ[_0x51959e(0x94c)]['JS'][_0x430228]){if(_0x51959e(0x698)!==_0x51959e(0x698))return _0x4a3d6c['BattleCore'][_0x51959e(0x6b5)]['call'](this,_0x1af058);else VisuMZ[_0x51959e(0x94c)]['JS'][_0x430228][_0x51959e(0x45b)](this,this['subject'](),this[_0x51959e(0x3d1)](),_0x2219b7,_0x43f876);}}else return _0x26b67e[_0x51959e(0xa47)](_0x3ddbe0=>_0x3ddbe0['isDead']());}},Game_Action[_0x4ab18a(0x49d)]['speed']=function(){const _0x24e027=_0x4ab18a;return VisuMZ[_0x24e027(0x94c)][_0x24e027(0x3f5)]['Mechanics'][_0x24e027(0x415)][_0x24e027(0x45b)](this);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x660)]=function(){const _0x15df98=_0x4ab18a;return VisuMZ[_0x15df98(0x94c)][_0x15df98(0x3f5)][_0x15df98(0x1c6)][_0x15df98(0x4a2)];},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x34b)]=function(){const _0x18fdd0=_0x4ab18a;return this[_0x18fdd0(0x925)]()[_0x18fdd0(0x7d0)]['match'](/<JS TARGETS>/i);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x1c8)]=function(){const _0x83518e=_0x4ab18a;if(!this[_0x83518e(0x4b0)]&&this[_0x83518e(0x3d1)]()[_0x83518e(0x1fb)]())return![];if(this[_0x83518e(0x34b)]())return!![];return typeof this[_0x83518e(0x925)]()[_0x83518e(0x7f8)]===_0x83518e(0x1f7);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x62c)]=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x990)],Game_Action['prototype']['isForOpponent']=function(){const _0x2bdc52=_0x4ab18a;return this[_0x2bdc52(0x1c8)]()&&!this[_0x2bdc52(0x34b)]()?this[_0x2bdc52(0x623)]():VisuMZ[_0x2bdc52(0x94c)][_0x2bdc52(0x62c)][_0x2bdc52(0x45b)](this);},Game_Action[_0x4ab18a(0x49d)]['isForOpponentBattleCore']=function(){const _0x54c63c=_0x4ab18a,_0xff3395=this['item']()[_0x54c63c(0x7f8)];return _0xff3395[_0x54c63c(0x378)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x507)]=Game_Action[_0x4ab18a(0x49d)]['isForFriend'],Game_Action[_0x4ab18a(0x49d)]['isForFriend']=function(){const _0x41cd41=_0x4ab18a;return this[_0x41cd41(0x1c8)]()&&!this['isCustomBattleScope']()?this[_0x41cd41(0x5c3)]():VisuMZ[_0x41cd41(0x94c)]['Game_Action_isForFriend'][_0x41cd41(0x45b)](this);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x5c3)]=function(){const _0x233dd0=_0x4ab18a,_0xb9ff0c=this[_0x233dd0(0x925)]()[_0x233dd0(0x7f8)];return _0xb9ff0c[_0x233dd0(0x378)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x35e)]=Game_Action['prototype'][_0x4ab18a(0x970)],Game_Action[_0x4ab18a(0x49d)]['isForRandom']=function(){const _0x36c8a0=_0x4ab18a;return this[_0x36c8a0(0x1c8)]()&&!this[_0x36c8a0(0x34b)]()?this[_0x36c8a0(0x648)]():VisuMZ['BattleCore']['Game_Action_isForRandom'][_0x36c8a0(0x45b)](this);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x648)]=function(){const _0x25d127=_0x4ab18a,_0x503f1b=this['item']()['scope'];return _0x503f1b[_0x25d127(0x378)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x92)]=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x42d)],Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x42d)]=function(){const _0x3e693c=_0x4ab18a;if(this[_0x3e693c(0x1c8)]()&&!this[_0x3e693c(0x34b)]()){if(_0x3e693c(0x55f)===_0x3e693c(0x55f))return this[_0x3e693c(0x416)]();else{const _0x3e9c80=_0x16ba40[_0x3e693c(0x2ac)](this['_item']),_0x212984=_0x28fa07[_0x3e693c(0x3f8)][_0x3e9c80];if(!_0x212984)return this[_0x3e693c(0x843)]();const _0x370b6b=_0x3e693c(0xa3f)[_0x3e693c(0x278)](this[_0x3e693c(0x8b9)][_0x3e693c(0x938)][_0x3e693c(0x626)]),_0x1743e7=[null,_0x5d7f02['hp'],_0x3ab5c6['mp'],_0x2ef266['hp'],_0x4b9a56['mp'],_0x37d45a['hp'],_0x2f1a36['mp']][this[_0x3e693c(0x8b9)]['damage'][_0x3e693c(0x626)]];return _0x212984[_0x370b6b][_0x3e693c(0x278)](_0x1743e7);}}else{if(_0x3e693c(0x88c)===_0x3e693c(0x88c))return VisuMZ['BattleCore'][_0x3e693c(0x92)]['call'](this);else{const _0x12b3ef=_0x2e5089[_0x3e693c(0x7d0)];if(_0x12b3ef[_0x3e693c(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x411365(_0x5e6440['$1'])*0.01;else{if(_0x12b3ef[_0x3e693c(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x51a15b(_0x20ecd7['$1'])||0x0;}}}},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x416)]=function(){const _0x2a0d6e=_0x4ab18a,_0x2b9d63=this[_0x2a0d6e(0x925)]()['scope'];if(_0x2b9d63['match'](/RANDOM/i))return![];if(_0x2b9d63['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x2b9d63[_0x2a0d6e(0x378)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore']['Game_Action_needsSelection'][_0x2a0d6e(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x9fd)]=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x98e)],Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x98e)]=function(){const _0x4a5d9c=_0x4ab18a;let _0x36273f=[];return this['isBattleCoreTargetScope']()?'wMiZM'!==_0x4a5d9c(0x9b5)?_0x57ad7c[_0x4a5d9c(0x14b)]()?(this[_0x4a5d9c(0x406)](),this[_0x4a5d9c(0x5ca)]()):_0x2b4a07[_0x4a5d9c(0x94c)][_0x4a5d9c(0x44f)][_0x4a5d9c(0x45b)](this):_0x36273f=this[_0x4a5d9c(0xaaf)]():_0x36273f=VisuMZ['BattleCore'][_0x4a5d9c(0x9fd)][_0x4a5d9c(0x45b)](this),_0x36273f=this['applyTargetFilters'](_0x36273f),_0x36273f;},Game_Action['prototype']['makeTargetsBattleCore']=function(){const _0x13c9f1=_0x4ab18a;let _0x5a771d=[];const _0x390d2a=String(this['item']()['scope']),_0x43bb42=VisuMZ[_0x13c9f1(0x94c)][_0x13c9f1(0x4ae)](this['item'](),_0x13c9f1(0x2ab));if(VisuMZ[_0x13c9f1(0x94c)]['JS'][_0x43bb42]){_0x5a771d=VisuMZ[_0x13c9f1(0x94c)]['Game_Action_makeTargets']['call'](this);const _0x419d55=VisuMZ[_0x13c9f1(0x94c)][_0x13c9f1(0x4ae)](this[_0x13c9f1(0x925)](),'Targets');return _0x5a771d=VisuMZ[_0x13c9f1(0x94c)]['JS'][_0x419d55][_0x13c9f1(0x45b)](this,this[_0x13c9f1(0x3d1)](),_0x5a771d),this[_0x13c9f1(0x94b)](_0x5a771d);}if(_0x390d2a[_0x13c9f1(0x378)](/(\d+) RANDOM ANY/i)){let _0x1307c6=Number(RegExp['$1']);while(_0x1307c6--){const _0xfc5465=Math[_0x13c9f1(0x81a)](0x2)===0x0?this['opponentsUnit']():this[_0x13c9f1(0xadc)]();_0x5a771d[_0x13c9f1(0x448)](_0xfc5465[_0x13c9f1(0x27b)]());}return this[_0x13c9f1(0x94b)](_0x5a771d);}if(_0x390d2a[_0x13c9f1(0x378)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if('bvRGA'==='bvRGA'){let _0x31cb16=Number(RegExp['$1']);while(_0x31cb16--){_0x5a771d['push'](this['opponentsUnit']()[_0x13c9f1(0x27b)]());}return this[_0x13c9f1(0x94b)](_0x5a771d);}else return this[_0x13c9f1(0xd1)]===_0x13c9f1(0xaed)?this[_0x13c9f1(0x47e)]():_0x166dc1[_0x13c9f1(0x94c)][_0x13c9f1(0x114)][_0x13c9f1(0x45b)](this);}if(_0x390d2a[_0x13c9f1(0x378)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x13c9f1(0x90d)!==_0x13c9f1(0x46c)){let _0x352f79=Number(RegExp['$1']);while(_0x352f79--){_0x13c9f1(0x68f)==='ZxSlX'?_0x5a771d[_0x13c9f1(0x448)](this[_0x13c9f1(0xadc)]()[_0x13c9f1(0x27b)]()):this[_0x13c9f1(0x36f)]['x']=-this[_0x13c9f1(0x36f)][_0x13c9f1(0x999)]-0x4;}return this[_0x13c9f1(0x94b)](_0x5a771d);}else return this[_0x13c9f1(0x648)]();}if(_0x390d2a[_0x13c9f1(0x378)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5a771d[_0x13c9f1(0x448)](...this['friendsUnit']()['aliveMembers']()['filter'](_0x31d9ed=>_0x31d9ed!==this[_0x13c9f1(0x3d1)]())),this[_0x13c9f1(0x94b)](_0x5a771d);return VisuMZ[_0x13c9f1(0x94c)][_0x13c9f1(0x9fd)]['call'](this);},Game_Action[_0x4ab18a(0x49d)]['randomTargets']=function(_0x480d41){const _0x3c98f4=_0x4ab18a,_0x3dd91b=[];for(let _0x3897ec=0x0;_0x3897ec<this['numTargets']();_0x3897ec++){_0x3dd91b[_0x3c98f4(0x448)](_0x480d41['trueRandomTarget']());}return _0x3dd91b;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0xaf4)]=function(_0x63b2ab){const _0xa53872=_0x4ab18a;if(!this[_0xa53872(0x925)]())return _0x63b2ab;const _0x4e689a=this[_0xa53872(0x925)]()[_0xa53872(0x7d0)];return _0x4e689a[_0xa53872(0x378)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x63b2ab[_0xa53872(0x8d3)](this['subject']()),_0x63b2ab;},VisuMZ['BattleCore'][_0x4ab18a(0xa9b)]=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x792)],Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x792)]=function(_0xef035b,_0x24932c){const _0x3fb53d=_0x4ab18a;VisuMZ[_0x3fb53d(0x94c)][_0x3fb53d(0xa9b)][_0x3fb53d(0x45b)](this,_0xef035b,_0x24932c);if(!_0xef035b[_0x3fb53d(0x1b0)]())return;for(const _0x4acf0f of this[_0x3fb53d(0x3d1)]()['attackStates']()){if(_0x3fb53d(0x504)!==_0x3fb53d(0x504)){const _0x4e12ff=[];for(let _0x30f5fc=0x0;_0x30f5fc<this[_0x3fb53d(0x4f0)]();_0x30f5fc++){_0x4e12ff['push'](_0x2ec1d2[_0x3fb53d(0x27b)]());}return _0x4e12ff;}else{if(_0x4acf0f===_0xef035b[_0x3fb53d(0x2cc)]()){let _0x19ded1=_0x24932c[_0x3fb53d(0x9d5)];_0x19ded1*=_0xef035b[_0x3fb53d(0xaa2)](_0x4acf0f),_0x19ded1*=this[_0x3fb53d(0x3d1)]()[_0x3fb53d(0xa35)](_0x4acf0f),_0x19ded1*=this[_0x3fb53d(0x481)](_0xef035b),Math['random']()<_0x19ded1&&(_0x3fb53d(0x26c)===_0x3fb53d(0x26c)?(_0xef035b[_0x3fb53d(0x9d6)]=!![],this[_0x3fb53d(0x762)](_0xef035b)):(this[_0x3fb53d(0x52d)]['x']=_0x542f1e[_0x3fb53d(0x999)]*0xa,this[_0x3fb53d(0x52d)]['y']=_0xb6f8fb[_0x3fb53d(0x428)]*0xa));}}}},VisuMZ[_0x4ab18a(0x94c)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x8e5)],Game_Action[_0x4ab18a(0x49d)]['itemEffectAddNormalState']=function(_0x316a66,_0x18a9ba){const _0x4d213e=_0x4ab18a;VisuMZ[_0x4d213e(0x94c)][_0x4d213e(0x3c8)][_0x4d213e(0x45b)](this,_0x316a66,_0x18a9ba);if(!_0x316a66[_0x4d213e(0x1b0)]())return;if(_0x18a9ba[_0x4d213e(0x9f7)]!==_0x316a66['deathStateId']())return;let _0x3bd2bf=_0x18a9ba[_0x4d213e(0x9d5)];if(!this['isCertainHit']()){if(_0x4d213e(0x862)!==_0x4d213e(0x471))_0x3bd2bf*=_0x316a66[_0x4d213e(0xaa2)](_0x18a9ba[_0x4d213e(0x9f7)]),_0x3bd2bf*=this[_0x4d213e(0x481)](_0x316a66);else{if(_0x1361eb[_0x4d213e(0x7ce)](_0x44afd3))return![];}}if(Math[_0x4d213e(0xeb)]()<_0x3bd2bf){if(_0x4d213e(0xec)===_0x4d213e(0x336))return this[_0x4d213e(0x742)]()['some'](_0x45c3e8=>_0x45c3e8[_0x4d213e(0x59f)]());else _0x316a66[_0x4d213e(0x9d6)]=!![],this[_0x4d213e(0x762)](_0x316a66);}},VisuMZ['BattleCore']['Game_Action_applyGlobal']=Game_Action['prototype']['applyGlobal'],Game_Action['prototype']['applyGlobal']=function(){const _0x2c7604=_0x4ab18a;VisuMZ[_0x2c7604(0x94c)]['Game_Action_applyGlobal'][_0x2c7604(0x45b)](this),this[_0x2c7604(0x6df)](),this[_0x2c7604(0x199)]();},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x6df)]=function(){const _0x4d8fa1=_0x4ab18a;if(!SceneManager[_0x4d8fa1(0xae)]())return;const _0x1c19c5=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5452cd=this[_0x4d8fa1(0x925)]()[_0x4d8fa1(0x7d0)][_0x4d8fa1(0x378)](_0x1c19c5);if(_0x5452cd)for(const _0x155007 of _0x5452cd){if(_0x4d8fa1(0x778)===_0x4d8fa1(0x2eb))_0x105a12=this['_baseLineStack'][this['_baseLineStack'][_0x4d8fa1(0x820)]-0x1];else{if(!_0x155007)continue;_0x155007['match'](_0x1c19c5);const _0xd45e34=String(RegExp['$1'])[_0x4d8fa1(0x9e7)](',')[_0x4d8fa1(0x71a)](_0x4e841c=>String(_0x4e841c)[_0x4d8fa1(0x3a3)]()),_0x364763=_0xd45e34[_0x4d8fa1(0x71a)](_0x37a53f=>DataManager[_0x4d8fa1(0x96)](_0x37a53f));for(const _0x5592e5 of _0x364763){const _0x65dedb=$dataCommonEvents[_0x5592e5];if(_0x65dedb){if('HZvJE'!==_0x4d8fa1(0x839)){if(_0x557e4b[_0x4d8fa1(0x626)]===0x0)this['requestMotion'](_0x4d8fa1(0x806));else{if(_0x335f96[_0x4d8fa1(0x626)]===0x1)this[_0x4d8fa1(0x27c)](_0x4d8fa1(0x49f));else _0x22b516[_0x4d8fa1(0x626)]===0x2&&this[_0x4d8fa1(0x27c)]('missile');}this['startWeaponAnimation'](_0x37e74a[_0x4d8fa1(0x84e)]);}else $gameTemp['reserveCommonEvent'](_0x5592e5);}}}}},DataManager[_0x4ab18a(0x96)]=function(_0x53b506){const _0x107495=_0x4ab18a;_0x53b506=_0x53b506['toUpperCase']()[_0x107495(0x3a3)](),this[_0x107495(0x814)]=this[_0x107495(0x814)]||{};if(this[_0x107495(0x814)][_0x53b506])return this[_0x107495(0x814)][_0x53b506];for(const _0x270469 of $dataCommonEvents){if(!_0x270469)continue;let _0x2c845f=_0x270469[_0x107495(0x8ff)];_0x2c845f=_0x2c845f['replace'](/\x1I\[(\d+)\]/gi,''),_0x2c845f=_0x2c845f['replace'](/\\I\[(\d+)\]/gi,''),this[_0x107495(0x814)][_0x2c845f[_0x107495(0x9e5)]()[_0x107495(0x3a3)]()]=_0x270469['id'];}return this[_0x107495(0x814)][_0x53b506]||0x0;},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x199)]=function(){const _0x51e192=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;const _0x21bf9d=VisuMZ['BattleCore'][_0x51e192(0x3f5)][_0x51e192(0x1c6)];if(_0x21bf9d['SwitchCritical']){if(_0x51e192(0x39d)===_0x51e192(0x212)){const _0x45e374=this[_0x51e192(0x69e)];_0x5c4759[_0x51e192(0x94c)][_0x51e192(0xa5a)][_0x51e192(0x45b)](this,_0x3b3bc0),this['setupHpGaugeSprite'](_0x578ac9);if(_0x45e374!==_0x2db530)this[_0x51e192(0x683)]();}else $gameSwitches[_0x51e192(0x77c)](_0x21bf9d[_0x51e192(0x398)],![]);}_0x21bf9d[_0x51e192(0x647)]&&$gameSwitches[_0x51e192(0x77c)](_0x21bf9d[_0x51e192(0x647)],![]);if(_0x21bf9d[_0x51e192(0x99f)]){if(_0x51e192(0x5e8)!=='VwnfL'){_0x47c889['prototype'][_0x51e192(0x384)][_0x51e192(0x45b)](this);if(!_0x1e0751[_0x51e192(0x332)]())this[_0x51e192(0x5ea)]();}else $gameVariables[_0x51e192(0x77c)](_0x21bf9d['VariableDmg'],0x0);}_0x21bf9d[_0x51e192(0x560)]&&$gameVariables['setValue'](_0x21bf9d[_0x51e192(0x560)],0x0);},Game_Action[_0x4ab18a(0x49d)][_0x4ab18a(0x4cd)]=function(_0xe1d1e2){const _0x4c3389=_0x4ab18a;if(!SceneManager['isSceneBattle']())return;if(!_0xe1d1e2)return;const _0xb95371=_0xe1d1e2['result'](),_0x52f52e=VisuMZ[_0x4c3389(0x94c)]['Settings'][_0x4c3389(0x1c6)];if(_0x52f52e[_0x4c3389(0x398)]&&_0xb95371[_0x4c3389(0x33e)]){if('BKBER'===_0x4c3389(0x782))$gameSwitches[_0x4c3389(0x77c)](_0x52f52e[_0x4c3389(0x398)],!![]);else{_0x1bc25f[_0x4c3389(0x94c)]['Game_Action_itemEffectAddAttackState'][_0x4c3389(0x45b)](this,_0x161bf6,_0x26c6e3);if(!_0x4ba212['isImmortal']())return;for(const _0x2b4f49 of this[_0x4c3389(0x3d1)]()[_0x4c3389(0x2b2)]()){if(_0x2b4f49===_0x38044b[_0x4c3389(0x2cc)]()){let _0x5c4423=_0x4a2a80[_0x4c3389(0x9d5)];_0x5c4423*=_0x22414f[_0x4c3389(0xaa2)](_0x2b4f49),_0x5c4423*=this[_0x4c3389(0x3d1)]()['attackStatesRate'](_0x2b4f49),_0x5c4423*=this[_0x4c3389(0x481)](_0x3de782),_0x4b4c28[_0x4c3389(0xeb)]()<_0x5c4423&&(_0x5b2514[_0x4c3389(0x9d6)]=!![],this[_0x4c3389(0x762)](_0x487c9b));}}}}_0x52f52e[_0x4c3389(0x647)]&&(_0xb95371['missed']||_0xb95371[_0x4c3389(0x61c)])&&$gameSwitches[_0x4c3389(0x77c)](_0x52f52e[_0x4c3389(0x647)],!![]);if(_0x52f52e['VariableDmg']){if('ZGwzP'===_0x4c3389(0x808))this[_0x4c3389(0x1ac)]=_0x1f23fa;else{let _0x70987=$gameVariables[_0x4c3389(0x7ce)](_0x52f52e[_0x4c3389(0x99f)]);_0xb95371[_0x4c3389(0x9c0)]>0x0&&(_0x70987+=Math[_0x4c3389(0x27f)](_0xb95371[_0x4c3389(0x9c0)])),$gameVariables[_0x4c3389(0x77c)](_0x52f52e[_0x4c3389(0x99f)],_0x70987);}}if(_0x52f52e[_0x4c3389(0x560)]){if(_0x4c3389(0x3d7)===_0x4c3389(0x9b3)){if(_0x1fa3e1[_0x4c3389(0x6f4)][_0x4c3389(0xcc)]())return!![];this[_0x4c3389(0x2d7)]='';}else{let _0x28a846=$gameVariables[_0x4c3389(0x7ce)](_0x52f52e[_0x4c3389(0x560)]);if(_0xb95371['hpDamage']<0x0){if('fdGWn'!=='sAZwQ')_0x28a846+=Math['abs'](_0xb95371[_0x4c3389(0x9c0)]);else{_0x5d947b['BattleCore'][_0x4c3389(0x3c8)]['call'](this,_0x2e82e5,_0x478cd9);if(!_0x1b83a0[_0x4c3389(0x1b0)]())return;if(_0xcc814d[_0x4c3389(0x9f7)]!==_0x99952d['deathStateId']())return;let _0x47ed3c=_0x3d496b[_0x4c3389(0x9d5)];!this[_0x4c3389(0x962)]()&&(_0x47ed3c*=_0x5a9071['stateRate'](_0x488d81[_0x4c3389(0x9f7)]),_0x47ed3c*=this[_0x4c3389(0x481)](_0x16e0b3)),_0xfec475['random']()<_0x47ed3c&&(_0x4478c8[_0x4c3389(0x9d6)]=!![],this[_0x4c3389(0x762)](_0x1ce993));}}$gameVariables[_0x4c3389(0x77c)](_0x52f52e['VariableHeal'],_0x28a846);}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa14)]=Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x78b)],Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x78b)]=function(){const _0x5c6df1=_0x4ab18a;VisuMZ['BattleCore'][_0x5c6df1(0xa14)][_0x5c6df1(0x45b)](this),this[_0x5c6df1(0x87b)]();},Game_BattlerBase['prototype'][_0x4ab18a(0x87b)]=function(){this['_immortal']=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase[_0x4ab18a(0x49d)]['refresh'],Game_BattlerBase[_0x4ab18a(0x49d)]['refresh']=function(){const _0x4c712d=_0x4ab18a;this[_0x4c712d(0x8de)]={},VisuMZ[_0x4c712d(0x94c)][_0x4c712d(0x216)][_0x4c712d(0x45b)](this);},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x907)]=function(_0x41e0d4){const _0x6a016e=_0x4ab18a;return this['_cache']=this[_0x6a016e(0x8de)]||{},this[_0x6a016e(0x8de)][_0x41e0d4]!==undefined;},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x4b1)]=function(){const _0x3af8ab=_0x4ab18a;if(this[_0x3af8ab(0x8de)][_0x3af8ab(0x4b1)]!==undefined)return this['_cache'][_0x3af8ab(0x4b1)];const _0x528c78=/<DAMAGE CAP:[ ](\d+)>/i,_0x1ac4bb=this[_0x3af8ab(0x9aa)]()[_0x3af8ab(0x71a)](_0x567e41=>_0x567e41&&_0x567e41[_0x3af8ab(0x7d0)][_0x3af8ab(0x378)](_0x528c78)?Number(RegExp['$1']):0x0);let _0x56f03c=_0x1ac4bb[_0x3af8ab(0x820)]>0x0?Math[_0x3af8ab(0x877)](..._0x1ac4bb):0x0;if(_0x56f03c<=0x0)_0x56f03c=VisuMZ[_0x3af8ab(0x94c)]['Settings'][_0x3af8ab(0x486)][_0x3af8ab(0xabb)];return this['_cache'][_0x3af8ab(0x4b1)]=_0x56f03c,this[_0x3af8ab(0x8de)][_0x3af8ab(0x4b1)];},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0xaaa)]=function(){const _0x4bcd17=_0x4ab18a;if(this[_0x4bcd17(0x8de)]['softDamageCap']!==undefined)return this['_cache']['softDamageCap'];let _0x4ecb6a=VisuMZ[_0x4bcd17(0x94c)][_0x4bcd17(0x3f5)]['Damage'][_0x4bcd17(0x67d)];const _0x2f09e7=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x3972f6=this[_0x4bcd17(0x9aa)]()[_0x4bcd17(0x71a)](_0x419988=>_0x419988&&_0x419988[_0x4bcd17(0x7d0)][_0x4bcd17(0x378)](_0x2f09e7)?Number(RegExp['$1'])/0x64:0x0);return _0x4ecb6a=_0x3972f6['reduce']((_0x132205,_0x4c3c51)=>_0x132205+_0x4c3c51,_0x4ecb6a),this[_0x4bcd17(0x8de)][_0x4bcd17(0x9cc)]=_0x4ecb6a,this[_0x4bcd17(0x8de)][_0x4bcd17(0x9cc)]['clamp'](0.01,0x1);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x373)]=Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x4c1)],Game_BattlerBase[_0x4ab18a(0x49d)]['die']=function(){const _0xbd820b=_0x4ab18a;VisuMZ['BattleCore'][_0xbd820b(0x373)][_0xbd820b(0x45b)](this);if(SceneManager['isSceneBattle']()){if(_0xbd820b(0x615)===_0xbd820b(0xe4)){if(this[_0xbd820b(0x207)][_0xbd820b(0x7ae)](_0x265ff2=>_0x265ff2['item']()&&_0x265ff2[_0xbd820b(0xb4)]()))return!![];}else this[_0xbd820b(0x27c)](_0xbd820b(0x43c));}},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x173)]=function(){const _0x6a4ac=_0x4ab18a;if(!SceneManager[_0x6a4ac(0xae)]())return null;if(!SceneManager[_0x6a4ac(0xa10)][_0x6a4ac(0x6f4)])return null;return SceneManager[_0x6a4ac(0xa10)][_0x6a4ac(0x6f4)][_0x6a4ac(0x89f)](this);},Game_BattlerBase[_0x4ab18a(0x49d)]['svBattlerAnchorX']=function(){const _0x4169d4=_0x4ab18a;return VisuMZ[_0x4169d4(0x94c)][_0x4169d4(0x3f5)][_0x4169d4(0x56a)]['AnchorX'];},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x19e)]=function(){const _0x25d552=_0x4ab18a;return VisuMZ[_0x25d552(0x94c)][_0x25d552(0x3f5)]['Actor'][_0x25d552(0x4ad)];},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x4de)]=function(){const _0x66926a=_0x4ab18a;if(this[_0x66926a(0x526)]&&this[_0x66926a(0x526)]())return VisuMZ[_0x66926a(0x94c)][_0x66926a(0x3f5)]['Actor'][_0x66926a(0x2cf)];else{if(_0x66926a(0x7d4)===_0x66926a(0x4f7)){const _0x26d4f5=_0x5364fd[_0x66926a(0x94c)][_0x66926a(0x3f5)]['BattleLayout'];if(_0x26d4f5['StatusWindowSelectableBackHide'])return;_0x36e6ce[_0x66926a(0x49d)]['drawItemBackground'][_0x66926a(0x45b)](this,_0x2402d6);}else return VisuMZ[_0x66926a(0x94c)][_0x66926a(0x3f5)][_0x66926a(0x582)][_0x66926a(0x2cf)];}},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x726)]=function(){return!![];},Game_BattlerBase[_0x4ab18a(0x49d)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype']['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x20a)]=function(_0x2b7d89){const _0x1aebed=_0x4ab18a;if(!_0x2b7d89)return 0x0;let _0x512a30=0x0;const _0x260f5b=_0x2b7d89[_0x1aebed(0x7d0)];if(_0x260f5b[_0x1aebed(0x378)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x1aebed(0x704)!==_0x1aebed(0x2cb))_0x512a30+=Number(RegExp['$1']);else{if(this[_0x1aebed(0x4be)])return this[_0x1aebed(0x4be)];return this[_0x1aebed(0x4be)]=_0x1579f4[_0x1aebed(0xa10)][_0x1aebed(0xaf0)](),this[_0x1aebed(0x4be)];}}return _0x260f5b[_0x1aebed(0x378)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1aebed(0x4ca)===_0x1aebed(0x4ca)?_0x512a30+=Number(RegExp['$1']):this[_0x1aebed(0x617)]-=0x10),_0x512a30;},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x74a)]=function(_0x165d9d){const _0x57f7e6=_0x4ab18a;if(!_0x165d9d)return 0x0;let _0x43e1b6=0x0;const _0x491f8c=_0x165d9d['note'];_0x491f8c['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&('spFsM'===_0x57f7e6(0x96b)?_0x43e1b6+=Number(RegExp['$1']):_0x20b616[_0x57f7e6(0x9eb)](_0x57f7e6(0x506),this['actorCommandCancelTPB']['bind'](this)));if(_0x491f8c[_0x57f7e6(0x378)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x57f7e6(0x2b3)===_0x57f7e6(0x977)){this[_0x57f7e6(0x999)]=_0x2f23cc[_0x57f7e6(0x999)],this[_0x57f7e6(0x428)]=_0x29a342['height'];const _0x1d64e5=0x1;this[_0x57f7e6(0x443)]['x']=_0x1d64e5,this['scale']['y']=_0x1d64e5,this['x']=0x0,this['y']=0x0;}else _0x43e1b6+=Number(RegExp['$2']);}return _0x43e1b6;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x995)]=Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x920)],Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x920)]=function(_0x2f830a){const _0x40f5e3=_0x4ab18a;if(_0x2f830a===this[_0x40f5e3(0x2cc)]()&&this[_0x40f5e3(0x1b0)]())return!![];return VisuMZ[_0x40f5e3(0x94c)][_0x40f5e3(0x995)]['call'](this,_0x2f830a);},Game_BattlerBase[_0x4ab18a(0x49d)]['isImmortal']=function(){return this['_immortal'];},Game_BattlerBase[_0x4ab18a(0x49d)]['setImmortal']=function(_0x24ce5b){const _0x1e6bf1=_0x4ab18a;if(_0x24ce5b){if(_0x1e6bf1(0x39b)===_0x1e6bf1(0x39b))this[_0x1e6bf1(0x78d)]();else{if(this['_dimmerSprite']){const _0xc32ed5=this[_0x1e6bf1(0x45c)][_0x1e6bf1(0x6db)],_0x32c9b4=this[_0x1e6bf1(0x999)]-0x8,_0x43c155=this[_0x1e6bf1(0x428)],_0x21ca4a=this[_0x1e6bf1(0x5cf)],_0x8aa48d=_0x2015e8[_0x1e6bf1(0xdb)](),_0x3d13a8=_0x3014a2[_0x1e6bf1(0x722)]();this['_dimmerSprite']['x']=0x4,_0xc32ed5[_0x1e6bf1(0x3d6)](_0x32c9b4,_0x43c155),_0xc32ed5[_0x1e6bf1(0x3f2)](0x0,0x0,_0x32c9b4,_0x21ca4a,_0x3d13a8,_0x8aa48d,!![]),_0xc32ed5['fillRect'](0x0,_0x21ca4a,_0x32c9b4,_0x43c155-_0x21ca4a*0x2,_0x8aa48d),_0xc32ed5['gradientFillRect'](0x0,_0x43c155-_0x21ca4a,_0x32c9b4,_0x21ca4a,_0x8aa48d,_0x3d13a8,!![]),this['_dimmerSprite']['setFrame'](0x0,0x0,_0x32c9b4,_0x43c155);}}}else this[_0x1e6bf1(0x158)]();},Game_BattlerBase['prototype'][_0x4ab18a(0x78d)]=function(){const _0x19f96b=_0x4ab18a;if(this[_0x19f96b(0x9b4)]())return;this[_0x19f96b(0x651)]=!![],this[_0x19f96b(0x9d6)]=![];},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x158)]=function(){const _0x1f764d=_0x4ab18a,_0x82d27b=this[_0x1f764d(0x3ab)]();this[_0x1f764d(0x651)]=![],_0x82d27b&&this[_0x1f764d(0x9d6)]&&this[_0x1f764d(0x4c1)](),this[_0x1f764d(0x9d6)]=![],this['refresh'](),this[_0x1f764d(0x9b4)]()&&_0x82d27b&&(this[_0x1f764d(0x36d)](),this['requestMotionRefresh']());},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x75d)]=Game_BattlerBase['prototype'][_0x4ab18a(0x89c)],Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x89c)]=function(){const _0x38890a=_0x4ab18a;if(!this[_0x38890a(0x14f)]())return![];return VisuMZ[_0x38890a(0x94c)][_0x38890a(0x75d)][_0x38890a(0x45b)](this);},Game_BattlerBase['prototype']['canAttackBattleCore']=function(){const _0x365d93=_0x4ab18a;for(const _0xbbaad7 of this[_0x365d93(0x9aa)]()){if(!_0xbbaad7)continue;if(_0xbbaad7[_0x365d93(0x7d0)][_0x365d93(0x378)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x4ab18a(0x707)]=Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x76b)],Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x76b)]=function(){const _0x52bcd5=_0x4ab18a;if(!this[_0x52bcd5(0x956)]())return![];return VisuMZ['BattleCore'][_0x52bcd5(0x707)][_0x52bcd5(0x45b)](this);},Game_BattlerBase[_0x4ab18a(0x49d)][_0x4ab18a(0x956)]=function(){const _0x465a24=_0x4ab18a;for(const _0x297958 of this[_0x465a24(0x9aa)]()){if('fpMcH'===_0x465a24(0xa55)){if(!_0x297958)continue;if(_0x297958['note'][_0x465a24(0x378)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else this['bitmap'][_0x465a24(0xa6f)]=_0x30aa80[_0x465a24(0x94c)][_0x465a24(0x3f5)][_0x465a24(0x56a)][_0x465a24(0x4a9)];}return!![];},Game_BattlerBase['prototype'][_0x4ab18a(0x5e5)]=function(){const _0x14bf47=_0x4ab18a;for(const _0x14285f of this['traitObjects']()){if(!_0x14285f)continue;if(_0x14285f[_0x14bf47(0x7d0)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler['prototype'][_0x4ab18a(0x660)]=function(){const _0x18a0c2=_0x4ab18a;return VisuMZ['BattleCore'][_0x18a0c2(0x3f5)][_0x18a0c2(0x1c6)]['AllowRandomSpeed'];},VisuMZ[_0x4ab18a(0x94c)]['Game_Battler_regenerateAll']=Game_Battler[_0x4ab18a(0x49d)]['regenerateAll'],Game_Battler['prototype']['regenerateAll']=function(){const _0x235480=_0x4ab18a;if(SceneManager[_0x235480(0xae)]()&&$gameTroop[_0x235480(0x326)]()<=0x0)return;if(SceneManager[_0x235480(0xae)]()&&BattleManager[_0x235480(0x14b)]()&&this[_0x235480(0x510)]===Graphics[_0x235480(0x3d9)]){if('kXFKw'===_0x235480(0x8e1))return;else this['tpbActorSwitchConditionsMet']()?this[_0x235480(0x3bd)]():this[_0x235480(0x785)]();}this[_0x235480(0x510)]=Graphics[_0x235480(0x3d9)],this[_0x235480(0xa66)]('PreRegenerateJS'),VisuMZ[_0x235480(0x94c)][_0x235480(0x833)][_0x235480(0x45b)](this),this[_0x235480(0x9a2)](),this[_0x235480(0xa66)]('PostRegenerateJS');},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x9a2)]=function(){const _0x20dceb=_0x4ab18a;if(SceneManager[_0x20dceb(0xae)]())for(const _0x13ac0d of this[_0x20dceb(0x9aa)]()){if(!_0x13ac0d)continue;this[_0x20dceb(0x388)](_0x13ac0d);}},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x388)]=function(_0xff0a95){const _0x437893=_0x4ab18a;if(!Imported[_0x437893(0x1fc)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x437893(0x9b4)]())return;if(this[_0x437893(0x793)]())return;if(_0xff0a95[_0x437893(0x7d0)][_0x437893(0x378)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x37f3fc=Number(RegExp['$1']);$gameTemp[_0x437893(0x2a4)]([this],_0x37f3fc,![],![]);}},VisuMZ['BattleCore'][_0x4ab18a(0x8d5)]=Game_Battler[_0x4ab18a(0x49d)]['startTpbTurn'],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xd9)]=function(){const _0x2ebb4f=_0x4ab18a;this['processBattleCoreJS']('PreStartTurnJS'),VisuMZ[_0x2ebb4f(0x94c)]['Game_Battler_startTpbTurn']['call'](this),this['processBattleCoreJS']('PostStartTurnJS');},VisuMZ['BattleCore'][_0x4ab18a(0x9b6)]=Game_Battler['prototype'][_0x4ab18a(0x2e0)],Game_Battler['prototype']['onTurnEnd']=function(){const _0x536c0f=_0x4ab18a;this[_0x536c0f(0xa66)](_0x536c0f(0x653)),VisuMZ[_0x536c0f(0x94c)][_0x536c0f(0x9b6)][_0x536c0f(0x45b)](this),this[_0x536c0f(0xa66)]('PostEndTurnJS');},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa66)]=function(_0x54dc05){const _0x171a1e=_0x4ab18a;if(this[_0x171a1e(0xef)]||this['_tempActor'])return;const _0x311421=VisuMZ[_0x171a1e(0x94c)][_0x171a1e(0x3f5)][_0x171a1e(0x1c6)];if(_0x311421[_0x54dc05])_0x311421[_0x54dc05][_0x171a1e(0x45b)](this);for(const _0x221e52 of this[_0x171a1e(0x9aa)]()){if(_0x171a1e(0x5ce)==='PBHNr'){const _0x3628d4=this[_0x171a1e(0x605)],_0x578695=this[_0x171a1e(0xf7)];_0x3628d4&&_0x3628d4!==this[_0x171a1e(0x6c5)]&&_0x3628d4[_0x171a1e(0x3d1)]()===_0x578695&&_0x3628d4['actionBattleCoreJS']('PreEndActionJS'),_0x4414ad['BattleCore'][_0x171a1e(0x250)][_0x171a1e(0x45b)](this),_0x3628d4&&_0x3628d4!==this[_0x171a1e(0x6c5)]&&_0x3628d4[_0x171a1e(0x3d1)]()===_0x578695&&_0x3628d4[_0x171a1e(0x901)](_0x171a1e(0x27e)),this[_0x171a1e(0x1e8)](this[_0x171a1e(0xe6)]()),this[_0x171a1e(0x6c5)]=this[_0x171a1e(0x605)];}else{if(!_0x221e52)continue;key=VisuMZ[_0x171a1e(0x94c)][_0x171a1e(0x4ae)](_0x221e52,_0x54dc05),VisuMZ[_0x171a1e(0x94c)]['JS'][key]&&VisuMZ[_0x171a1e(0x94c)]['JS'][key][_0x171a1e(0x45b)](this,this,this,_0x221e52,0x0);}}},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7ca)]=function(){const _0x599db0=_0x4ab18a;return VisuMZ['BattleCore'][_0x599db0(0x3f5)][_0x599db0(0x56a)][_0x599db0(0x441)]||![];},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x766)]=function(){const _0x1d4e05=_0x4ab18a;if(this['isWaiting']()){if('MJXkp'!==_0x1d4e05(0x998)){const _0x5321b6=_0x2548ae[_0x1d4e05(0x94c)]['Settings']['BattleLayout'];_0x5321b6[_0x1d4e05(0x2a1)]?this[_0x1d4e05(0x52c)]=_0x1c83e8[_0x1d4e05(0xac4)](_0x5321b6[_0x1d4e05(0x2a1)]):_0x14a12a[_0x1d4e05(0x49d)][_0x1d4e05(0x79b)]['call'](this);}else{if(this[_0x1d4e05(0x7ca)]()){if(this[_0x1d4e05(0x207)][_0x1d4e05(0x7ae)](_0x4e82f7=>_0x4e82f7[_0x1d4e05(0x925)]()&&_0x4e82f7[_0x1d4e05(0xa29)]())){if(_0x1d4e05(0x939)===_0x1d4e05(0x2da))_0x5e9f2e=_0x7e78e+_0xd4add0[_0x1d4e05(0x718)]/0x2-0x4,_0x5c522c=_0x33139b-_0x1253ce['iconHeight']/0x2;else return!![];}}else{if(_0x1d4e05(0x8cf)!==_0x1d4e05(0x8cf))this[_0x1d4e05(0xa86)](_0x1d4e05(0x38f));else{if(this['_actions'][_0x1d4e05(0x7ae)](_0x531ac4=>_0x531ac4[_0x1d4e05(0x925)]()&&_0x531ac4[_0x1d4e05(0xb4)]()))return!![];}}}}if(BattleManager['isTpb']()&&this[_0x1d4e05(0x6ca)]===_0x1d4e05(0x130)){if(this[_0x1d4e05(0x7ca)]())return this[_0x1d4e05(0x4e0)]()&&this['currentAction']()[_0x1d4e05(0x925)]()&&this[_0x1d4e05(0x4e0)]()[_0x1d4e05(0xa29)]();else{if('CaNqi'===_0x1d4e05(0x5b0)){let _0x2e7449=_0x4830ec(_0x17760e['$1']);while(_0x2e7449--){_0x5eda2d[_0x1d4e05(0x448)](this['opponentsUnit']()['trueRandomTarget']());}return this[_0x1d4e05(0x94b)](_0x4ebae9);}else return this[_0x1d4e05(0x4e0)]()&&this[_0x1d4e05(0x4e0)]()[_0x1d4e05(0x925)]()&&this['currentAction']()[_0x1d4e05(0xb4)]();}}return![];},Game_Battler['prototype']['isCharging']=function(){const _0x531776=_0x4ab18a;if(BattleManager[_0x531776(0x14b)]()&&this['_tpbState']===_0x531776(0x130))return _0x531776(0x491)!==_0x531776(0x491)?_0x3a6683[_0x531776(0xa47)](_0x426b36=>_0x426b36['isAlive']()&&_0x426b36!==_0x484e07):this[_0x531776(0x7ca)]()?_0x531776(0x40b)!==_0x531776(0x3b6)?this['currentAction']()&&this[_0x531776(0x4e0)]()['item']()&&!this[_0x531776(0x4e0)]()['isMagical']():_0x395cb8(_0x46a989['$1'])*0.01:this['currentAction']()&&this['currentAction']()[_0x531776(0x925)]()&&!this[_0x531776(0x4e0)]()[_0x531776(0xb4)]();return![];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x735)]=Game_Battler[_0x4ab18a(0x49d)]['clearDamagePopup'],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x297)]=function(){const _0x341b1d=_0x4ab18a;VisuMZ[_0x341b1d(0x94c)][_0x341b1d(0x735)][_0x341b1d(0x45b)](this),this['_damagePopupArray']=[];},Game_Battler[_0x4ab18a(0x49d)]['isDamagePopupRequested']=function(){const _0x5636e1=_0x4ab18a;if(!this['_damagePopupArray'])this[_0x5636e1(0x297)]();return this['_damagePopupArray'][_0x5636e1(0x820)]>0x0;},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa93)]=function(){const _0x19241b=_0x4ab18a;if(!SceneManager[_0x19241b(0xae)]())return;if(!this['_damagePopupArray'])this['clearDamagePopup']();this['createSeparateDamagePopups']();const _0x41702e=this['battler']();if(_0x41702e)_0x41702e['setupDamagePopup']();},Game_Battler[_0x4ab18a(0x49d)]['createSeparateDamagePopups']=function(){const _0x5d89e0=_0x4ab18a,_0x5696e4=this[_0x5d89e0(0x2d4)]();if(_0x5696e4[_0x5d89e0(0x6fb)]||_0x5696e4['evaded']){if('dBvKx'==='SXvxb')_0x30f6a7[_0x5d89e0(0x448)](new _0x43c63d(_0xc249c9));else{const _0x38a834=JsonEx[_0x5d89e0(0x6e6)](_0x5696e4);_0x38a834[_0x5d89e0(0xed)]=![],_0x38a834['mpDamage']=0x0,this[_0x5d89e0(0x51a)][_0x5d89e0(0x448)](_0x38a834);}}if(_0x5696e4[_0x5d89e0(0xed)]){const _0x28d985=JsonEx[_0x5d89e0(0x6e6)](_0x5696e4);_0x28d985[_0x5d89e0(0x6fb)]=![],_0x28d985[_0x5d89e0(0x61c)]=![],_0x28d985[_0x5d89e0(0x9f6)]=0x0,this['_damagePopupArray']['push'](_0x28d985);}if(_0x5696e4[_0x5d89e0(0x9f6)]!==0x0){if(_0x5d89e0(0x1ed)!==_0x5d89e0(0x269)){const _0x2c9721=JsonEx[_0x5d89e0(0x6e6)](_0x5696e4);_0x2c9721[_0x5d89e0(0x6fb)]=![],_0x2c9721['evaded']=![],_0x2c9721[_0x5d89e0(0xed)]=![],this['_damagePopupArray'][_0x5d89e0(0x448)](_0x2c9721);}else this['startMotion'](_0x41882d[_0x5d89e0(0x30f)]()[_0x5d89e0(0x9ad)]||_0x5d89e0(0x38f));}},Game_Battler['prototype'][_0x4ab18a(0x4dd)]=function(){const _0x1c4fb2=_0x4ab18a;if(!this[_0x1c4fb2(0x51a)])this[_0x1c4fb2(0x297)]();if(VisuMZ[_0x1c4fb2(0x94c)][_0x1c4fb2(0x3f5)][_0x1c4fb2(0x486)][_0x1c4fb2(0xaa8)])return this[_0x1c4fb2(0x51a)]['shift']();else{if(_0x1c4fb2(0x34c)==='MEYdD')_0x844a82[_0x1c4fb2(0x94c)]['Sprite_Actor_update'][_0x1c4fb2(0x45b)](this),this[_0x1c4fb2(0x1cd)]&&(this[_0x1c4fb2(0x9d)](),this[_0x1c4fb2(0x5a7)]());else return this[_0x1c4fb2(0x51a)][_0x1c4fb2(0x74b)]();}},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x79a)]=function(_0x2f6629,_0x4be7bc){const _0x2e942b=_0x4ab18a;if(!SceneManager[_0x2e942b(0xae)]())return;if(!this['battler']())return;if(_0x2f6629[_0x2e942b(0x820)]<=0x0)return;_0x4be7bc=_0x4be7bc||{},_0x4be7bc[_0x2e942b(0x1bd)]=_0x4be7bc[_0x2e942b(0x1bd)]||_0x2e942b(0xa24),_0x4be7bc[_0x2e942b(0x2f0)]=_0x4be7bc[_0x2e942b(0x2f0)]||[0x0,0x0,0x0,0x0],_0x4be7bc['flashDuration']=_0x4be7bc[_0x2e942b(0x905)]||0x0,this[_0x2e942b(0x173)]()[_0x2e942b(0x79a)](_0x2f6629,_0x4be7bc);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x652)]=function(_0x1cf7f7,_0x5ca51f,_0x46c203){const _0x440658=_0x4ab18a;if(!SceneManager[_0x440658(0xae)]())return;if(!this[_0x440658(0x173)]())return;if(_0x5ca51f['length']<=0x0)return;_0x46c203=_0x46c203||{},_0x46c203[_0x440658(0x1bd)]=_0x46c203['textColor']||_0x440658(0xa24),_0x46c203[_0x440658(0x2f0)]=_0x46c203[_0x440658(0x2f0)]||[0x0,0x0,0x0,0x0],_0x46c203[_0x440658(0x905)]=_0x46c203[_0x440658(0x905)]||0x0,this[_0x440658(0x173)]()[_0x440658(0x652)](_0x1cf7f7,_0x5ca51f,_0x46c203);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x13f)]=function(){const _0x58b395=_0x4ab18a;if(this[_0x58b395(0x793)]())return![];if(this[_0x58b395(0x3ab)]()&&this['isAppeared']())return!![];if(this[_0x58b395(0x6dd)]()&&this['hasSvBattler']()){if(this['isDead']()&&this[_0x58b395(0xe5)]())return![];}else{if(this[_0x58b395(0x9b4)]())return![];}return!![];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x8d9)]=Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x186)],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x186)]=function(){const _0x4560ce=_0x4ab18a;VisuMZ['BattleCore'][_0x4560ce(0x8d9)]['call'](this),this[_0x4560ce(0x99)]();},Game_Battler['prototype'][_0x4ab18a(0x8dc)]=function(){return!![];},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x946)]=function(){return![];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x55c)]=Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x794)],Game_Battler['prototype'][_0x4ab18a(0x794)]=function(_0x593686){const _0x15e331=_0x4ab18a;VisuMZ[_0x15e331(0x94c)]['Game_Battler_onBattleStart'][_0x15e331(0x45b)](this,_0x593686),this['onBattleStartBattleCore'](_0x593686);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x88d)]=function(_0x34ea12){const _0x30b81f=_0x4ab18a;this[_0x30b81f(0x453)](![]);},VisuMZ[_0x4ab18a(0x94c)]['Game_Battler_performActionStart']=Game_Battler['prototype'][_0x4ab18a(0x21d)],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x21d)]=function(_0x22c9b2){const _0x3ee214=_0x4ab18a;VisuMZ[_0x3ee214(0x94c)]['Game_Battler_performActionStart'][_0x3ee214(0x45b)](this,_0x22c9b2);if(!_0x22c9b2[_0x3ee214(0x2f1)]()){if(_0x3ee214(0x387)!==_0x3ee214(0x1ab)){const _0x3c5e42=this['battler']();_0x3c5e42&&_0x3c5e42['stepForward']();}else return this[_0x3ee214(0x1c8)]()&&!this['isCustomBattleScope']()?this[_0x3ee214(0x648)]():_0x4f9bf3[_0x3ee214(0x94c)][_0x3ee214(0x35e)][_0x3ee214(0x45b)](this);}this[_0x3ee214(0x453)](![]);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x71e)]=function(){const _0x44c7cb=_0x4ab18a,_0x5724bd=this[_0x44c7cb(0xac0)];this[_0x44c7cb(0xac0)]=![];if(BattleManager[_0x44c7cb(0x150)]()&&this[_0x44c7cb(0x3bb)]()){if('pulTK'===_0x44c7cb(0xa8d)){const _0xf4e39e=this[_0x44c7cb(0x173)]();if(_0xf4e39e&&_0x5724bd)_0xf4e39e[_0x44c7cb(0xcb)]();return;}else{if(!this[_0x44c7cb(0x816)])return;this[_0x44c7cb(0x69e)]!==this[_0x44c7cb(0x816)]['_battler']&&this[_0x44c7cb(0x816)]['setup'](this[_0x44c7cb(0x69e)]);const _0x495fc3=this[_0x44c7cb(0x9f0)]();this[_0x44c7cb(0xe0)]=this[_0x44c7cb(0xe0)]||_0x4907f0['prototype'][_0x44c7cb(0x6fe)](),this[_0x44c7cb(0x816)]['x']=_0x2e7143[_0x44c7cb(0x1e2)]((_0x495fc3+_0x257a9f['iconWidth'])/0x2)+0x8,this[_0x44c7cb(0x816)]['y']=this[_0x44c7cb(0xe0)]/0x2;const _0x324cef=_0x52fcc4[_0x44c7cb(0x94c)][_0x44c7cb(0x3f5)][_0x44c7cb(0x582)];this[_0x44c7cb(0x816)]['x']+=_0x324cef['AttachStateOffsetX']||0x0,this[_0x44c7cb(0x816)]['y']+=_0x324cef[_0x44c7cb(0x1a4)]||0x0;}}const _0x48c1f4=this[_0x44c7cb(0x173)]();if(_0x48c1f4)_0x48c1f4[_0x44c7cb(0x198)]();this[_0x44c7cb(0x453)](![]),this[_0x44c7cb(0x19b)]();},Game_Battler['prototype'][_0x4ab18a(0x885)]=function(_0x194de6){const _0x57d7cf=_0x4ab18a;if(_0x194de6['isAttack']())this[_0x57d7cf(0x9c)]();else{if(_0x194de6['isGuard']())this[_0x57d7cf(0x27c)](_0x57d7cf(0x368));else{if(_0x194de6[_0x57d7cf(0xa29)]())this[_0x57d7cf(0x27c)](_0x57d7cf(0x850));else{if(_0x194de6[_0x57d7cf(0x5c4)]()){if(_0x57d7cf(0xaf)!=='EGRNn'){let _0x374b0c=_0x1f5301(_0x5362ae['$1'])[_0x57d7cf(0x277)](/,/g,'')[_0x57d7cf(0x9e5)]()[_0x57d7cf(0x3a3)]();_0x1ebd68[_0x57d7cf(0x94c)][_0x57d7cf(0x3b7)][_0x374b0c]=_0x376a36['id'];}else{if(_0x194de6[_0x57d7cf(0x925)]()[_0x57d7cf(0x938)][_0x57d7cf(0x626)]>0x0)this[_0x57d7cf(0x9c)]();else{if('CXozu'!=='CXozu'){const _0x1fbbbe=_0x2a2104[_0x57d7cf(0x798)]('['+_0x50f284['$1'][_0x57d7cf(0x378)](/\d+/g)+']');for(const _0x3b0a8b of _0x1fbbbe){if(!_0x2c84d0[_0x57d7cf(0x7ce)](_0x3b0a8b))return!![];}return![];}else this[_0x57d7cf(0x27c)](_0x57d7cf(0x30c));}}}else _0x194de6['isItem']()&&this['requestMotion'](_0x57d7cf(0x925));}}}},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x9dd)]=function(){const _0x5033a7=_0x4ab18a;return $dataSystem[_0x5033a7(0x22b)][0x0];},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x503)]=function(){const _0x2de557=_0x4ab18a,_0x277151=this[_0x2de557(0x9dd)]();return _0x277151?_0x277151[_0x2de557(0x84e)]:0x0;},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x254)]=function(_0x5493fa){const _0x44880d=_0x4ab18a;if(!$gameSystem['isSideView']())return;const _0x15f723=this['battler'](),_0x35a692=_0x5493fa[_0x44880d(0x173)]();if(!_0x15f723||!_0x35a692)return;const _0x342665=_0x35a692[_0x44880d(0x520)],_0x2ff79d=_0x35a692[_0x44880d(0x5e7)];this[_0x44880d(0x7c6)](_0x342665,_0x2ff79d,0x0,![],_0x44880d(0xfb),-0x1),_0x15f723[_0x44880d(0x1ec)]();const _0x37777d=VisuMZ['BattleCore'][_0x44880d(0x3f5)]['ActionSequence'];let _0x35a555=(_0x35a692[_0x44880d(0x999)]+_0x15f723[_0x44880d(0x999)])/0x2;_0x35a555*=this[_0x44880d(0x526)]()?0x1:-0x1;let _0x25d6c0=_0x37777d['StepDistanceY']*(this[_0x44880d(0x526)]()?0x1:-0x1);_0x5493fa[_0x44880d(0x37b)](_0x35a555,_0x25d6c0,0x0,![],'Linear'),_0x35a692['updatePosition']();},Game_Battler['prototype'][_0x4ab18a(0x27c)]=function(_0x2c667d){const _0x30a489=_0x4ab18a;if(SceneManager[_0x30a489(0xae)]()){const _0x227032=this[_0x30a489(0x173)]();_0x227032&&(_0x227032[_0x30a489(0x405)](_0x2c667d),['swing',_0x30a489(0x806),_0x30a489(0xada)][_0x30a489(0xb2)](_0x2c667d)&&(_0x30a489(0x403)!==_0x30a489(0x8ee)?this['performWeaponAnimation']():_0x2665c2['setValue'](_0x35c799[_0x30a489(0x398)],!![])));}this[_0x30a489(0x99)]();},Game_Battler['prototype'][_0x4ab18a(0x5de)]=function(){},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x1ad)]=function(_0x246357){const _0x3a738b=_0x4ab18a;if(SceneManager['isSceneBattle']()){if(_0x3a738b(0x4b8)!==_0x3a738b(0x4b8))_0x49872e[_0x3a738b(0x94c)][_0x3a738b(0x967)](_0x170683,_0x1abe3f);else{const _0x54b8d4=this[_0x3a738b(0x173)]();if(_0x54b8d4)_0x54b8d4['forceWeaponAnimation'](_0x246357);}}},Game_Battler[_0x4ab18a(0x49d)]['startAttackWeaponAnimation']=function(){const _0x152406=_0x4ab18a;if(SceneManager['isSceneBattle']()){if(_0x152406(0x5bf)===_0x152406(0x5bf)){const _0x149e8e=this['getAttackWeaponAnimationId']();this[_0x152406(0x1ad)](_0x149e8e);}else{if(_0x4f71d9['_forcedBattleLayout']!==_0x1ec9fe)return _0xcd857f[_0x152406(0x6ff)];if(this[_0x152406(0x4be)])return this[_0x152406(0x4be)];return this[_0x152406(0x4be)]=_0x460b95[_0x152406(0x94c)][_0x152406(0x3f5)][_0x152406(0x377)][_0x152406(0x472)][_0x152406(0x8f8)]()['trim'](),this[_0x152406(0x4be)]===_0x152406(0x9b7)&&!_0x318869['VisuMZ_3_SideviewBattleUI']&&(this['_battleLayoutStyle']='default'),this[_0x152406(0x4be)];}}},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa08)]=function(_0x277103,_0x31aad5){const _0x1df20b=_0x4ab18a;if(!_0x277103)return;if(!_0x277103[_0x1df20b(0x925)]())return;if(_0x277103[_0x1df20b(0x703)]())return;if(_0x277103[_0x1df20b(0x2f1)]())return;if(_0x277103[_0x1df20b(0xa28)]())return;let _0x14e7b0=0x0;const _0x24906e=VisuMZ[_0x1df20b(0x94c)]['Settings'][_0x1df20b(0x9d2)],_0x5c81e6=_0x277103[_0x1df20b(0x925)]()[_0x1df20b(0x7d0)];if(_0x5c81e6[_0x1df20b(0x378)](/<CAST ANIMATION: (\d+)>/i))_0x1df20b(0x9d4)!==_0x1df20b(0x9d4)?this[_0x1df20b(0x3e5)](_0x2fbe80)?_0x3d87e2['prepareCustomActionSequence']():this[_0x1df20b(0x328)](_0x974ff2,_0x3b7eb7,_0x29d1e7):_0x14e7b0=Number(RegExp['$1']);else{if(_0x5c81e6[_0x1df20b(0x378)](/<NO CAST ANIMATION>/i)){if(_0x1df20b(0x748)==='fAWEL'){this[_0x1df20b(0xa66)](_0x1df20b(0x299));const _0x4d05c7=this[_0x1df20b(0x1df)];_0x450240[_0x1df20b(0x94c)][_0x1df20b(0xa2d)][_0x1df20b(0x45b)](this),this[_0x1df20b(0x1df)]=_0x4d05c7+_0x1ef635['BattleCore'][_0x1df20b(0x3f5)][_0x1df20b(0x1c6)]['CalcEscapeRaiseJS'][_0x1df20b(0x45b)](this),this[_0x1df20b(0x317)](_0x1df20b(0x780));}else return;}else{if(_0x277103['isCertainHit']())_0x14e7b0=_0x24906e['CastCertain'];else{if(_0x277103[_0x1df20b(0x82d)]()){if(_0x1df20b(0x95e)!==_0x1df20b(0x95e))return this[_0x1df20b(0x41e)]>0x0;else _0x14e7b0=_0x24906e['CastPhysical'];}else _0x277103['isMagical']()&&(_0x14e7b0=_0x24906e[_0x1df20b(0x941)]);}}}_0x14e7b0>0x0&&$gameTemp[_0x1df20b(0x9b2)]([this],_0x14e7b0,!!_0x31aad5);},Game_Battler['prototype'][_0x4ab18a(0xa76)]=function(){const _0x39f3b6=_0x4ab18a;SoundManager[_0x39f3b6(0xa7d)]();let _0x2421ff=VisuMZ[_0x39f3b6(0x94c)][_0x39f3b6(0x3f5)][_0x39f3b6(0x9d2)][_0x39f3b6(0x8d7)];if(_0x2421ff>0x0){if(Imported['VisuMZ_0_CoreEngine'])_0x39f3b6(0x729)==='UtfVm'?this[_0x39f3b6(0xd1)]=_0x39f3b6(0x479):$gameTemp[_0x39f3b6(0x2a4)]([this],_0x2421ff);else{if(_0x39f3b6(0xa9e)!==_0x39f3b6(0xa9e))return _0xd6818f[_0x39f3b6(0xa10)][_0x39f3b6(0x6f4)][_0x39f3b6(0x1db)](_0x1dbd3b[0x0],_0x53e29f[0x1]),!![];else $gameTemp[_0x39f3b6(0x9b2)]([this],_0x2421ff);}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa46)]=Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x28a)],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x28a)]=function(){const _0x1e7903=_0x4ab18a;VisuMZ['BattleCore'][_0x1e7903(0xa46)][_0x1e7903(0x45b)](this),this['performFlinch']();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x178)]=Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xad)],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xad)]=function(){const _0x3efb22=_0x4ab18a;VisuMZ['BattleCore'][_0x3efb22(0x178)][_0x3efb22(0x45b)](this),this[_0x3efb22(0x723)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x845)]=Game_Battler[_0x4ab18a(0x49d)]['performEvasion'],Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa07)]=function(){const _0x26ad68=_0x4ab18a;VisuMZ[_0x26ad68(0x94c)][_0x26ad68(0x845)][_0x26ad68(0x45b)](this),this[_0x26ad68(0x723)]();},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x723)]=function(){const _0x471f0c=_0x4ab18a;if(!$gameSystem[_0x471f0c(0x332)]())return;if(this[_0x471f0c(0xac0)])return;this[_0x471f0c(0xac0)]=!![];const _0x4cb8ac=this[_0x471f0c(0x173)]();if(_0x4cb8ac)_0x4cb8ac[_0x471f0c(0x145)]();},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x19b)]=function(){const _0x3dda9d=_0x4ab18a;if(this[_0x3dda9d(0x9b4)]()&&this[_0x3dda9d(0x376)]!=='dead'){this[_0x3dda9d(0x27c)](_0x3dda9d(0x43c));return;}if(this[_0x3dda9d(0x9b4)]()&&this[_0x3dda9d(0x376)]===_0x3dda9d(0x43c))return;if(!!this[_0x3dda9d(0xfd)])return;if(this[_0x3dda9d(0x6dd)]()){if(!this[_0x3dda9d(0x92e)]()&&this!==BattleManager[_0x3dda9d(0xf7)]){if(this[_0x3dda9d(0x173)]())this[_0x3dda9d(0x173)]()[_0x3dda9d(0x1dc)]();}this['clearFreezeMotion']();return;}if(this[_0x3dda9d(0x376)]==='victory')return;if(this[_0x3dda9d(0x376)]===_0x3dda9d(0x88e)&&!BattleManager[_0x3dda9d(0x3bb)]())return;if(this[_0x3dda9d(0x376)]===_0x3dda9d(0x368)&&!BattleManager[_0x3dda9d(0x3bb)]())return;this[_0x3dda9d(0x186)]();if(this[_0x3dda9d(0x173)]()&&BattleManager[_0x3dda9d(0x3bb)]()){if(_0x3dda9d(0x12c)!==_0x3dda9d(0x498)){this[_0x3dda9d(0x173)]()['refreshMotion'](),this[_0x3dda9d(0x99)]();return;}else this[_0x3dda9d(0x27c)](_0x3dda9d(0x368));}},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x92e)]=function(){const _0x177135=_0x4ab18a;if(!this[_0x177135(0x394)]())return![];const _0x37c7ea=this[_0x177135(0x173)]();if(!_0x37c7ea)return![];const _0x499034=_0x37c7ea[_0x177135(0x1f8)];if(!_0x499034)return![];const _0x2bcd9f=_0x499034['_motion'];return _0x2bcd9f&&!_0x2bcd9f[_0x177135(0x29c)];},Game_Battler[_0x4ab18a(0x49d)]['isBattlerFlipped']=function(){const _0x5ad7dd=_0x4ab18a;return this[_0x5ad7dd(0x3ad)];},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x453)]=function(_0x512fc5){const _0x1e919d=_0x4ab18a;if(!$gameSystem[_0x1e919d(0x332)]())return;this[_0x1e919d(0x3ad)]=_0x512fc5;const _0x5e639b=this[_0x1e919d(0x173)]();if(_0x5e639b)_0x5e639b['updateFlip']();},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x240)]=function(_0x586d23,_0x5790f1,_0x368aea){const _0x1b6e9a=_0x4ab18a;if(!$gameSystem[_0x1b6e9a(0x332)]())return;const _0x3272d6=this[_0x1b6e9a(0x173)]();if(!_0x3272d6)return;if(_0x586d23===_0x3272d6[_0x1b6e9a(0x520)])return;let _0x558d95=![];if(this[_0x1b6e9a(0x526)]()){if(_0x586d23>_0x3272d6[_0x1b6e9a(0x520)])_0x558d95=!![];if(_0x586d23<_0x3272d6[_0x1b6e9a(0x520)])_0x558d95=![];}else{if(this['isEnemy']()){if(_0x586d23>_0x3272d6['_baseX'])_0x558d95=![];if(_0x586d23<_0x3272d6[_0x1b6e9a(0x520)])_0x558d95=!![];}};this[_0x1b6e9a(0x453)](_0x368aea?!_0x558d95:_0x558d95),_0x3272d6[_0x1b6e9a(0xfc)]();},Game_Battler['prototype'][_0x4ab18a(0x37b)]=function(_0x51f202,_0x560ff3,_0x28b9f6,_0x55d3af,_0x399dd4){const _0x3b0c6e=_0x4ab18a;if(!$gameSystem['isSideView']())return;const _0x50477f=this[_0x3b0c6e(0x173)]();if(!_0x50477f)return;if(_0x55d3af)this[_0x3b0c6e(0x240)](_0x51f202+_0x50477f[_0x3b0c6e(0x520)],_0x560ff3+_0x50477f[_0x3b0c6e(0x5e7)],![]);_0x51f202+=_0x50477f[_0x3b0c6e(0x520)]-_0x50477f['_homeX'],_0x560ff3+=_0x50477f[_0x3b0c6e(0x5e7)]-_0x50477f[_0x3b0c6e(0x665)],_0x50477f['startMove'](_0x51f202,_0x560ff3,_0x28b9f6);if(Imported['VisuMZ_0_CoreEngine'])_0x50477f['setMoveEasingType'](_0x399dd4||'Linear');},Game_Battler[_0x4ab18a(0x49d)]['moveBattlerToPoint']=function(_0x7c70e6,_0x238151,_0x4dea6c,_0x1eb354,_0x207752,_0x562c70){const _0x292f9a=_0x4ab18a;if(!$gameSystem['isSideView']())return;const _0x122dfb=this[_0x292f9a(0x173)]();if(!_0x122dfb)return;_0x562c70=_0x562c70||0x0;if(_0x562c70>0x0){if(_0x122dfb[_0x292f9a(0x520)]>_0x7c70e6)_0x7c70e6+=_0x122dfb[_0x292f9a(0x999)]/0x2+_0x562c70;if(_0x122dfb[_0x292f9a(0x520)]<_0x7c70e6)_0x7c70e6-=_0x122dfb[_0x292f9a(0x999)]/0x2+_0x562c70;}if(_0x1eb354)this[_0x292f9a(0x240)](_0x7c70e6,_0x238151,![]);_0x7c70e6-=_0x122dfb['_homeX'],_0x238151-=_0x122dfb[_0x292f9a(0x665)],_0x122dfb[_0x292f9a(0x6a1)](_0x7c70e6,_0x238151,_0x4dea6c);if(Imported[_0x292f9a(0x1fc)])_0x122dfb[_0x292f9a(0x3a6)](_0x207752||'Linear');},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x1a1)]=function(_0x5633f0,_0x5ec8f4,_0x4370cb){const _0x485895=_0x4ab18a;if(!$gameSystem[_0x485895(0x332)]())return;const _0x1f6946=this[_0x485895(0x173)]();if(!_0x1f6946)return;_0x1f6946[_0x485895(0xa3)](_0x5633f0,_0x5ec8f4,_0x4370cb);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x64d)]=function(_0x7c77b,_0x3685c5){const _0x96f8b6=_0x4ab18a;if(!$gameSystem[_0x96f8b6(0x332)]())return;const _0x416518=this[_0x96f8b6(0x173)]();if(!_0x416518)return;_0x416518[_0x96f8b6(0x8b1)](_0x7c77b,_0x3685c5);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x26f)]=function(_0x38cb7b,_0x39fb84,_0x10215a,_0x2b771b){const _0xac8c8e=_0x4ab18a;if(!$gameSystem['isSideView']())return;const _0x1ed07d=this[_0xac8c8e(0x173)]();if(!_0x1ed07d)return;_0x1ed07d[_0xac8c8e(0x121)](_0x38cb7b,_0x39fb84,_0x10215a,_0x2b771b);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x96c)]=function(_0x193327,_0x481d28,_0x3e0ddb,_0x5837be){const _0x3c8b72=_0x4ab18a;if(!$gameSystem['isSideView']())return;const _0x2d15a7=this['battler']();if(!_0x2d15a7)return;if(this['isActor']()){if(_0x3c8b72(0x323)===_0x3c8b72(0x323))_0x193327*=-0x1,_0x481d28*=-0x1;else{if(!_0x274dc1[_0x3c8b72(0x49d)][_0x3c8b72(0x5da)][_0x3c8b72(0x45b)](this,_0x4bd6df))return!![];if(!_0x23bd05[_0x3c8b72(0x49d)]['checkShowHideSwitchNotetags'][_0x3c8b72(0x45b)](this,_0x17b77b))return!![];if(!_0xd10ee6[_0x3c8b72(0x49d)]['checkShowHideSkillNotetags'][_0x3c8b72(0x45b)](this,_0xe21036))return!![];return![];}}_0x2d15a7[_0x3c8b72(0x643)](_0x193327,_0x481d28,_0x3e0ddb,_0x5837be);},Game_Battler['prototype']['growBattler']=function(_0x4c06d2,_0xf0af29,_0x4ebd15,_0x1d8329){const _0x501894=_0x4ab18a;if(!$gameSystem[_0x501894(0x332)]())return;const _0x259f97=this['battler']();if(!_0x259f97)return;_0x259f97[_0x501894(0x6a5)](_0x4c06d2,_0xf0af29,_0x4ebd15,_0x1d8329);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa94)]=function(_0x17a218,_0x2dbbf6,_0x2a6c1b){const _0x3e8092=_0x4ab18a;if(!$gameSystem[_0x3e8092(0x332)]())return;const _0x2d1dfd=this[_0x3e8092(0x173)]();if(!_0x2d1dfd)return;_0x2d1dfd['startOpacity'](_0x17a218,_0x2dbbf6,_0x2a6c1b);},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x99)]=function(){const _0x4e6e46=_0x4ab18a,_0x2e1178=!!this[_0x4e6e46(0xfd)];this['_freezeMotionData']=undefined,_0x2e1178&&(this['requestMotionRefresh'](),this[_0x4e6e46(0x92a)]());},Game_Battler[_0x4ab18a(0x49d)]['clearFreezeMotionForWeapons']=function(){const _0x546f45=_0x4ab18a;if(!SceneManager[_0x546f45(0xae)]())return;const _0x54ad9b=this[_0x546f45(0x173)]();if(!_0x54ad9b)return;let _0x1264fb=this['isActor']()?_0x54ad9b[_0x546f45(0x8b0)]:_0x54ad9b[_0x546f45(0x1f8)]['_weaponSprite'];if(_0x1264fb){if(_0x546f45(0x4cb)!=='NKtzt')_0x1264fb[_0x546f45(0x914)](0x0);else{const _0x23f730=_0x403be7[_0x546f45(0x49d)][_0x546f45(0xaf0)]();[_0x546f45(0x2d9),_0x546f45(0x5fb),_0x546f45(0x6b3),'border']['includes'](_0x23f730)&&(this[_0x546f45(0x43a)]=0x0);}}},Game_Battler['prototype'][_0x4ab18a(0xb0)]=function(_0x4cecc3,_0x187d76,_0x28be4d){const _0x2b3241=_0x4ab18a;if(this['isEnemy']()&&!this['hasSvBattler']())return;let _0x269de7=0x0,_0x4c2f18=0x0;_0x4cecc3[_0x2b3241(0x378)](/ATTACK[ ](\d+)/i)&&(_0x4c2f18=Number(RegExp['$1']),_0x4c2f18--);if(this['isActor']()){if(_0x2b3241(0x208)===_0x2b3241(0x784))_0x1acef3['bitmap']=_0x419548[_0x2b3241(0x85d)];else{const _0x58af50=this['weapons']();_0x269de7=_0x58af50[_0x4c2f18]?_0x58af50[_0x4c2f18][_0x2b3241(0x6ad)]:0x0;}}else this[_0x2b3241(0x6dd)]()&&(_0x269de7=this['svBattlerData']()[_0x2b3241(0x6ad)]||0x0);const _0x16cdd7=$dataSystem[_0x2b3241(0x22b)][_0x269de7];_0x4cecc3[_0x2b3241(0x378)](/attack/i)&&(_0x2b3241(0x804)!==_0x2b3241(0x804)?this[_0x2b3241(0xad4)]():_0x4cecc3=[_0x2b3241(0x806),'swing',_0x2b3241(0xada)][_0x16cdd7[_0x2b3241(0x626)]]||_0x2b3241(0x49f)),this[_0x2b3241(0xfd)]={'motionType':_0x4cecc3,'weaponImageId':_0x187d76?_0x16cdd7['weaponImageId']:0x0,'pattern':_0x28be4d};},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xe3)]=function(_0x546c83){const _0x47df8f=_0x4ab18a;if(!_0x546c83)return![];return _0x546c83[_0x47df8f(0xadc)]()===this['friendsUnit']();},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xab2)]=function(_0x2b6317){const _0x29247d=_0x4ab18a;if(!_0x2b6317)return![];return _0x2b6317[_0x29247d(0x123)]()===this['friendsUnit']();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x4b2)]=Game_Actor['prototype'][_0x4ab18a(0x914)],Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x914)]=function(_0x322218){const _0x1bf1eb=_0x4ab18a;VisuMZ[_0x1bf1eb(0x94c)][_0x1bf1eb(0x4b2)][_0x1bf1eb(0x45b)](this,_0x322218),this[_0x1bf1eb(0x116)]();},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x116)]=function(){const _0x57a2ba=_0x4ab18a;this[_0x57a2ba(0xc8)]='',this[_0x57a2ba(0x475)]()&&this[_0x57a2ba(0x475)]()[_0x57a2ba(0x7d0)][_0x57a2ba(0x378)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(_0x57a2ba(0x9b9)!=='CgMJh'?_0x5b6621[_0x57a2ba(0x849)](0x0,0x0,_0x3c5bc0['bitmap']['width'],this[_0x57a2ba(0x6db)][_0x57a2ba(0x428)]):this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x917)]=function(){const _0x2f0049=_0x4ab18a;if(this[_0x2f0049(0x7e3)]()!=='')return this[_0x2f0049(0x7e3)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x2f0049(0xacd)]()!==''){if(_0x2f0049(0x83b)!=='CSdCX'){_0x1dea27[_0x2f0049(0x378)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0xc6541d=_0x1d2c74(_0x396001['$1']),_0x5d86b4=_0xd729ea(_0x4926c0['$2']),_0x1a9fe1=_0x5d86b4===0x1?this[_0x2f0049(0x5c8)]:this[_0x2f0049(0x881)],_0x390796=_0x437dd9(_0x3f6959['$3']);_0x1a9fe1[_0xc6541d]=_0x390796;}else return this[_0x2f0049(0xacd)]();}}return'';},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x7e3)]=function(){if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this['_battlePortrait'];},Game_Actor[_0x4ab18a(0x49d)]['setBattlePortrait']=function(_0x193c43){const _0x1399dd=_0x4ab18a;if(this['_battlePortrait']===undefined)this[_0x1399dd(0x116)]();this[_0x1399dd(0xc8)]=_0x193c43;if(SceneManager[_0x1399dd(0xae)]()&&$gameParty['battleMembers']()[_0x1399dd(0xb2)](this)){if('AqIdP'!==_0x1399dd(0x535))_0x2b0453[_0x1399dd(0x7d0)]+=_0x1399dd(0x3ee);else{const _0xd72342=SceneManager[_0x1399dd(0xa10)]['_statusWindow'];if(_0xd72342)_0xd72342[_0x1399dd(0x20f)](this);}}},Game_Actor['prototype'][_0x4ab18a(0x9ec)]=function(){return!![];},Game_Actor[_0x4ab18a(0x49d)]['isAutoBattle']=function(){const _0x199dd2=_0x4ab18a;if(!this[_0x199dd2(0x1fb)]()&&BattleManager[_0x199dd2(0x5cc)])return!![];return Game_Battler[_0x199dd2(0x49d)][_0x199dd2(0xa85)]['call'](this);},VisuMZ[_0x4ab18a(0x94c)]['Game_Actor_makeActionList']=Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x36b)],Game_Actor['prototype'][_0x4ab18a(0x36b)]=function(){const _0x3d26e6=_0x4ab18a;if(BattleManager[_0x3d26e6(0x5cc)]&&!ConfigManager[_0x3d26e6(0xa75)]){if(_0x3d26e6(0x6c9)!==_0x3d26e6(0x473))return this[_0x3d26e6(0xa25)]();else this['padding']=0x0;}else{return VisuMZ['BattleCore'][_0x3d26e6(0x88b)][_0x3d26e6(0x45b)](this);;}},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0xa25)]=function(){const _0x2fdaf6=_0x4ab18a,_0x2e64a2=[],_0x1db097=new Game_Action(this);return _0x1db097['setAttack'](),_0x2e64a2[_0x2fdaf6(0x448)](_0x1db097),_0x2e64a2;},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x8cc)]=function(){const _0x3f6d1a=_0x4ab18a;return this[_0x3f6d1a(0x529)]()['note'][_0x3f6d1a(0x378)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x3f6d1a(0x9e7)](/[\r\n]+/):VisuMZ['BattleCore'][_0x3f6d1a(0x3f5)][_0x3f6d1a(0x3dd)][_0x3f6d1a(0x791)];},Game_Actor['prototype']['svBattlerAnchorX']=function(){const _0x157f42=_0x4ab18a;if(this['_cache'][_0x157f42(0x217)]!==undefined)return this[_0x157f42(0x8de)][_0x157f42(0x217)];if(this[_0x157f42(0x475)]()[_0x157f42(0x7d0)][_0x157f42(0x378)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x157f42(0x57e)!==_0x157f42(0x57e))for(const _0x4d0d95 of _0x12ce10){const _0x115b7a=_0x461272[0x0][_0x157f42(0x278)](_0x4d0d95[0x0]),_0x342fb5=_0x8b473[0x1][_0x157f42(0x278)](_0x4d0d95[0x1]),_0x7fbf89=new _0x14f249(_0x37b523['format'](_0x342fb5),'i');_0x34d5e3[_0x115b7a]=_0x7fbf89;}else this['_cache'][_0x157f42(0x217)]=eval(RegExp['$1']),this[_0x157f42(0x8de)][_0x157f42(0xa3d)]=eval(RegExp['$2']);}else _0x157f42(0x54e)===_0x157f42(0x54e)?this[_0x157f42(0x8de)][_0x157f42(0x217)]=Game_Battler[_0x157f42(0x49d)][_0x157f42(0x24b)][_0x157f42(0x45b)](this):this['isTpb']()?this['selectNextCommandTpb']():_0x3d0e85['BattleCore'][_0x157f42(0x147)][_0x157f42(0x45b)](this);return this[_0x157f42(0x8de)]['svAnchorX'];},Game_Actor['prototype'][_0x4ab18a(0x19e)]=function(){const _0xa63a90=_0x4ab18a;if(this[_0xa63a90(0x8de)][_0xa63a90(0xa3d)]!==undefined)return this['_cache'][_0xa63a90(0xa3d)];if(this[_0xa63a90(0x475)]()[_0xa63a90(0x7d0)][_0xa63a90(0x378)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0xa63a90(0x8de)][_0xa63a90(0x217)]=eval(RegExp['$1']),this[_0xa63a90(0x8de)][_0xa63a90(0xa3d)]=eval(RegExp['$2']);else{if(_0xa63a90(0x2e6)===_0xa63a90(0x109)){this[_0xa63a90(0x77b)](),this['updateSkew'](),this[_0xa63a90(0x293)](),this[_0xa63a90(0xfc)](),this['updateHpGaugePosition'](),_0x2d14bf[_0xa63a90(0x94c)][_0xa63a90(0x619)][_0xa63a90(0x45b)](this);if(this[_0xa63a90(0x164)]===_0x3435f4)this['updateShadow']();}else this['_cache'][_0xa63a90(0xa3d)]=Game_Battler[_0xa63a90(0x49d)][_0xa63a90(0x19e)]['call'](this);}return this[_0xa63a90(0x8de)][_0xa63a90(0xa3d)];},Game_Actor[_0x4ab18a(0x49d)]['svBattlerShadowVisible']=function(){const _0x419cbd=_0x4ab18a;if(this['_cache'][_0x419cbd(0x79d)]!==undefined)return this['_cache'][_0x419cbd(0x79d)];if(this[_0x419cbd(0x475)]()['note'][_0x419cbd(0x378)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x419cbd(0x8de)][_0x419cbd(0x79d)]=!![];else{if(this[_0x419cbd(0x475)]()[_0x419cbd(0x7d0)][_0x419cbd(0x378)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x419cbd(0x316)===_0x419cbd(0x316))this[_0x419cbd(0x8de)][_0x419cbd(0x79d)]=![];else return _0x229c9c['status']&&_0x23c70d['description'][_0x419cbd(0xb2)]('['+_0x4c733c+']');}else this[_0x419cbd(0x8de)][_0x419cbd(0x79d)]=Game_Battler[_0x419cbd(0x49d)][_0x419cbd(0x4de)][_0x419cbd(0x45b)](this);}return this[_0x419cbd(0x8de)][_0x419cbd(0x79d)];},Game_Actor[_0x4ab18a(0x49d)]['battlerSmoothImage']=function(){const _0x25e60a=_0x4ab18a;return VisuMZ[_0x25e60a(0x94c)][_0x25e60a(0x3f5)][_0x25e60a(0x56a)][_0x25e60a(0x4a9)];},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x5de)]=function(){const _0x2372b7=_0x4ab18a,_0x4fba5d=this[_0x2372b7(0x9f9)](),_0x552ac5=_0x4fba5d[0x0]?_0x4fba5d[0x0][_0x2372b7(0x6ad)]:0x0,_0x9b3ade=$dataSystem['attackMotions'][_0x552ac5];_0x9b3ade&&(_0x2372b7(0x2e3)!==_0x2372b7(0x2e3)?(_0x187714+=_0x2dbe0f[_0x2372b7(0x526)]()?-_0x22aad0:_0x446a0b,_0x271ede+=_0x7b64d[_0x2372b7(0x526)]()?-_0x4ba992:_0x30aedc):this['startWeaponAnimation'](_0x9b3ade[_0x2372b7(0x84e)]));},Game_Actor['prototype']['performAction']=function(_0x71a742){const _0x55b145=_0x4ab18a;Game_Battler[_0x55b145(0x49d)][_0x55b145(0xa23)][_0x55b145(0x45b)](this,_0x71a742),this[_0x55b145(0x885)](_0x71a742);},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x9dd)]=function(){const _0x472d6d=_0x4ab18a,_0x4e6fe3=this['weapons'](),_0x2ac64e=_0x4e6fe3[0x0]?_0x4e6fe3[0x0][_0x472d6d(0x6ad)]:0x0;return $dataSystem[_0x472d6d(0x22b)][_0x2ac64e];},Game_Actor['prototype'][_0x4ab18a(0x2e1)]=function(_0x786fd8){const _0x1b94d1=_0x4ab18a;_0x786fd8=_0x786fd8||0x1,_0x786fd8--;const _0x1bd109=this[_0x1b94d1(0x9f9)]();return _0x1bd109[_0x786fd8]?_0x1bd109[_0x786fd8][_0x1b94d1(0xa0a)]:0x0;},Game_Actor['prototype'][_0x4ab18a(0x57b)]=function(_0x242fdc){const _0xbb3266=_0x4ab18a;_0x242fdc=_0x242fdc||0x1,_0x242fdc--;const _0xbbe158=this[_0xbb3266(0x9f9)](),_0x4820be=_0xbbe158[_0x242fdc]?_0xbbe158[_0x242fdc][_0xbb3266(0x6ad)]:0x0;return $dataSystem['attackMotions'][_0x4820be];},Game_Actor[_0x4ab18a(0x49d)]['performAttackSlot']=function(_0x32710f){const _0x17579f=_0x4ab18a;_0x32710f=_0x32710f||0x1,_0x32710f--;const _0x1fbfaa=this['weapons'](),_0x5a732e=_0x1fbfaa[_0x32710f]?_0x1fbfaa[_0x32710f][_0x17579f(0x6ad)]:0x0,_0x136c20=$dataSystem['attackMotions'][_0x5a732e];if(_0x136c20){if('vMGWL'===_0x17579f(0x912)){if(_0x136c20['type']===0x0){if(_0x17579f(0x37a)!==_0x17579f(0x37a)){if(_0x5c3236[_0x17579f(0x25c)]())this[_0x17579f(0x267)](),this[_0x17579f(0x5d6)]=![],_0x198822['clearBattleRefreshRequest']();else this[_0x17579f(0x5d6)]&&(this['_requestRefresh']=![],this[_0x17579f(0x5ea)](),this['updateAttachmentSprites']());}else this['requestMotion'](_0x17579f(0x806));}else{if(_0x136c20[_0x17579f(0x626)]===0x1){if(_0x17579f(0x6ab)===_0x17579f(0xa2))return _0x35973d[_0x17579f(0x49d)][_0x17579f(0x82f)][_0x17579f(0x45b)](this);else this['requestMotion'](_0x17579f(0x49f));}else _0x136c20[_0x17579f(0x626)]===0x2&&this[_0x17579f(0x27c)](_0x17579f(0xada));}this[_0x17579f(0x1ad)](_0x136c20[_0x17579f(0x84e)]);}else this[_0x17579f(0xa86)](_0x17579f(0x38f));}},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x6a6)]=function(_0x1d0cff){this['_activeWeaponSlot']=_0x1d0cff||0x0;},Game_Battler[_0x4ab18a(0x49d)]['nextActiveWeaponSlot']=function(){const _0x189b40=_0x4ab18a;this[_0x189b40(0x1ac)]=this[_0x189b40(0x1ac)]||0x0,this[_0x189b40(0x1ac)]++;},Game_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x206)]=function(){const _0x1e9b80=_0x4ab18a;this[_0x1e9b80(0x1ac)]=undefined;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x64e)]=Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x2de)],Game_Actor[_0x4ab18a(0x49d)]['equips']=function(){const _0x9cca51=_0x4ab18a;let _0x2924cd=VisuMZ['BattleCore'][_0x9cca51(0x64e)][_0x9cca51(0x45b)](this);if(this[_0x9cca51(0xa60)])return _0x2924cd;if(this[_0x9cca51(0x1ac)]!==undefined){if(_0x9cca51(0x537)!=='nPnqR'){this[_0x9cca51(0xa60)]=!![];const _0x25f9dc=this[_0x9cca51(0x168)]();for(let _0x2db692=0x0;_0x2db692<_0x25f9dc[_0x9cca51(0x820)];_0x2db692++){if(_0x9cca51(0x29d)===_0x9cca51(0x29d)){if(_0x25f9dc[_0x2db692]===0x1&&this['_activeWeaponSlot']!==_0x2db692){if(_0x9cca51(0x133)==='rYbsK'){const _0x31ae3e=this['getAttackMotion']();return _0x31ae3e?_0x31ae3e['weaponImageId']:0x0;}else _0x2924cd[_0x2db692]=null;}}else this['_damageContainer']['x']=this['x'],this[_0x9cca51(0x2a5)]['y']=this['y'];}this['_tempEquipCheck']=undefined;}else this[_0x9cca51(0x12b)](),this['_currentActor']=null,this['_inputting']=![];}return _0x2924cd;},Window_BattleLog['prototype']['getDualWieldTimes']=function(_0x266a7d){const _0x71e403=_0x4ab18a;return _0x266a7d[_0x71e403(0x526)]()?_0x71e403(0x9b1)!==_0x71e403(0x9b1)?this['isActor']&&this[_0x71e403(0x526)]()?_0x2ab8fc[_0x71e403(0x94c)][_0x71e403(0x3f5)][_0x71e403(0x56a)][_0x71e403(0x2cf)]:_0x3795db['BattleCore'][_0x71e403(0x3f5)][_0x71e403(0x582)][_0x71e403(0x2cf)]:_0x266a7d[_0x71e403(0x9f9)]()[_0x71e403(0x820)]||0x1:0x1;},Window_BattleLog[_0x4ab18a(0x49d)]['setActiveWeaponSet']=function(_0x5179b6,_0x469a24){const _0x3e67de=_0x4ab18a;if(_0x5179b6&&_0x5179b6['isActor']()){if(_0x3e67de(0x60f)===_0x3e67de(0x8a0)){if(!this['_actor'])return;const _0x194076=this[_0x3e67de(0x1cd)][_0x3e67de(0x8cc)]();for(const _0x4f031b of _0x194076){this['makeBattleCommand'](_0x4f031b['toUpperCase']()[_0x3e67de(0x3a3)]());}}else _0x5179b6[_0x3e67de(0x6a6)](_0x469a24);}this[_0x3e67de(0x61b)]();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x2ad)]=function(_0x4508a0){const _0x470a74=_0x4ab18a;if(_0x4508a0&&_0x4508a0[_0x470a74(0x526)]()){if(_0x470a74(0xf1)!=='tFINI'){const _0x379f87=this[_0x470a74(0x925)]()[_0x470a74(0x7f8)];return _0x379f87[_0x470a74(0x378)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}else _0x4508a0[_0x470a74(0x206)]();}this[_0x470a74(0x61b)]();},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x41f)]=function(){const _0x39edf4=_0x4ab18a;let _0xef3e6c=_0x39edf4(0x41f);if(this[_0x39edf4(0x907)](_0xef3e6c))return this[_0x39edf4(0x8de)][_0xef3e6c];return this['_cache'][_0xef3e6c]=this[_0x39edf4(0x20a)](this[_0x39edf4(0x475)]()),this[_0x39edf4(0x8de)][_0xef3e6c];},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x2c3)]=function(){const _0x14ae26=_0x4ab18a;let _0x24da3c=_0x14ae26(0x2c3);if(this['checkCacheKey'](_0x24da3c))return this[_0x14ae26(0x8de)][_0x24da3c];return this['_cache'][_0x24da3c]=this['createBattleUIOffsetY'](this['actor']()),this[_0x14ae26(0x8de)][_0x24da3c];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x290)]=Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x914)],Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x914)]=function(_0x34dd14,_0x51fbb6,_0x258e28){const _0x2fc8eb=_0x4ab18a;_0x34dd14=DataManager['swapEnemyIDs'](_0x34dd14),VisuMZ[_0x2fc8eb(0x94c)][_0x2fc8eb(0x290)]['call'](this,_0x34dd14,_0x51fbb6,_0x258e28);if(Imported[_0x2fc8eb(0x847)]){if(_0x2fc8eb(0x177)!=='KZoYN')return this['statusTextAutoBattleStyle']();else this[_0x2fc8eb(0x2d5)]();}this[_0x2fc8eb(0x59a)](),this[_0x2fc8eb(0x26a)]();if(Imported[_0x2fc8eb(0x847)]){if(_0x2fc8eb(0x23f)===_0x2fc8eb(0x23f))this[_0x2fc8eb(0x3cd)]();else return _0xeb7c3c['BattleCore']['Settings'][_0x2fc8eb(0x1c6)]['AllowRandomSpeed'];}},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x59a)]=function(){const _0x28134e=_0x4ab18a,_0x499421=VisuMZ[_0x28134e(0x94c)][_0x28134e(0x3f5)][_0x28134e(0x582)];this['_attackAnimationId']=_0x499421['AttackAnimation'],this[_0x28134e(0x5f6)]={};},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x26a)]=function(){const _0x4963b0=_0x4ab18a,_0x2067ca=VisuMZ[_0x4963b0(0x94c)]['Settings']['Enemy'],_0x1737d7=this[_0x4963b0(0x637)]()[_0x4963b0(0x7d0)];this[_0x4963b0(0x5f6)]={'name':'','wtypeId':_0x2067ca[_0x4963b0(0x536)],'collapse':_0x2067ca[_0x4963b0(0x5f8)],'motionIdle':_0x2067ca[_0x4963b0(0x5c5)],'width':_0x2067ca[_0x4963b0(0x55e)]||0x40,'height':_0x2067ca[_0x4963b0(0x4a4)]||0x40,'anchorX':_0x2067ca['AnchorX']||0x0,'anchorY':_0x2067ca[_0x4963b0(0x4ad)]||0x0,'shadow':_0x2067ca[_0x4963b0(0x2cf)]};_0x1737d7[_0x4963b0(0x378)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x4963b0(0x335)]=Number(RegExp['$1']));const _0x55e4a0=this[_0x4963b0(0x5f6)];if(_0x1737d7[_0x4963b0(0x378)](/<SIDEVIEW BATTLER: (.*)>/i))_0x55e4a0[_0x4963b0(0x8ff)]=String(RegExp['$1']);else{if(_0x1737d7[_0x4963b0(0x378)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x429b02=String(RegExp['$1'])[_0x4963b0(0x9e7)](/[\r\n]+/)[_0x4963b0(0x8d3)]('');_0x55e4a0['name']=DataManager[_0x4963b0(0x3eb)](_0x429b02);}}_0x1737d7['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x55e4a0[_0x4963b0(0x948)]=eval(RegExp['$1']),_0x55e4a0[_0x4963b0(0x3d4)]=eval(RegExp['$2']));if(_0x1737d7['match'](/<SIDEVIEW COLLAPSE>/i)){if(_0x4963b0(0x521)!==_0x4963b0(0x521))return this[_0x4963b0(0x840)]();else _0x55e4a0[_0x4963b0(0x66e)]=!![];}else _0x1737d7['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x55e4a0['collapse']=![]);if(_0x1737d7[_0x4963b0(0x378)](/<SIDEVIEW SHOW SHADOW>/i))_0x55e4a0[_0x4963b0(0x1fd)]=!![];else _0x1737d7[_0x4963b0(0x378)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x55e4a0['shadow']=![]);if(_0x1737d7['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x55e4a0['motionIdle']=String(RegExp['$1'])[_0x4963b0(0x8f8)]()[_0x4963b0(0x3a3)]();else{if(_0x1737d7[_0x4963b0(0x378)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if('EqMfF'!==_0x4963b0(0x8eb)){const _0x300179=String(RegExp['$1'])[_0x4963b0(0x9e7)](/[\r\n]+/)[_0x4963b0(0x8d3)]('');_0x55e4a0[_0x4963b0(0x9ad)]=DataManager[_0x4963b0(0x3eb)](_0x300179);}else _0x1d0363['BattleCore'][_0x4963b0(0x9ef)]['call'](this),this['_preBattleCommonEvent']&&(this[_0x4963b0(0x188)]=_0xbdeab3,_0x10be80[_0x4963b0(0xa10)][_0x4963b0(0x339)]());}}if(_0x1737d7[_0x4963b0(0x378)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0x4963b0(0x35d)!==_0x4963b0(0x359))_0x55e4a0['width']=Number(RegExp['$1']),_0x55e4a0['height']=Number(RegExp['$2']);else{if(!_0x4cd364[_0x4963b0(0xae)]())return;_0x2dcf3['_scene']['removeOnceParallelInterpreter'](this),_0x225dda[_0x4963b0(0x49d)][_0x4963b0(0x6ec)][_0x4963b0(0x45b)](this);}}if(_0x1737d7['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x4963b0(0x21f)!=='Ncdqu'?_0x55e4a0[_0x4963b0(0x6ad)]=DataManager[_0x4963b0(0x16f)](RegExp['$1']):_0x24838e=_0x5937d1['x']+_0x2e5ff6['faceWidth']+0x8;else{if(_0x1737d7['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x4963b0(0x4c4)!==_0x4963b0(0x4c4))return _0x52e4b5[_0x4963b0(0x94c)]['Game_Interpreter_command301']['call'](this,_0x2d1ee4);else{const _0x67d295=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4963b0(0x8d3)](''),_0x38f2cd=DataManager[_0x4963b0(0x3eb)](_0x67d295);_0x55e4a0[_0x4963b0(0x6ad)]=DataManager[_0x4963b0(0x16f)](_0x38f2cd);}}}if(Imported[_0x4963b0(0x847)]){const _0x586f40=this[_0x4963b0(0x220)]();for(const _0x3239c1 of _0x586f40){const _0x2dc241=this[_0x4963b0(0x8a8)](_0x3239c1)[_0x4963b0(0x16c)]['toUpperCase']()[_0x4963b0(0x3a3)](),_0x10e3c3=_0x3239c1[_0x4963b0(0x9e5)]()[_0x4963b0(0x3a3)]();if(_0x1737d7[_0x4963b0(0x378)](VisuMZ[_0x4963b0(0x8a3)][_0x4963b0(0x90b)]['SvBattlerSolo-%1-%2'[_0x4963b0(0x278)](_0x10e3c3,_0x2dc241)]))_0x4963b0(0x4fc)==='TJIVe'?_0x55e4a0[_0x4963b0(0x8ff)]=String(RegExp['$1']):_0x167224[_0x4963b0(0x206)]();else{if(_0x1737d7['match'](VisuMZ[_0x4963b0(0x8a3)][_0x4963b0(0x90b)][_0x4963b0(0x194)[_0x4963b0(0x278)](_0x10e3c3,_0x2dc241)])){const _0x26c0f6=String(RegExp['$1'])[_0x4963b0(0x9e7)](/[\r\n]+/)[_0x4963b0(0x8d3)]('');_0x55e4a0[_0x4963b0(0x8ff)]=DataManager[_0x4963b0(0x3eb)](_0x26c0f6);}}if(_0x1737d7[_0x4963b0(0x378)](VisuMZ['ElementStatusCore'][_0x4963b0(0x90b)][_0x4963b0(0x1c9)['format'](_0x10e3c3,_0x2dc241)])){if('OYPQr'===_0x4963b0(0x8f6))return this[_0x4963b0(0x4e0)]()&&this[_0x4963b0(0x4e0)]()['item']()&&this[_0x4963b0(0x4e0)]()[_0x4963b0(0xa29)]();else _0x55e4a0[_0x4963b0(0x6ad)]=DataManager[_0x4963b0(0x16f)](RegExp['$1']);}else{if(_0x1737d7[_0x4963b0(0x378)](VisuMZ['ElementStatusCore'][_0x4963b0(0x90b)][_0x4963b0(0x9fb)['format'](_0x10e3c3,_0x2dc241)])){if(_0x4963b0(0x918)==='EAHAs')return _0x2ff65a[_0x4963b0(0x94c)]['Settings'][_0x4963b0(0x3dd)]['CmdStyle'];else{const _0x37ea06=String(RegExp['$1'])[_0x4963b0(0x9e7)](/[\r\n]+/)[_0x4963b0(0x8d3)](''),_0x535747=DataManager[_0x4963b0(0x3eb)](_0x37ea06);_0x55e4a0[_0x4963b0(0x6ad)]=DataManager[_0x4963b0(0x16f)](_0x535747);}}}if(_0x1737d7[_0x4963b0(0x378)](VisuMZ['ElementStatusCore'][_0x4963b0(0x90b)][_0x4963b0(0x634)[_0x4963b0(0x278)](_0x10e3c3,_0x2dc241)])){if(_0x4963b0(0x911)===_0x4963b0(0x911))_0x55e4a0[_0x4963b0(0x9ad)]=String(RegExp['$1'])[_0x4963b0(0x8f8)]()[_0x4963b0(0x3a3)]();else return this[_0x4963b0(0x7e3)]();}else{if(_0x1737d7[_0x4963b0(0x378)](VisuMZ[_0x4963b0(0x8a3)]['RegExp'][_0x4963b0(0x10b)['format'](_0x10e3c3,_0x2dc241)])){if(_0x4963b0(0x9d3)!=='udWfQ'){const _0x46b4cc=String(RegExp['$1'])[_0x4963b0(0x9e7)](/[\r\n]+/)[_0x4963b0(0x8d3)]('');_0x55e4a0[_0x4963b0(0x9ad)]=DataManager[_0x4963b0(0x3eb)](_0x46b4cc);}else this['opacity']+=0x10;}}}}},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x3dc)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x4ab18a(0x49d)]['attackAnimationId2']=function(){const _0x5a4f00=_0x4ab18a;return this[_0x5a4f00(0x3dc)]();},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x2e1)]=function(_0x2930bc){const _0x4099c4=_0x4ab18a;return this[_0x4099c4(0x3dc)]();},Game_Enemy[_0x4ab18a(0x49d)]['canBattlerMove']=function(){const _0x24eb48=_0x4ab18a;if(this[_0x24eb48(0x637)]()[_0x24eb48(0x7d0)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype']['canBattlerMove'][_0x24eb48(0x45b)](this);},Game_Enemy[_0x4ab18a(0x49d)]['isBattlerGrounded']=function(){const _0x460c37=_0x4ab18a;if(this[_0x460c37(0x637)]()[_0x460c37(0x7d0)][_0x460c37(0x378)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x2a8)]=function(){const _0x32d55d=_0x4ab18a,_0x57817a=[];for(const _0x2e53e1 of this[_0x32d55d(0x637)]()[_0x32d55d(0xa67)]){const _0x3eec69=$dataSkills[_0x2e53e1[_0x32d55d(0x576)]];if(_0x3eec69&&!_0x57817a[_0x32d55d(0xb2)](_0x3eec69))_0x57817a['push'](_0x3eec69);}return _0x57817a;},Game_Enemy[_0x4ab18a(0x49d)]['battleUIOffsetX']=function(){const _0x28ae47=_0x4ab18a;let _0x13271a='battleUIOffsetX';if(this['checkCacheKey'](_0x13271a))return this['_cache'][_0x13271a];return this[_0x28ae47(0x8de)][_0x13271a]=this['createBattleUIOffsetX'](this[_0x28ae47(0x637)]()),this[_0x28ae47(0x8de)][_0x13271a];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x2c3)]=function(){const _0x2d6e38=_0x4ab18a;let _0x23a219='battleUIOffsetY';if(this[_0x2d6e38(0x907)](_0x23a219))return this[_0x2d6e38(0x8de)][_0x23a219];return this['_cache'][_0x23a219]=this[_0x2d6e38(0x74a)](this[_0x2d6e38(0x637)]()),this[_0x2d6e38(0x8de)][_0x23a219];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x30f)]=function(){const _0x3ed2fb=_0x4ab18a;if(this[_0x3ed2fb(0x5f6)]!==undefined)return this[_0x3ed2fb(0x5f6)];return this[_0x3ed2fb(0x26a)](),this[_0x3ed2fb(0x5f6)];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x394)]=function(){const _0x41d122=_0x4ab18a;return this['svBattlerData']()[_0x41d122(0x8ff)]!=='';},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x8fd)]=function(){const _0x1d0643=_0x4ab18a;return this[_0x1d0643(0x30f)]()['name'];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x726)]=function(){const _0x57a64c=_0x4ab18a;if(this['hasSvBattler']()){if('EIYod'===_0x57a64c(0x202))return VisuMZ[_0x57a64c(0x94c)]['Settings'][_0x57a64c(0x56a)][_0x57a64c(0x4a9)];else _0x287d05[_0x57a64c(0x49d)][_0x57a64c(0x50f)]['call'](this),this[_0x57a64c(0xaad)]();}else return VisuMZ['BattleCore'][_0x57a64c(0x3f5)][_0x57a64c(0x582)][_0x57a64c(0x4a9)];},Game_Enemy['prototype'][_0x4ab18a(0xa23)]=function(_0x23aa3c){const _0x5de51a=_0x4ab18a;Game_Battler[_0x5de51a(0x49d)][_0x5de51a(0xa23)][_0x5de51a(0x45b)](this,_0x23aa3c);if(this[_0x5de51a(0x394)]())this[_0x5de51a(0x885)](_0x23aa3c);},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x9c)]=function(){const _0x391ba5=_0x4ab18a,_0x49896c=this[_0x391ba5(0x30f)]()[_0x391ba5(0x6ad)]||0x0,_0x15ae9d=$dataSystem[_0x391ba5(0x22b)][_0x49896c];if(_0x15ae9d){if(_0x15ae9d[_0x391ba5(0x626)]===0x0)this[_0x391ba5(0x27c)]('thrust');else{if(_0x15ae9d[_0x391ba5(0x626)]===0x1){if(_0x391ba5(0x9c6)!==_0x391ba5(0x827))this['requestMotion'](_0x391ba5(0x49f));else{if(!this[_0x391ba5(0x1cd)]['isLearnedSkill'](_0x5ebe11['id']))return![];}}else _0x15ae9d['type']===0x2&&this[_0x391ba5(0x27c)](_0x391ba5(0xada));}}},Game_Enemy[_0x4ab18a(0x49d)]['performWeaponAnimation']=function(){const _0x18aeff=_0x4ab18a,_0x51612b=this[_0x18aeff(0x30f)]()[_0x18aeff(0x6ad)]||0x0,_0x3f4b6e=$dataSystem[_0x18aeff(0x22b)][_0x51612b];_0x3f4b6e&&this['startWeaponAnimation'](_0x3f4b6e['weaponImageId']);},Game_Enemy['prototype'][_0x4ab18a(0x9dd)]=function(){const _0x31a74f=_0x4ab18a,_0x23bcd0=this[_0x31a74f(0x30f)]()[_0x31a74f(0x6ad)]||0x0;return $dataSystem[_0x31a74f(0x22b)][_0x23bcd0];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x57b)]=function(_0xff97ed){const _0x323f6b=_0x4ab18a;return this[_0x323f6b(0x9dd)]();},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x28a)]=function(){const _0x11e4c4=_0x4ab18a;Game_Battler[_0x11e4c4(0x49d)][_0x11e4c4(0x28a)][_0x11e4c4(0x45b)](this),this[_0x11e4c4(0x9ec)]()&&this[_0x11e4c4(0x394)]()&&(_0x11e4c4(0xc0)!==_0x11e4c4(0x856)?this[_0x11e4c4(0x27c)](_0x11e4c4(0x938)):_0x36268b['BattleCore']['JS'][_0x5e73c3][_0x11e4c4(0x45b)](this,this[_0x11e4c4(0x3d1)](),this[_0x11e4c4(0x3d1)](),this['item'](),_0x3beef7)),SoundManager[_0x11e4c4(0x13d)]();},Game_Enemy[_0x4ab18a(0x49d)]['performEvasion']=function(){const _0x3b60f8=_0x4ab18a;Game_Battler[_0x3b60f8(0x49d)]['performEvasion']['call'](this),this[_0x3b60f8(0x27c)](_0x3b60f8(0x91b));},Game_Enemy['prototype'][_0x4ab18a(0x49b)]=function(){const _0x52c116=_0x4ab18a;Game_Battler[_0x52c116(0x49d)][_0x52c116(0x49b)][_0x52c116(0x45b)](this),this[_0x52c116(0x27c)]('evade');},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x7cc)]=function(){const _0x215546=_0x4ab18a;Game_Battler['prototype'][_0x215546(0x7cc)][_0x215546(0x45b)](this),this[_0x215546(0x9c)]();},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0xe5)]=function(){const _0x2dde65=_0x4ab18a;if(this[_0x2dde65(0x394)]()){if(this[_0x2dde65(0x21c)]()>=0x1)return!![];return this['svBattlerData']()[_0x2dde65(0x66e)];}else return!![];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x24b)]=function(){const _0x15f091=_0x4ab18a;return this[_0x15f091(0x30f)]()[_0x15f091(0x948)];},Game_Enemy['prototype']['svBattlerAnchorY']=function(){const _0x31bfe8=_0x4ab18a;return this[_0x31bfe8(0x30f)]()[_0x31bfe8(0x3d4)];},Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x4de)]=function(){const _0x2b9d31=_0x4ab18a;return this[_0x2b9d31(0x30f)]()[_0x2b9d31(0x1fd)];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x210)]=Game_Enemy['prototype'][_0x4ab18a(0x7ba)],Game_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x7ba)]=function(_0x428791){const _0x4a37b3=_0x4ab18a;VisuMZ['BattleCore'][_0x4a37b3(0x210)][_0x4a37b3(0x45b)](this,_0x428791),this[_0x4a37b3(0x59a)](),this[_0x4a37b3(0x26a)]();const _0x5e7072=this[_0x4a37b3(0x173)]();if(_0x5e7072)_0x5e7072[_0x4a37b3(0x669)](this);},Game_Unit['prototype'][_0x4ab18a(0xa66)]=function(_0x43b215){const _0x452b2b=_0x4ab18a;for(const _0x43318a of this['members']()){if('JRyQQ'!=='FeTOf'){if(_0x43318a)_0x43318a[_0x452b2b(0xa66)](_0x43b215);}else _0x1569f5['result']()[_0x452b2b(0x675)]?this[_0x452b2b(0x448)](_0x452b2b(0xa07),_0x19c2e5):this[_0x452b2b(0x448)](_0x452b2b(0x49b),_0x3ce1ac);}},Game_Unit[_0x4ab18a(0x49d)][_0x4ab18a(0x27b)]=function(){const _0x10c089=_0x4ab18a,_0x1297fb=this['aliveMembers']();return _0x1297fb[Math[_0x10c089(0x81a)](_0x1297fb[_0x10c089(0x820)])];},VisuMZ['BattleCore'][_0x4ab18a(0x44a)]=Game_Party[_0x4ab18a(0x49d)][_0x4ab18a(0x248)],Game_Party[_0x4ab18a(0x49d)][_0x4ab18a(0x248)]=function(_0x3f149a){const _0x3dfd3b=_0x4ab18a;VisuMZ['BattleCore'][_0x3dfd3b(0x44a)][_0x3dfd3b(0x45b)](this,_0x3f149a),BattleManager[_0x3dfd3b(0x76f)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x4e2)]=Game_Party[_0x4ab18a(0x49d)][_0x4ab18a(0x7d7)],Game_Party['prototype'][_0x4ab18a(0x7d7)]=function(_0x2014e7){const _0x38357b=_0x4ab18a;VisuMZ[_0x38357b(0x94c)][_0x38357b(0x4e2)][_0x38357b(0x45b)](this,_0x2014e7),BattleManager[_0x38357b(0x76f)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x253)]=Game_Troop[_0x4ab18a(0x49d)][_0x4ab18a(0x914)],Game_Troop[_0x4ab18a(0x49d)][_0x4ab18a(0x914)]=function(_0x4b877f){const _0x155a38=_0x4ab18a;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x155a38(0x869)](_0x4b877f),VisuMZ['BattleCore'][_0x155a38(0x253)][_0x155a38(0x45b)](this,_0x4b877f);},VisuMZ['BattleCore'][_0x4ab18a(0xad0)]=Game_Troop[_0x4ab18a(0x49d)][_0x4ab18a(0x1f3)],Game_Troop['prototype'][_0x4ab18a(0x1f3)]=function(){const _0x13c74b=_0x4ab18a;let _0x4a739f=VisuMZ[_0x13c74b(0x94c)][_0x13c74b(0xad0)][_0x13c74b(0x45b)](this);return this[_0x13c74b(0x5ef)]&&('gxPlF'==='gxPlF'?_0x4a739f*=this[_0x13c74b(0x5ef)]():this['battleStatusWindowAnimationContainer']()[_0x13c74b(0x19a)](_0x508f3c)),Math[_0x13c74b(0x3c2)](_0x4a739f);},Game_Troop[_0x4ab18a(0x49d)][_0x4ab18a(0x5ef)]=function(){return 0x1;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x7ee)]=Game_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x741)],Game_Map['prototype'][_0x4ab18a(0x741)]=function(){const _0x3e3c2c=_0x4ab18a;VisuMZ[_0x3e3c2c(0x94c)][_0x3e3c2c(0x7ee)][_0x3e3c2c(0x45b)](this),this[_0x3e3c2c(0x774)]();},Game_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x774)]=function(){const _0x786f36=_0x4ab18a;this[_0x786f36(0x5c8)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x41616c=$dataMap['note'];if(!_0x41616c)return;const _0x7989b8=_0x41616c[_0x786f36(0x378)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x7989b8)for(const _0x2652ce of _0x7989b8){_0x2652ce['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5a7683=Number(RegExp['$1']),_0x4e0fe0=Number(RegExp['$2']),_0x4b06e7=_0x4e0fe0===0x1?this[_0x786f36(0x5c8)]:this[_0x786f36(0x881)],_0x5f2837=String(RegExp['$3']);_0x4b06e7[_0x5a7683]=_0x5f2837;}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xf6)]=Game_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x43b)],Game_Map['prototype'][_0x4ab18a(0x43b)]=function(){const _0x8e74e2=_0x4ab18a;if(!BattleManager[_0x8e74e2(0x54c)]()){const _0x5643e1=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x8e74e2(0x5c8)][_0x5643e1])return this[_0x8e74e2(0x5c8)][_0x5643e1];}return VisuMZ[_0x8e74e2(0x94c)]['Game_Map_battleback1Name'][_0x8e74e2(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x46d)]=Game_Map[_0x4ab18a(0x49d)]['battleback2Name'],Game_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x191)]=function(){const _0x15cf44=_0x4ab18a;if(!BattleManager[_0x15cf44(0x54c)]()){const _0x24ff32=$gamePlayer[_0x15cf44(0x236)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x15cf44(0x5c8)]&&this[_0x15cf44(0x881)][_0x24ff32])return this[_0x15cf44(0x881)][_0x24ff32];}return VisuMZ[_0x15cf44(0x94c)]['Game_Map_battleback2Name'][_0x15cf44(0x45b)](this);},VisuMZ['BattleCore'][_0x4ab18a(0x179)]=Game_Map[_0x4ab18a(0x49d)][_0x4ab18a(0xaba)],Game_Map[_0x4ab18a(0x49d)]['encounterList']=function(){const _0x15d054=_0x4ab18a;let _0xf9a047=JsonEx['makeDeepCopy'](VisuMZ['BattleCore'][_0x15d054(0x179)][_0x15d054(0x45b)](this));return VisuMZ[_0x15d054(0x94c)][_0x15d054(0x7a7)](_0xf9a047);},VisuMZ[_0x4ab18a(0x94c)]['ShuffleArray']=function(_0x31c63c){const _0x147e65=_0x4ab18a;var _0xf7e237,_0x5076fc,_0x51ffb3;for(_0x51ffb3=_0x31c63c['length']-0x1;_0x51ffb3>0x0;_0x51ffb3--){_0xf7e237=Math[_0x147e65(0x831)](Math['random']()*(_0x51ffb3+0x1)),_0x5076fc=_0x31c63c[_0x51ffb3],_0x31c63c[_0x51ffb3]=_0x31c63c[_0xf7e237],_0x31c63c[_0xf7e237]=_0x5076fc;}return _0x31c63c;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x2ba)]=Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x55b)],Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x55b)]=function(_0x426dfe){const _0x69c6c=_0x4ab18a;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x69c6c(0x94c)][_0x69c6c(0x2ba)][_0x69c6c(0x45b)](this,_0x426dfe);},VisuMZ[_0x4ab18a(0x94c)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x4ab18a(0x49d)]['updateWaitMode'],Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x97)]=function(){const _0x1ac067=_0x4ab18a;if(SceneManager['isSceneBattle']())switch(this[_0x1ac067(0x2d7)]){case _0x1ac067(0x548):if(Imported[_0x1ac067(0x7c0)]){if(_0x1ac067(0x63e)===_0x1ac067(0x63e)){if($gameScreen[_0x1ac067(0x679)]()[_0x1ac067(0xa9c)]>0x0)return!![];this[_0x1ac067(0x2d7)]='';}else{const _0x586095=this[_0x1ac067(0x46b)](_0x42961c);if(_0x586095===_0x1ac067(0xb7))this[_0x1ac067(0x151)](_0x5bef47);else _0x586095===_0x1ac067(0xa2b)?this[_0x1ac067(0x891)](_0x16a9b0):_0x3f7b89[_0x1ac067(0x49d)][_0x1ac067(0x654)][_0x1ac067(0x45b)](this,_0x2ee4b6);}}break;case _0x1ac067(0x102):if(BattleManager['_spriteset'][_0x1ac067(0x63f)]())return!![];this[_0x1ac067(0x2d7)]='';break;case _0x1ac067(0x101):if(Imported[_0x1ac067(0x7c0)]){if($gameScreen[_0x1ac067(0x679)]()['cameraDuration']>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this[_0x1ac067(0x2d7)]='';}break;case _0x1ac067(0x1da):if(BattleManager['_spriteset'][_0x1ac067(0x5b2)]())return!![];this[_0x1ac067(0x2d7)]='';break;case _0x1ac067(0xa69):if(BattleManager['_spriteset'][_0x1ac067(0x1cf)]())return!![];this['_waitMode']='';break;case'battleJump':if(BattleManager['_spriteset']['isAnyoneJumping']())return!![];this[_0x1ac067(0x2d7)]='';break;case _0x1ac067(0xa7):if(BattleManager['_logWindow'][_0x1ac067(0x433)]())return!![];this['_waitMode']='';break;case _0x1ac067(0x888):if(BattleManager['_spriteset']['isAnyoneMoving']())return!![];this[_0x1ac067(0x2d7)]='';break;case'battleOpacity':if(BattleManager['_spriteset']['isAnyoneChangingOpacity']())return!![];this[_0x1ac067(0x2d7)]='';break;case _0x1ac067(0x4af):if(BattleManager[_0x1ac067(0x6f4)][_0x1ac067(0xa91)]())return!![];this[_0x1ac067(0x2d7)]='';break;case _0x1ac067(0x677):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x1ac067(0x2d7)]='';break;case _0x1ac067(0x6e7):if(Imported[_0x1ac067(0x2d2)]){if(BattleManager[_0x1ac067(0x6f4)][_0x1ac067(0xcc)]())return!![];this['_waitMode']='';}break;case _0x1ac067(0x30a):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x1ac067(0x508)===_0x1ac067(0x48c))this[_0x1ac067(0x87)](0x1);else{if($gameScreen[_0x1ac067(0x679)]()[_0x1ac067(0x82b)]>0x0)return!![];this['_waitMode']='';}}break;case _0x1ac067(0xa84):if(BattleManager[_0x1ac067(0x6f4)][_0x1ac067(0x124)]())return!![];this[_0x1ac067(0x2d7)]='';break;case'battleZoom':if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x1ac067(0x1d0)===_0x1ac067(0x404)){if(!_0x31c1ac[_0x1ac067(0xae)]())return;if(!_0x445ba0[_0x1ac067(0x7c0)])return;const _0x1104e0=_0x5215f6['getLastPluginCommandInterpreter']();if(!_0x1104e0)return;_0x1104e0[_0x1ac067(0x37d)]('battleSkew');}else{if($gameScreen[_0x1ac067(0x679)]()[_0x1ac067(0x66b)]>0x0)return!![];this[_0x1ac067(0x2d7)]='';}}break;}return VisuMZ[_0x1ac067(0x94c)][_0x1ac067(0x1ef)]['call'](this);},VisuMZ['BattleCore'][_0x4ab18a(0x7f5)]=Game_Interpreter[_0x4ab18a(0x49d)]['command301'],Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x395)]=function(_0x4176f1){const _0x244280=_0x4ab18a;return!$gameParty[_0x244280(0x7d2)]()?this[_0x244280(0xf2)](_0x4176f1):VisuMZ[_0x244280(0x94c)]['Game_Interpreter_command301'][_0x244280(0x45b)](this,_0x4176f1);},Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x87d)]=function(_0x367035){const _0x2019a4=_0x4ab18a;return VisuMZ[_0x2019a4(0x94c)][_0x2019a4(0x7f5)]['call'](this,_0x367035),BattleManager[_0x2019a4(0x9fc)](_0x4d8a9f=>{const _0x19de9e=_0x2019a4;_0x19de9e(0x476)===_0x19de9e(0x476)?this[_0x19de9e(0x163)][this[_0x19de9e(0x211)]]=_0x4d8a9f:this[_0x19de9e(0x153)]();}),!![];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa05)]=function(_0x31d1a9){const _0x599d3c=_0x4ab18a,_0x1bad11=$dataCommonEvents[_0x31d1a9];if(!_0x1bad11)return![];if(_0x1bad11[_0x599d3c(0x5fb)][_0x599d3c(0x820)]<=0x1)return![];return!![];},Game_Interpreter[_0x4ab18a(0x49d)]['command301_PreBattleEvent']=function(_0x264296){const _0x1c1e4f=_0x4ab18a,_0x1852f4=VisuMZ['BattleCore'][_0x1c1e4f(0x3f5)]['Mechanics'],_0x5d2bed=_0x1852f4[_0x1c1e4f(0x21a)],_0x3b73f9=$dataCommonEvents[_0x5d2bed];if(_0x3b73f9&&VisuMZ[_0x1c1e4f(0x94c)][_0x1c1e4f(0xa05)](_0x5d2bed)){const _0x137af1=this[_0x1c1e4f(0x80a)]()?this[_0x1c1e4f(0x571)]:0x0,_0x576e32=_0x3b73f9[_0x1c1e4f(0x5fb)];this[_0x1c1e4f(0x2e4)](_0x576e32,_0x137af1),this['_list']=JsonEx[_0x1c1e4f(0x6e6)](this['_list']);const _0x439b85={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x1c1e4f(0x6e6)](_0x264296)};return this[_0x1c1e4f(0x915)][_0x1c1e4f(0x6e3)](this['_index']+0x1,0x0,_0x439b85),!![];}else return VisuMZ[_0x1c1e4f(0x94c)]['Game_Interpreter_command301']['call'](this,_0x264296);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x86c)]=BattleManager[_0x4ab18a(0x85c)],BattleManager[_0x4ab18a(0x85c)]=function(){const _0x39b6b7=_0x4ab18a;VisuMZ[_0x39b6b7(0x94c)][_0x39b6b7(0x86c)][_0x39b6b7(0x45b)](this),this[_0x39b6b7(0x645)]();},BattleManager[_0x4ab18a(0x645)]=function(){const _0x8de236=_0x4ab18a,_0x54bc4e=VisuMZ[_0x8de236(0x94c)]['Settings'][_0x8de236(0x1c6)],_0x3476fc=_0x54bc4e['BattleStartEvent'];if(_0x3476fc&&VisuMZ['BattleCore'][_0x8de236(0xa05)](_0x3476fc)){if(_0x8de236(0x2c2)!==_0x8de236(0xa6))this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x8de236(0x35a)](_0x54bc4e['BattleStartEvent']),$gameMap['updateInterpreter'](),$gameMap[_0x8de236(0x83c)][_0x8de236(0x188)]=!![];else{if(this['item']()[_0x8de236(0x7d0)][_0x8de236(0x378)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x525efc=_0x25a96d(_0x39ea75['$1'])['toUpperCase']()['trim']();return _0x525efc;}return'MANUAL';}}_0x54bc4e[_0x8de236(0x99e)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x981)]=Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x6e2)],Scene_Map['prototype'][_0x4ab18a(0x6e2)]=function(){const _0x55c8d3=_0x4ab18a;if(BattleManager[_0x55c8d3(0x7ac)])return;VisuMZ[_0x55c8d3(0x94c)][_0x55c8d3(0x981)]['call'](this);},VisuMZ['BattleCore'][_0x4ab18a(0x7fb)]=Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x5bb)],Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x5bb)]=function(){const _0x32cde0=_0x4ab18a;BattleManager[_0x32cde0(0x7ac)]?this[_0x32cde0(0x830)]():VisuMZ[_0x32cde0(0x94c)][_0x32cde0(0x7fb)][_0x32cde0(0x45b)](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x526998=_0x4ab18a;this[_0x526998(0x8b)]=!![];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x6e1)]=SceneManager[_0x4ab18a(0x358)],SceneManager[_0x4ab18a(0x358)]=function(){const _0x3f759f=_0x4ab18a;if(BattleManager[_0x3f759f(0x7ac)])return![];return VisuMZ[_0x3f759f(0x94c)][_0x3f759f(0x6e1)][_0x3f759f(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x9ef)]=Game_Interpreter['prototype'][_0x4ab18a(0x6ec)],Game_Interpreter['prototype'][_0x4ab18a(0x6ec)]=function(){const _0x6d26b1=_0x4ab18a;VisuMZ[_0x6d26b1(0x94c)]['Game_Interpreter_terminate'][_0x6d26b1(0x45b)](this);if(this['_preBattleCommonEvent']){if(_0x6d26b1(0x310)!=='JCsXN')return _0x4ebe04[_0x6d26b1(0xa49)];else this['_preBattleCommonEvent']=undefined,SceneManager['_scene'][_0x6d26b1(0x339)]();}},Scene_Map[_0x4ab18a(0x49d)]['battleCoreResumeLaunchBattle']=function(){const _0x295379=_0x4ab18a;BattleManager[_0x295379(0x7ac)]=undefined,BattleManager[_0x295379(0x64f)]=!![],this[_0x295379(0x238)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x705)]=Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)],Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(){const _0x25aff2=_0x4ab18a;VisuMZ['BattleCore'][_0x25aff2(0x705)]['call'](this),BattleManager[_0x25aff2(0x64f)]&&(this[_0x25aff2(0x8b)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x4ab18a(0x94c)]['Scene_Map_initialize']=Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)],Scene_Map[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(){const _0x4e1001=_0x4ab18a;VisuMZ[_0x4e1001(0x94c)][_0x4e1001(0x319)][_0x4e1001(0x45b)](this),$gameTemp[_0x4e1001(0x426)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x461)]=Scene_ItemBase[_0x4ab18a(0x49d)][_0x4ab18a(0x5eb)],Scene_ItemBase['prototype']['applyItem']=function(){const _0x4edcba=_0x4ab18a;VisuMZ[_0x4edcba(0x94c)][_0x4edcba(0x461)][_0x4edcba(0x45b)](this),this[_0x4edcba(0x925)]()[_0x4edcba(0x7d0)][_0x4edcba(0x378)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x4edcba(0x925)]())&&($gameTemp[_0x4edcba(0x288)]=[]);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x263)]=Scene_Options['prototype'][_0x4ab18a(0x22c)],Scene_Options[_0x4ab18a(0x49d)][_0x4ab18a(0x22c)]=function(){const _0x51ac2a=_0x4ab18a;let _0x189317=VisuMZ['BattleCore'][_0x51ac2a(0x263)][_0x51ac2a(0x45b)](this);const _0x23d0d1=VisuMZ[_0x51ac2a(0x94c)]['Settings'];if(_0x23d0d1['AutoBattle'][_0x51ac2a(0x18f)]&&_0x23d0d1[_0x51ac2a(0x581)][_0x51ac2a(0x836)])_0x189317+=0x2;if(_0x23d0d1[_0x51ac2a(0x7bb)][_0x51ac2a(0x18f)]&&_0x23d0d1[_0x51ac2a(0x7bb)]['AdjustRect'])_0x189317+=0x1;return _0x189317;},VisuMZ['BattleCore'][_0x4ab18a(0x423)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(){const _0xe58683=_0x4ab18a;VisuMZ[_0xe58683(0x94c)]['Scene_Battle_initialize']['call'](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x4ab18a(0x94c)]['Scene_Battle_start']=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0xdd)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0xdd)]=function(){const _0x2bb582=_0x4ab18a;if(SceneManager[_0x2bb582(0x6f3)]()){if('FuQyt'!==_0x2bb582(0x261)){for(const _0x14ba49 of _0x47eac8){_0x14ba49['match'](_0x1b5b11);const _0x17eb6a=_0x2305b7(_0x2bda8f['$1'])[_0x2bb582(0x9e7)](',')[_0x2bb582(0x71a)](_0x52884b=>_0x6ff02a(_0x52884b)[_0x2bb582(0x9e5)]()['trim']());_0x2d5a2c=_0x3fa60e[_0x2bb582(0x11d)](_0x17eb6a);}!_0x3d785f[_0x2bb582(0x7d0)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x287d98[_0x2bb582(0x7d0)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else{Scene_Message[_0x2bb582(0x49d)][_0x2bb582(0xdd)][_0x2bb582(0x45b)](this);this[_0x2bb582(0x6f4)]&&this['_spriteset'][_0x2bb582(0x43d)]();if(BattleManager[_0x2bb582(0x52f)]){if('XTZgT'!==_0x2bb582(0x364))BattleManager['revertTpbCachedActor']();else return this['parent'];}}}else VisuMZ['BattleCore'][_0x2bb582(0x50b)][_0x2bb582(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x69f)]=Scene_Battle[_0x4ab18a(0x49d)]['stop'],Scene_Battle['prototype'][_0x4ab18a(0x238)]=function(){const _0x4afb03=_0x4ab18a;SceneManager[_0x4afb03(0x47d)]()?Scene_Message['prototype']['stop'][_0x4afb03(0x45b)](this):_0x4afb03(0x671)===_0x4afb03(0x671)?VisuMZ[_0x4afb03(0x94c)][_0x4afb03(0x69f)][_0x4afb03(0x45b)](this):_0x796633=_0x4afb03(0x23c);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x7d9)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x6ec)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x6ec)]=function(){const _0x127ec7=_0x4ab18a;SceneManager[_0x127ec7(0x47d)]()?Scene_Message['prototype'][_0x127ec7(0x6ec)][_0x127ec7(0x45b)](this):VisuMZ['BattleCore'][_0x127ec7(0x7d9)][_0x127ec7(0x45b)](this),this[_0x127ec7(0x8da)]();},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x85f)]=function(){const _0x582ecc=_0x4ab18a;if(ConfigManager[_0x582ecc(0x22a)]&&ConfigManager[_0x582ecc(0x24d)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x582ecc(0xaf0)]()===_0x582ecc(0x1a7))return![];else{return Scene_Message[_0x582ecc(0x49d)][_0x582ecc(0x85f)][_0x582ecc(0x45b)](this);;}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x280)]=Scene_Battle[_0x4ab18a(0x49d)]['createAllWindows'],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x295)]=function(){const _0x54ea31=_0x4ab18a;this[_0x54ea31(0x6e8)](),VisuMZ['BattleCore'][_0x54ea31(0x280)][_0x54ea31(0x45b)](this),this[_0x54ea31(0x902)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3c4)]=Scene_Battle[_0x4ab18a(0x49d)]['createCancelButton'],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x90a)]=function(){const _0x15cd09=_0x4ab18a;VisuMZ[_0x15cd09(0x94c)][_0x15cd09(0x3c4)][_0x15cd09(0x45b)](this),this['battleLayoutStyle']()===_0x15cd09(0x1a7)&&this[_0x15cd09(0x1e5)]();},Scene_Battle['prototype']['setVisibleUI']=function(_0x5b83f3){const _0x2e7f14=_0x4ab18a;if(_0x5b83f3)this['_windowLayer']['x']=(Graphics[_0x2e7f14(0x999)]-Graphics[_0x2e7f14(0x958)])/0x2,this['_windowLayer']['y']=(Graphics[_0x2e7f14(0x428)]-Graphics[_0x2e7f14(0x138)])/0x2;else{if('fAZzs'!==_0x2e7f14(0x321))this[_0x2e7f14(0x52d)]['x']=Graphics[_0x2e7f14(0x999)]*0xa,this[_0x2e7f14(0x52d)]['y']=Graphics[_0x2e7f14(0x428)]*0xa;else{const _0x44cbf2=this[_0x2e7f14(0xaf0)]();(_0x44cbf2==='border'||this[_0x2e7f14(0x602)]())&&(this[_0x2e7f14(0x7cb)][_0x2e7f14(0xa4a)](),this[_0x2e7f14(0x7cb)]['active']&&this[_0x2e7f14(0x7cb)][_0x2e7f14(0x384)](),this[_0x2e7f14(0x3d2)][_0x2e7f14(0xa4a)](),this[_0x2e7f14(0x3d2)][_0x2e7f14(0x190)]&&this[_0x2e7f14(0x3d2)][_0x2e7f14(0x384)]());}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa2e)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0xad4)],Scene_Battle['prototype'][_0x4ab18a(0xad4)]=function(){const _0x237e7c=_0x4ab18a,_0x4ea959=BattleManager['actor']();VisuMZ[_0x237e7c(0x94c)][_0x237e7c(0xa2e)][_0x237e7c(0x45b)](this);if(_0x4ea959){if(_0x4ea959===BattleManager[_0x237e7c(0x475)]())return;if(_0x4ea959===BattleManager[_0x237e7c(0xf7)])return;if(_0x4ea959[_0x237e7c(0x173)]())_0x4ea959['battler']()[_0x237e7c(0x198)]();}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x556)]=Scene_Battle[_0x4ab18a(0x49d)]['selectPreviousCommand'],Scene_Battle['prototype'][_0x4ab18a(0x3fd)]=function(){const _0x38d5c9=_0x4ab18a,_0x443a4e=BattleManager[_0x38d5c9(0x475)]();if(_0x443a4e&&_0x443a4e[_0x38d5c9(0x173)])_0x443a4e[_0x38d5c9(0x173)]()['stepBack']();VisuMZ[_0x38d5c9(0x94c)]['Scene_Battle_selectPreviousCommand'][_0x38d5c9(0x45b)](this);},VisuMZ['BattleCore'][_0x4ab18a(0x63d)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x135)],Scene_Battle['prototype'][_0x4ab18a(0x135)]=function(){const _0x1634d8=_0x4ab18a;if(VisuMZ[_0x1634d8(0x94c)]['Settings'][_0x1634d8(0x719)][_0x1634d8(0x2fc)])return'RBuXJ'!==_0x1634d8(0x7a4)?!![]:VisuMZ[_0x1634d8(0x94c)]['Settings'][_0x1634d8(0x719)][_0x1634d8(0x2fc)][_0x1634d8(0x45b)](this);return VisuMZ['BattleCore'][_0x1634d8(0x63d)][_0x1634d8(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x88)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x4fe)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x4fe)]=function(){const _0x2602ad=_0x4ab18a;VisuMZ[_0x2602ad(0x94c)][_0x2602ad(0x88)][_0x2602ad(0x45b)](this),this[_0x2602ad(0xc5)]();},Scene_Battle[_0x4ab18a(0x49d)]['createPartyCommandWindowBattleCore']=function(){const _0x34a127=_0x4ab18a,_0x212d80=this[_0x34a127(0x48a)];_0x212d80[_0x34a127(0x9eb)](_0x34a127(0x4ea),this['commandAutoBattle'][_0x34a127(0xae2)](this)),_0x212d80[_0x34a127(0x9eb)](_0x34a127(0x2a0),this[_0x34a127(0x167)]['bind'](this));const _0x320577=this['battleLayoutStyle']();switch(_0x320577){case'xp':case _0x34a127(0x6b3):return this['_partyCommandWindow']['setBackgroundType'](0x1);break;}},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x38d)]=function(){const _0x11f60e=_0x4ab18a;BattleManager[_0x11f60e(0x5cc)]=!![],$gameParty[_0x11f60e(0x10d)](),this[_0x11f60e(0xad4)](),BattleManager['isTpb']()&&(BattleManager[_0x11f60e(0x88f)]=![]);},Scene_Battle[_0x4ab18a(0x49d)]['commandOptions']=function(){const _0x2ac158=_0x4ab18a;this[_0x2ac158(0x53a)]()?(this[_0x2ac158(0x9f4)]=!![],this[_0x2ac158(0x84a)][_0x2ac158(0x448)](_0x2ac158(0x39c),VisuMZ[_0x2ac158(0x94c)][_0x2ac158(0x3f5)][_0x2ac158(0x965)][_0x2ac158(0x961)])):this['callOptions']();},Scene_Battle['prototype']['isQueueOptionsMenu']=function(){const _0x5f2a82=_0x4ab18a;return BattleManager[_0x5f2a82(0x150)]();},Scene_Battle[_0x4ab18a(0x49d)]['callOptions']=function(){const _0x37ccbc=_0x4ab18a;this[_0x37ccbc(0x9f4)]=![],this[_0x37ccbc(0x6f4)]['update'](),this[_0x37ccbc(0x52d)][_0x37ccbc(0x242)]=![];if(BattleManager[_0x37ccbc(0x54c)]()){if('WPYWn'===_0x37ccbc(0x112)){if($dataSystem[_0x37ccbc(0x43b)]||$dataSystem[_0x37ccbc(0x191)]){if(_0x37ccbc(0xa92)!=='lyiuD')SceneManager['snapForBackground']();else{if(!_0x150108['isSideView']())return;_0x49c9bf['BattleCore'][_0x37ccbc(0x3f1)][_0x37ccbc(0x45b)](this,_0x48cc82);}}}else{if(this['battler']())this[_0x37ccbc(0x173)]()[_0x37ccbc(0x1dc)]();}}else{if($gameMap['battleback1Name']()||$gameMap[_0x37ccbc(0x191)]()){if(_0x37ccbc(0x75c)==='xVYzv'){const _0xd2f58=_0x4243df['BattleCore'][_0x37ccbc(0x3f5)]['Damage'],_0x26adf4=new _0xb55c5a();_0x26adf4[_0x37ccbc(0xa01)]=_0xd2f58[_0x37ccbc(0x5b7)],this['sortDamageSprites'](_0x26adf4),_0x26adf4[_0x37ccbc(0x914)](this[_0x37ccbc(0x69e)]),_0x26adf4[_0x37ccbc(0x1c0)](this[_0x37ccbc(0x69e)]),this[_0x37ccbc(0x6ba)](_0x26adf4);}else SceneManager[_0x37ccbc(0x84d)]();}}SceneManager[_0x37ccbc(0x448)](Scene_Options),BattleManager['isTpb']()&&('tRwBs'===_0x37ccbc(0x8ea)?BattleManager[_0x37ccbc(0x52f)]=BattleManager[_0x37ccbc(0x475)]():(this['_borderPortraitTargetX']+=_0x9c2442[_0x37ccbc(0x496)](),this[_0x37ccbc(0x579)]['y']+=_0xd06177['getBattlePortraitOffsetY']()));},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x497)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x5ee)],Scene_Battle[_0x4ab18a(0x49d)]['updateBattleProcess']=function(){const _0x1cb676=_0x4ab18a;VisuMZ[_0x1cb676(0x94c)][_0x1cb676(0x497)][_0x1cb676(0x45b)](this);if(this[_0x1cb676(0x9f4)]&&!BattleManager[_0x1cb676(0xf7)])this[_0x1cb676(0xa6b)]();this[_0x1cb676(0x3ea)]();},Scene_Battle['prototype'][_0x4ab18a(0x902)]=function(){const _0x4136ec=_0x4ab18a,_0x562245=this['autoBattleWindowRect']();this[_0x4136ec(0x349)]=new Window_AutoBattleCancel(_0x562245),this['_autoBattleWindow']['hide'](),this[_0x4136ec(0x19a)](this['_autoBattleWindow']);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0xa7f)]=function(){const _0x26c0b1=_0x4ab18a;return VisuMZ[_0x26c0b1(0x94c)][_0x26c0b1(0x3f5)][_0x26c0b1(0x581)][_0x26c0b1(0x512)][_0x26c0b1(0x45b)](this);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x8da)]=function(){const _0x3114ed=_0x4ab18a;this[_0x3114ed(0x221)]=[];},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x3ea)]=function(){const _0x2d4d82=_0x4ab18a;if(!this[_0x2d4d82(0x221)])return;for(const _0xcc6692 of this['_onceParallelInterpreters']){if(_0xcc6692){if(_0x2d4d82(0x8c3)===_0x2d4d82(0x8c3))_0xcc6692[_0x2d4d82(0x43d)]();else{const _0x39371d=_0x3262f9[_0x2d4d82(0x50a)](_0x5e14d5['toUpperCase']()[_0x2d4d82(0x3a3)]());_0x39371d>=0x0&&_0x39371d<=0x7&&_0xc90102[_0x2d4d82(0x9ff)](_0x39371d)&&_0x1239da[_0x2d4d82(0x361)](_0x39371d);}}}},Scene_Battle[_0x4ab18a(0x49d)]['playOnceParallelInterpreter']=function(_0x523613){const _0x55276d=_0x4ab18a,_0x41b244=$dataCommonEvents[_0x523613];if(!_0x41b244)return;const _0x5ed27c=new Game_BattleOnceParallelInterpreter();this[_0x55276d(0x8e8)](_0x5ed27c),_0x5ed27c['setCommonEvent'](_0x523613);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x8e8)]=function(_0x5f3b32){const _0x146400=_0x4ab18a;this['_onceParallelInterpreters']=this['_onceParallelInterpreters']||[],this[_0x146400(0x221)][_0x146400(0x448)](_0x5f3b32);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x53b)]=function(_0x57239f){const _0x35c0bf=_0x4ab18a;this[_0x35c0bf(0x221)]=this[_0x35c0bf(0x221)]||[],this['_onceParallelInterpreters'][_0x35c0bf(0x8d3)](_0x57239f);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x4ab18a(0x74c)](Game_Interpreter[_0x4ab18a(0x49d)]),Game_BattleOnceParallelInterpreter['prototype']['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x4ab18a(0xa53)]=function(_0x14bb97){const _0x461731=_0x4ab18a,_0x39f025=$dataCommonEvents[_0x14bb97];if(_0x39f025)this['setup'](_0x39f025[_0x461731(0x5fb)],0x0);else{if(_0x461731(0x696)===_0x461731(0x696))this[_0x461731(0x6ec)]();else{if(_0x4a3ce0>_0x4069c7[_0x461731(0x520)])_0x1b3d4f=!![];if(_0x59ce98<_0x33e39b[_0x461731(0x520)])_0x3dccaf=![];}}},Game_BattleOnceParallelInterpreter['prototype'][_0x4ab18a(0x6ec)]=function(){const _0xd16aa0=_0x4ab18a;if(!SceneManager[_0xd16aa0(0xae)]())return;SceneManager[_0xd16aa0(0xa10)][_0xd16aa0(0x53b)](this),Game_Interpreter[_0xd16aa0(0x49d)][_0xd16aa0(0x6ec)][_0xd16aa0(0x45b)](this);},Scene_Battle['prototype'][_0x4ab18a(0xaa)]=function(){const _0x78e06f=_0x4ab18a;return VisuMZ[_0x78e06f(0x94c)][_0x78e06f(0x3f5)]['PartyCmd'][_0x78e06f(0x7bf)];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xaf3)]=Scene_Battle['prototype'][_0x4ab18a(0x2f8)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x2f8)]=function(){const _0x2587b6=_0x4ab18a;this['isPartyCommandWindowDisabled']()?this[_0x2587b6(0x265)]():VisuMZ[_0x2587b6(0x94c)]['Scene_Battle_startPartyCommandSelection']['call'](this);},Scene_Battle['prototype'][_0x4ab18a(0x265)]=function(){const _0x225ee6=_0x4ab18a;if(BattleManager[_0x225ee6(0x4d7)]())this[_0x225ee6(0xad4)]();else BattleManager[_0x225ee6(0x14b)]()&&VisuMZ[_0x225ee6(0x94c)][_0x225ee6(0xaf3)][_0x225ee6(0x45b)](this);},VisuMZ['BattleCore'][_0x4ab18a(0x44f)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x72b)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x72b)]=function(){const _0x117b44=_0x4ab18a;if(BattleManager['isTpb']()){if(_0x117b44(0x160)===_0x117b44(0x246)){if(this[_0x117b44(0x9b4)]())return;this[_0x117b44(0x651)]=!![],this['_deathStateApplied']=![];}else this['tpbCommandFight'](),this['startActorCommandSelection']();}else _0x117b44(0x4fd)==='AUPpw'?VisuMZ['BattleCore'][_0x117b44(0x44f)]['call'](this):this['_pattern']=(this['_pattern']+0x1)%0x4;},Scene_Battle[_0x4ab18a(0x49d)]['tpbCommandFight']=function(){const _0x22017c=_0x4ab18a;if(!VisuMZ[_0x22017c(0x94c)][_0x22017c(0x2c6)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x22017c(0x41b)]())return;const _0x5374d1=$gameParty['aliveMembers']()['filter'](_0x1176c1=>_0x1176c1[_0x22017c(0x8e0)]()&&_0x1176c1[_0x22017c(0xae3)]());BattleManager[_0x22017c(0xabf)]=_0x5374d1[0x0]||null,BattleManager[_0x22017c(0xabf)]&&BattleManager['_currentActor']['setActionState'](_0x22017c(0x2c1));},VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x3fe)],Scene_Battle['prototype'][_0x4ab18a(0x3fe)]=function(){const _0x1869cf=_0x4ab18a;VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindow'][_0x1869cf(0x45b)](this),this[_0x1869cf(0x3a0)]();},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x3a0)]=function(){const _0x22c886=_0x4ab18a,_0x4519ac=this['_actorCommandWindow'];_0x4519ac[_0x22c886(0x9eb)](_0x22c886(0x88e),this['actorCommandEscape'][_0x22c886(0xae2)](this)),_0x4519ac[_0x22c886(0x9eb)]('autoBattle',this['actorCommandAutoBattle'][_0x22c886(0xae2)](this)),_0x4519ac['setHandler']('singleSkill',this[_0x22c886(0x5ad)][_0x22c886(0xae2)](this)),BattleManager[_0x22c886(0x14b)]()&&('gmYii'===_0x22c886(0xae7)?this[_0x22c886(0xaa)]()?delete _0x4519ac[_0x22c886(0x539)][_0x22c886(0x506)]:_0x4519ac[_0x22c886(0x9eb)]('cancel',this[_0x22c886(0x6f9)][_0x22c886(0xae2)](this)):this[_0x22c886(0xa86)]('wait'));},Scene_Battle[_0x4ab18a(0x49d)]['actorCommandEscape']=function(){const _0xcac6bf=_0x4ab18a;this[_0xcac6bf(0x514)]();},Scene_Battle[_0x4ab18a(0x49d)]['actorCommandAutoBattle']=function(){const _0x32706b=_0x4ab18a;BattleManager[_0x32706b(0x475)]()[_0x32706b(0x84b)](),BattleManager[_0x32706b(0x8d1)](),BattleManager['selectNextActor'](),this[_0x32706b(0xa99)]();},Scene_Battle['prototype'][_0x4ab18a(0x5ad)]=function(){const _0x478be4=_0x4ab18a,_0x39338b=BattleManager[_0x478be4(0x83e)]();_0x39338b['setSkill'](this['_actorCommandWindow'][_0x478be4(0x538)]()),this[_0x478be4(0x922)]();},Scene_Battle['prototype'][_0x4ab18a(0x6f9)]=function(){const _0x184f2b=_0x4ab18a;this[_0x184f2b(0x926)]()?'WuGRG'===_0x184f2b(0x8e9)?this[_0x184f2b(0x3bd)]():this['_forcedBattleLayout']=_0x59e533:this[_0x184f2b(0x785)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x2c6)]=![],Scene_Battle['prototype'][_0x4ab18a(0x926)]=function(){const _0x631854=_0x4ab18a;if(Imported[_0x631854(0x684)]&&BattleManager[_0x631854(0x41b)]()){if(_0x631854(0x203)!==_0x631854(0x980))return![];else{if(!_0x3a6757['isSceneBattle']())return;if(!_0x19a2a1[_0x631854(0x7c0)])return;const _0x57ccc3=_0x2cecd8[_0x631854(0x9d8)]();if(!_0x57ccc3)return;_0x57ccc3[_0x631854(0x37d)]('battleZoom');}}else{if(!VisuMZ['BattleCore'][_0x631854(0x2c6)])return![];const _0x2e77d1=$gameParty[_0x631854(0x8bd)]()[_0x631854(0xa47)](_0x1b8e47=>_0x1b8e47[_0x631854(0x8e0)]()&&_0x1b8e47[_0x631854(0xae3)]());return _0x2e77d1[_0x631854(0x820)]>0x0&&BattleManager[_0x631854(0x475)]()!==_0x2e77d1[_0x2e77d1[_0x631854(0x820)]-0x1];}},Scene_Battle['prototype'][_0x4ab18a(0x3bd)]=function(){const _0x4d771b=_0x4ab18a,_0x29b209=BattleManager['actor'](),_0x609c4d=_0x29b209[_0x4d771b(0x173)]();if(_0x609c4d)_0x609c4d[_0x4d771b(0x198)]();const _0x3191cc=$gameParty[_0x4d771b(0x8bd)]()[_0x4d771b(0xa47)](_0x2d3fa6=>_0x2d3fa6['isTpbCharged']()&&_0x2d3fa6[_0x4d771b(0xae3)]()),_0xec29a8=_0x3191cc[_0x4d771b(0x50a)](_0x29b209),_0x11e62a=_0x3191cc[_0xec29a8+0x1];BattleManager[_0x4d771b(0xabf)]=_0x11e62a||null;if(_0x11e62a)_0x11e62a['setActionState']('inputting');_0x29b209['setActionState']('undecided'),this['changeInputWindow']();},Scene_Battle[_0x4ab18a(0x49d)]['processActorCommandCancelTPB']=function(){const _0x4c2bcf=_0x4ab18a;this[_0x4c2bcf(0x48a)][_0x4c2bcf(0x914)](),this['_actorCommandWindow'][_0x4c2bcf(0x9ee)]();if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return;if(Imported[_0x4c2bcf(0x684)]&&BattleManager[_0x4c2bcf(0x41b)]())return;if(BattleManager[_0x4c2bcf(0xabf)]){if(_0x4c2bcf(0x60b)!==_0x4c2bcf(0x9e3)){BattleManager[_0x4c2bcf(0xabf)][_0x4c2bcf(0x219)](_0x4c2bcf(0x701));const _0x474fda=BattleManager[_0x4c2bcf(0xabf)]['battler']();if(_0x474fda)_0x474fda[_0x4c2bcf(0x198)]();}else _0x58277b[_0x4c2bcf(0x94c)]['Scene_Battle_onEnemyOk']['call'](this),this[_0x4c2bcf(0x8fa)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x4ab18a(0x94c)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x924)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x924)]=function(){const _0x548f67=_0x4ab18a;VisuMZ[_0x548f67(0x94c)][_0x548f67(0x42a)]['call'](this),this[_0x548f67(0x46e)]();},Scene_Battle[_0x4ab18a(0x49d)]['createHelpWindowBattleCore']=function(){const _0x299ca8=_0x4ab18a;this[_0x299ca8(0x813)][_0x299ca8(0x98c)](this['_helpWindow']),this[_0x299ca8(0x48a)][_0x299ca8(0x98c)](this[_0x299ca8(0x6de)]);},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0x5d5be2=_0x4ab18a;if($gameTemp[_0x5d5be2(0x6ff)]!==undefined)return $gameTemp[_0x5d5be2(0x6ff)];if(this[_0x5d5be2(0x4be)])return _0x5d5be2(0x884)===_0x5d5be2(0x2a3)?_0x1a0713['aliveMembers']()[_0x5d5be2(0xa47)](_0x161580=>_0x161580!==_0x2b5143):this[_0x5d5be2(0x4be)];return this['_battleLayoutStyle']=VisuMZ['BattleCore']['Settings'][_0x5d5be2(0x377)][_0x5d5be2(0x472)][_0x5d5be2(0x8f8)]()[_0x5d5be2(0x3a3)](),this[_0x5d5be2(0x4be)]===_0x5d5be2(0x9b7)&&!Imported[_0x5d5be2(0x612)]&&(this[_0x5d5be2(0x4be)]='default'),this[_0x5d5be2(0x4be)];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x347)]=Scene_Battle[_0x4ab18a(0x49d)]['windowAreaHeight'],Scene_Battle[_0x4ab18a(0x49d)]['windowAreaHeight']=function(){const _0x36970a=_0x4ab18a,_0x5ada6b=this[_0x36970a(0xaf0)]();switch(_0x5ada6b){case'list':return this[_0x36970a(0x17d)](Math['max'](0x1,$gameParty[_0x36970a(0x6c6)]()),!![]);break;default:return VisuMZ[_0x36970a(0x94c)][_0x36970a(0x347)]['call'](this);break;}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x86a)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x95b)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x95b)]=function(){const _0x5b5ca9=_0x4ab18a,_0x6172f=this[_0x5b5ca9(0xaf0)]();switch(_0x6172f){case _0x5b5ca9(0x1a7):return this['helpWindowRectBorderStyle']();break;case _0x5b5ca9(0x2d9):case _0x5b5ca9(0x5fb):case'xp':case'portrait':default:return VisuMZ[_0x5b5ca9(0x94c)][_0x5b5ca9(0x86a)][_0x5b5ca9(0x45b)](this);break;}},Scene_Battle['prototype'][_0x4ab18a(0x717)]=function(){const _0x308d18=_0x4ab18a,_0x55832c=this[_0x308d18(0xaf0)]();switch(_0x55832c){case'xp':case _0x308d18(0x6b3):return this[_0x308d18(0x192)]();break;case _0x308d18(0x1a7):return this[_0x308d18(0x8cb)]();break;case _0x308d18(0x2d9):case'list':default:return this[_0x308d18(0x580)]();break;}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x513)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x5e3)],Scene_Battle[_0x4ab18a(0x49d)]['partyCommandWindowRect']=function(){const _0x55ad78=_0x4ab18a,_0x43c620=this[_0x55ad78(0xaf0)]();switch(_0x43c620){case'xp':case'portrait':return this[_0x55ad78(0x60a)]();break;case _0x55ad78(0x1a7):return this[_0x55ad78(0xa22)]();case _0x55ad78(0x2d9):case'list':default:return this[_0x55ad78(0x4a8)]();break;}},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x4a8)]=function(){const _0x57bc50=_0x4ab18a,_0x1704ac=VisuMZ[_0x57bc50(0x94c)][_0x57bc50(0x3f5)]['BattleLayout'],_0x1470f8=_0x1704ac[_0x57bc50(0x875)]||0xc0,_0x2b4a48=this['windowAreaHeight'](),_0x47d835=this[_0x57bc50(0x85f)]()?Graphics['boxWidth']-_0x1470f8:0x0,_0x42cd7b=Graphics[_0x57bc50(0x138)]-_0x2b4a48;return new Rectangle(_0x47d835,_0x42cd7b,_0x1470f8,_0x2b4a48);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x31e)]=function(){const _0x200597=_0x4ab18a;return this[_0x200597(0x5e3)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x156)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x2b9)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x2b9)]=function(){const _0x2f3d24=_0x4ab18a,_0x1f2d8c=this[_0x2f3d24(0xaf0)]();switch(_0x1f2d8c){case'xp':case _0x2f3d24(0x6b3):case _0x2f3d24(0x1a7):break;case'default':case'list':default:VisuMZ[_0x2f3d24(0x94c)][_0x2f3d24(0x156)][_0x2f3d24(0x45b)](this);break;}},VisuMZ['BattleCore']['Scene_Battle_startActorSelection']=Scene_Battle['prototype']['startActorSelection'],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x50e)]=function(){const _0x4ce2c0=_0x4ab18a;VisuMZ[_0x4ce2c0(0x94c)]['Scene_Battle_startActorSelection'][_0x4ce2c0(0x45b)](this),this[_0x4ce2c0(0x593)]();},VisuMZ['BattleCore'][_0x4ab18a(0xa80)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x972)],Scene_Battle['prototype']['startEnemySelection']=function(){const _0x2d653c=_0x4ab18a;VisuMZ[_0x2d653c(0x94c)][_0x2d653c(0xa80)][_0x2d653c(0x45b)](this),this[_0x2d653c(0x465)]['autoSelect'](),this[_0x2d653c(0x593)]();},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x593)]=function(){const _0x224108=_0x4ab18a,_0x143017=this[_0x224108(0xaf0)]();if(['xp',_0x224108(0x6b3),_0x224108(0x1a7)][_0x224108(0xb2)](_0x143017)){if(_0x224108(0x2db)===_0x224108(0x2db))this[_0x224108(0x813)][_0x224108(0x9ee)]();else{if(!_0x2b1aec[_0x224108(0xae)]())return;_0x2b902e['ConvertParams'](_0x5acb63,_0x2b711a);const _0x1fa823=_0xbcaae4[_0x224108(0x84a)],_0x22b1f0=_0x414514[_0x224108(0x51f)]&&_0x52b47d[_0x224108(0x4cc)];_0x1fa823[_0x224108(0x39c)](_0xbe1d8d[_0x224108(0x397)]),_0x22b1f0&&_0x38f3a2['VisuMZ_4_CombatLog']&&_0x5a3c9e[_0x224108(0x752)](_0xe7cfaf[_0x224108(0x397)]||'',_0x42963a[_0x224108(0x289)]||0x0);}}(_0x143017===_0x224108(0x1a7)||this[_0x224108(0x602)]())&&(this['_skillWindow']['close'](),this[_0x224108(0x3d2)][_0x224108(0x9ee)]());},VisuMZ[_0x4ab18a(0x94c)]['Scene_Battle_onActorOk']=Scene_Battle['prototype'][_0x4ab18a(0x734)],Scene_Battle[_0x4ab18a(0x49d)]['onActorOk']=function(){VisuMZ['BattleCore']['Scene_Battle_onActorOk']['call'](this),this['okTargetSelectionVisibility']();},Scene_Battle['prototype']['isNonSubmenuCancel']=function(){const _0x245d75=_0x4ab18a;return[_0x245d75(0x141),'guard',_0x245d75(0x7e2)][_0x245d75(0xb2)](this[_0x245d75(0x813)]['currentSymbol']());},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3e3)]=Scene_Battle['prototype']['onActorCancel'],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x52e)]=function(){const _0x31532f=_0x4ab18a;this['isNonSubmenuCancel']()?(this['_statusWindow'][_0x31532f(0x384)](),this[_0x31532f(0x437)]['hide'](),this[_0x31532f(0x813)]['activate']()):VisuMZ['BattleCore'][_0x31532f(0x3e3)]['call'](this),this[_0x31532f(0xa8c)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x518)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x578)],Scene_Battle[_0x4ab18a(0x49d)]['onEnemyOk']=function(){const _0x3513b5=_0x4ab18a;VisuMZ[_0x3513b5(0x94c)][_0x3513b5(0x518)]['call'](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x1b4)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x1cc)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x1cc)]=function(){const _0x32845b=_0x4ab18a;if(this[_0x32845b(0x7b0)]())this['_statusWindow'][_0x32845b(0x384)](),this['_enemyWindow']['hide'](),this[_0x32845b(0x813)][_0x32845b(0x96a)]();else{if(_0x32845b(0x561)!==_0x32845b(0x561)){const _0x395f59=_0x228264['BattleCore'][_0x32845b(0x3f5)][_0x32845b(0x377)],_0xdf5291=_0x395f59[_0x32845b(0x875)]||0xc0,_0x2182c5=this[_0x32845b(0x1b1)](),_0x356ab9=this[_0x32845b(0x85f)]()?_0x34e9df[_0x32845b(0x958)]-_0xdf5291:0x0,_0x5403d8=_0x3bcfff[_0x32845b(0x138)]-_0x2182c5;return new _0x347948(_0x356ab9,_0x5403d8,_0xdf5291,_0x2182c5);}else VisuMZ[_0x32845b(0x94c)][_0x32845b(0x1b4)][_0x32845b(0x45b)](this);}this[_0x32845b(0xa8c)]();},Scene_Battle[_0x4ab18a(0x49d)]['okTargetSelectionVisibility']=function(){const _0x4dbc18=_0x4ab18a,_0xd8bb3e=this[_0x4dbc18(0xaf0)]();(_0xd8bb3e===_0x4dbc18(0x1a7)||this[_0x4dbc18(0x602)]())&&(this[_0x4dbc18(0x7cb)][_0x4dbc18(0xa4a)](),this['_skillWindow'][_0x4dbc18(0x190)]&&this['_skillWindow'][_0x4dbc18(0x384)](),this[_0x4dbc18(0x3d2)][_0x4dbc18(0xa4a)](),this[_0x4dbc18(0x3d2)][_0x4dbc18(0x190)]&&this[_0x4dbc18(0x3d2)][_0x4dbc18(0x384)]());},Scene_Battle['prototype'][_0x4ab18a(0xa8c)]=function(){const _0x50c25a=_0x4ab18a,_0x3354fa=this['battleLayoutStyle']();['xp',_0x50c25a(0x6b3),_0x50c25a(0x1a7)][_0x50c25a(0xb2)](_0x3354fa)&&this[_0x50c25a(0x813)][_0x50c25a(0xa4a)](),this[_0x50c25a(0x8fa)]();},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x580)]=function(){const _0x5090dc=_0x4ab18a,_0x357914=VisuMZ[_0x5090dc(0x94c)][_0x5090dc(0x3f5)][_0x5090dc(0x377)],_0x587638=Window_BattleStatus[_0x5090dc(0x49d)][_0x5090dc(0x251)](),_0x4f9a4a=Graphics[_0x5090dc(0x958)]-(_0x357914['CommandWidth']||0xc0),_0x2b9959=this[_0x5090dc(0x1b1)]()+_0x587638,_0x22e098=this[_0x5090dc(0x85f)]()?0x0:Graphics[_0x5090dc(0x958)]-_0x4f9a4a,_0x43ce1a=Graphics[_0x5090dc(0x138)]-_0x2b9959+_0x587638;return new Rectangle(_0x22e098,_0x43ce1a,_0x4f9a4a,_0x2b9959);},Scene_Battle[_0x4ab18a(0x49d)]['statusWindowRectXPStyle']=function(){const _0xc5f987=_0x4ab18a,_0x454d91=Window_BattleStatus[_0xc5f987(0x49d)][_0xc5f987(0x251)](),_0x2040ec=Graphics['boxWidth'],_0x4b15a8=this[_0xc5f987(0x1b1)]()+_0x454d91,_0x12593c=0x0,_0x34074d=Graphics[_0xc5f987(0x138)]-_0x4b15a8+_0x454d91;return new Rectangle(_0x12593c,_0x34074d,_0x2040ec,_0x4b15a8);},Scene_Battle[_0x4ab18a(0x49d)]['partyCommandWindowRectXPStyle']=function(){const _0x1daba9=_0x4ab18a,_0x31d8b9=Graphics[_0x1daba9(0x958)]/0x2,_0x52fc11=this[_0x1daba9(0x17d)](VisuMZ[_0x1daba9(0x94c)][_0x1daba9(0x3f5)][_0x1daba9(0x377)][_0x1daba9(0x889)],!![]),_0x103c8d=Math['round']((Graphics[_0x1daba9(0x958)]-_0x31d8b9)/0x2),_0x526703=Graphics[_0x1daba9(0x138)]-_0x52fc11-this[_0x1daba9(0x192)]()[_0x1daba9(0x428)];return new Rectangle(_0x103c8d,_0x526703,_0x31d8b9,_0x52fc11);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x857)]=function(){const _0x3a6e74=_0x4ab18a,_0x39d3f2=Graphics['width'],_0x3dfb0e=Math[_0x3a6e74(0x1e2)]((Graphics['boxWidth']-_0x39d3f2)/0x2),_0x81bcd1=this[_0x3a6e74(0x72d)](),_0x19437f=(Graphics['height']-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x3dfb0e,_0x19437f,_0x39d3f2,_0x81bcd1);},Scene_Battle[_0x4ab18a(0x49d)]['statusWindowRectBorderStyle']=function(){const _0x4461d2=_0x4ab18a,_0x1985fd=Graphics['width'],_0x4e8d13=Math[_0x4461d2(0x1e2)]((Graphics[_0x4461d2(0x958)]-_0x1985fd)/0x2),_0x29ebc0=this['calcWindowHeight'](0x4,!![]),_0x1c6e06=Graphics[_0x4461d2(0x138)]-_0x29ebc0+(Graphics[_0x4461d2(0x428)]-Graphics[_0x4461d2(0x138)])/0x2;return new Rectangle(_0x4e8d13,_0x1c6e06,_0x1985fd,_0x29ebc0);},Scene_Battle['prototype'][_0x4ab18a(0xa22)]=function(){const _0x41dbfa=_0x4ab18a,_0x10b0f9=Math[_0x41dbfa(0x831)](Graphics['width']/0x3),_0x26091b=this['isRightInputMode']()?(Graphics[_0x41dbfa(0x999)]+Graphics[_0x41dbfa(0x958)])/0x2-_0x10b0f9:(Graphics[_0x41dbfa(0x999)]-Graphics[_0x41dbfa(0x958)])/-0x2,_0x3ce893=this['helpWindowRectBorderStyle'](),_0x441787=_0x3ce893['y']+_0x3ce893['height'],_0x3c0a72=this[_0x41dbfa(0x8cb)](),_0x21b90d=_0x3c0a72['y']-_0x441787;return new Rectangle(_0x26091b,_0x441787,_0x10b0f9,_0x21b90d);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x459)]=function(){const _0x52f21f=_0x4ab18a,_0x1c1b4f=Math[_0x52f21f(0x3c2)](Graphics[_0x52f21f(0x999)]/0x3),_0x336103=Math[_0x52f21f(0x1e2)]((Graphics['boxWidth']-_0x1c1b4f)/0x2),_0x1a81e9=this[_0x52f21f(0xa22)](),_0x4d85c3=_0x1a81e9['y'],_0x2eb14a=_0x1a81e9[_0x52f21f(0x428)];return new Rectangle(_0x336103,_0x4d85c3,_0x1c1b4f,_0x2eb14a);},Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x1e5)]=function(){const _0x4124bf=_0x4ab18a;this['_cancelButton']['y']=this['_helpWindow']['y']+this[_0x4124bf(0x6de)][_0x4124bf(0x428)],this[_0x4124bf(0x85f)]()?this[_0x4124bf(0xaf0)]()===_0x4124bf(0x1a7)?this[_0x4124bf(0x36f)]['x']=0x8:this[_0x4124bf(0x36f)]['x']=-this['_cancelButton'][_0x4124bf(0x999)]-0x4:this['_cancelButton']['x']=Graphics[_0x4124bf(0x999)]-(Graphics['width']-Graphics[_0x4124bf(0x958)])/0x2-this[_0x4124bf(0x36f)][_0x4124bf(0x999)]-0x4;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x9ea)]=Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x12e)],Scene_Battle['prototype']['skillWindowRect']=function(){const _0x40b8e6=_0x4ab18a;if(this['battleLayoutStyle']()===_0x40b8e6(0x1a7))return this[_0x40b8e6(0x459)]();else{if(this['isSkillItemWindowsMiddle']()){if(_0x40b8e6(0x587)!==_0x40b8e6(0x587)){if(!_0xbaded5['isSceneBattle']())return;if(!_0x4a73d1[_0x40b8e6(0x8f2)])return;if(!_0xd5613c['isPTB']())return;_0x1e4405[_0x40b8e6(0x3cb)](_0x3691a8,_0x2d0805);const _0x49a572=_0x386c14['_subject']['friendsUnit']();let _0x167ce6=_0x43a4b3[_0x40b8e6(0x46f)],_0x217b7c=_0x30820d[_0x40b8e6(0x55a)];_0x49a572[_0x40b8e6(0x5d4)](_0x167ce6),_0x49a572[_0x40b8e6(0x8ae)](_0x217b7c);}else return this['skillItemWindowRectMiddle']();}else{if('ofRap'==='ofRap')return VisuMZ[_0x40b8e6(0x94c)]['Scene_Battle_skillWindowRect'][_0x40b8e6(0x45b)](this);else _0xa10315[_0x40b8e6(0x7c6)](_0x2b575d,_0xcf8557,_0x4f7d32,_0x487040,_0x24d234,-0x1),this['callNextMethod']();}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x1aa)]=Scene_Battle['prototype'][_0x4ab18a(0x134)],Scene_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x134)]=function(){const _0x3927f1=_0x4ab18a;if(this[_0x3927f1(0xaf0)]()===_0x3927f1(0x1a7)){if(_0x3927f1(0x3de)===_0x3927f1(0x3de))return this[_0x3927f1(0x459)]();else{if(!this[_0x3927f1(0x925)]()[_0x3927f1(0x938)][_0x3927f1(0x33e)])return 0x0;let _0x146268=_0x12ca60['BattleCore']['Settings'][_0x3927f1(0x486)]['CriticalHitRateJS'][_0x3927f1(0x45b)](this,_0x5383b8);return _0x146268=this['_multipliers'][_0x3927f1(0x8f0)]*_0x146268+this[_0x3927f1(0x3cf)][_0x3927f1(0x765)],_0x146268;}}else{if(this[_0x3927f1(0x602)]()){if(_0x3927f1(0x82a)===_0x3927f1(0x8a1)){if(!this[_0x3927f1(0x394)]())return![];const _0x1491d2=this[_0x3927f1(0x173)]();if(!_0x1491d2)return![];const _0x3c0ced=_0x1491d2['_svBattlerSprite'];if(!_0x3c0ced)return![];const _0x16d13b=_0x3c0ced[_0x3927f1(0x712)];return _0x16d13b&&!_0x16d13b['loop'];}else return this['skillItemWindowRectMiddle']();}else{if(_0x3927f1(0x2c4)===_0x3927f1(0x9c4))_0x1569aa=_0x5f5322[_0x3927f1(0x958)]/0x2,_0x4b1e84=_0x2e24ad[_0x3927f1(0x138)]/0x2;else return VisuMZ[_0x3927f1(0x94c)][_0x3927f1(0x1aa)][_0x3927f1(0x45b)](this);}}},Scene_Battle['prototype'][_0x4ab18a(0x602)]=function(){const _0x53918b=_0x4ab18a;return VisuMZ[_0x53918b(0x94c)]['Settings'][_0x53918b(0x377)][_0x53918b(0x478)];},Scene_Battle['prototype'][_0x4ab18a(0x840)]=function(){const _0x80ac45=_0x4ab18a,_0x2341e6=Sprite_Button[_0x80ac45(0x49d)][_0x80ac45(0x14a)]()*0x2+0x4;let _0x67ff21=Graphics[_0x80ac45(0x958)]-_0x2341e6;Imported[_0x80ac45(0x1fc)]&&SceneManager[_0x80ac45(0x527)]()&&(_0x67ff21+=_0x2341e6);const _0x3f007b=this[_0x80ac45(0x9ca)](),_0x5c7ef2=Graphics[_0x80ac45(0x138)]-_0x3f007b-this[_0x80ac45(0x717)]()['height']+Window_BattleStatus[_0x80ac45(0x49d)][_0x80ac45(0x251)](),_0x5f11c3=0x0;return new Rectangle(_0x5f11c3,_0x3f007b,_0x67ff21,_0x5c7ef2);},Scene_Battle['prototype'][_0x4ab18a(0x6e8)]=function(){const _0x365c89=_0x4ab18a;if(!VisuMZ[_0x365c89(0x94c)]['Settings'][_0x365c89(0x582)]['NameLegacy'])return;this[_0x365c89(0x937)]=new Sprite(),this['_enemyNameContainer']['x']=this['_windowLayer']['x'],this[_0x365c89(0x937)]['y']=this[_0x365c89(0x52d)]['y'];const _0x546e50=this[_0x365c89(0x16b)]['indexOf'](this[_0x365c89(0x52d)]);this['addChildAt'](this[_0x365c89(0x937)],_0x546e50);for(let _0x559688=0x0;_0x559688<0x8;_0x559688++){if(_0x365c89(0x56e)===_0x365c89(0x56e)){const _0x20cccb=new Window_EnemyName(_0x559688);this[_0x365c89(0x937)][_0x365c89(0x19a)](_0x20cccb);}else{const _0x5c6f70=_0x4bb865(_0x127690['$1'])[_0x365c89(0x9e7)](/[\r\n]+/)[_0x365c89(0x8d3)](''),_0x4d3279=_0x549220[_0x365c89(0x3eb)](_0x5c6f70);_0x4607b4['wtypeId']=_0x274ca6[_0x365c89(0x16f)](_0x4d3279);}}},Sprite_Battler[_0x4ab18a(0x355)]=VisuMZ[_0x4ab18a(0x94c)]['Settings'][_0x4ab18a(0x56a)][_0x4ab18a(0xa5e)],VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x549)]=Sprite_Battler['prototype'][_0x4ab18a(0x78b)],Sprite_Battler['prototype'][_0x4ab18a(0x78b)]=function(){const _0x27a33c=_0x4ab18a;VisuMZ['BattleCore'][_0x27a33c(0x549)][_0x27a33c(0x45b)](this),this[_0x27a33c(0x87b)]();if(this[_0x27a33c(0x164)]===Sprite_Enemy)this[_0x27a33c(0x5f5)]();this[_0x27a33c(0x12a)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x87b)]=function(){const _0x535cd2=_0x4ab18a;this[_0x535cd2(0x520)]=0x0,this[_0x535cd2(0x5e7)]=0x0,this[_0x535cd2(0x9d1)]=0x0,this['_targetFloatHeight']=0x0,this[_0x535cd2(0x29b)]=0x0,this[_0x535cd2(0x7df)]=0x0,this[_0x535cd2(0x554)]=_0x535cd2(0xfb),this[_0x535cd2(0x744)]=0x0,this[_0x535cd2(0x747)]=0x0,this[_0x535cd2(0x35b)]=0x0,this[_0x535cd2(0x753)]=0x0,this[_0x535cd2(0x5b6)]=0xff,this[_0x535cd2(0x41e)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x535cd2(0x797)]=_0x535cd2(0xfb),this[_0x535cd2(0x736)]=0x0,this['_targetAngle']=0x0,this[_0x535cd2(0x40f)]=0x0,this[_0x535cd2(0x260)]=0x0,this[_0x535cd2(0x879)]=_0x535cd2(0xfb),this[_0x535cd2(0x276)]=!![],this['_skewX']=0x0,this['_skewY']=0x0,this[_0x535cd2(0x435)]=0x0,this[_0x535cd2(0x1ca)]=0x0,this[_0x535cd2(0xae0)]=0x0,this[_0x535cd2(0xdf)]=0x0,this[_0x535cd2(0x9ab)]=_0x535cd2(0xfb),this['_growX']=0x1,this[_0x535cd2(0x1f5)]=0x1,this[_0x535cd2(0x436)]=0x1,this[_0x535cd2(0xcd)]=0x1,this[_0x535cd2(0x949)]=0x0,this['_growWholeDuration']=0x0,this['_growEasing']=_0x535cd2(0xfb),this[_0x535cd2(0x84f)]=0x1;},Sprite_Battler['prototype'][_0x4ab18a(0x5f5)]=function(){const _0x5026fb=_0x4ab18a;this[_0x5026fb(0x422)]=new Sprite(),this[_0x5026fb(0x422)][_0x5026fb(0x6db)]=ImageManager[_0x5026fb(0xac4)](_0x5026fb(0x4c6)),this[_0x5026fb(0x422)][_0x5026fb(0x6db)][_0x5026fb(0xa6f)]=VisuMZ['BattleCore'][_0x5026fb(0x3f5)][_0x5026fb(0x56a)][_0x5026fb(0x4a9)],this[_0x5026fb(0x422)][_0x5026fb(0x8a)]['x']=0.5,this[_0x5026fb(0x422)]['anchor']['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x5026fb(0x422)][_0x5026fb(0x242)]=![],this[_0x5026fb(0x19a)](this['_shadowSprite']);},Sprite_Battler['prototype']['createDistortionSprite']=function(){const _0x4eb673=_0x4ab18a;this[_0x4eb673(0x8b7)]=new Sprite(),this[_0x4eb673(0x8b7)][_0x4eb673(0x8a)]['x']=0.5,this[_0x4eb673(0x8b7)]['anchor']['y']=0.5,this[_0x4eb673(0x19a)](this[_0x4eb673(0x8b7)]);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x989)]=function(){const _0x32d1cb=_0x4ab18a;if(!this['_distortionSprite'])return;if(this[_0x32d1cb(0x422)]){const _0x56394a=this['getChildIndex'](this['_distortionSprite']);this[_0x32d1cb(0xa1b)](this['_shadowSprite'],_0x56394a),this['updateShadowVisibility']();}this[_0x32d1cb(0x1f8)]&&this['_distortionSprite'][_0x32d1cb(0x19a)](this['_svBattlerSprite']);if(this[_0x32d1cb(0x8b0)]){if(_0x32d1cb(0x34d)!==_0x32d1cb(0x34d)){let _0x1f8aab=0x0;return _0x1f8aab;}else this[_0x32d1cb(0x8b7)][_0x32d1cb(0x19a)](this[_0x32d1cb(0x8b0)]);}if(this[_0x32d1cb(0x610)]){if(_0x32d1cb(0x19f)!=='KErDM')this['_distortionSprite'][_0x32d1cb(0x19a)](this['_mainSprite']);else{if(!_0xfe3cce['BattleCore']['Settings'][_0x32d1cb(0x719)][_0x32d1cb(0x5f2)])return;const _0x5c275c=_0x417b7f[_0x32d1cb(0x2d4)](),_0x4c48a8=_0x5c275c['removedStateObjects']();for(const _0xccf24d of _0x4c48a8){_0xccf24d[_0x32d1cb(0x3aa)]&&(this[_0x32d1cb(0x448)]('fnordRemovedStates'),this['push'](_0x32d1cb(0x338)),this[_0x32d1cb(0x448)](_0x32d1cb(0xacc)),this[_0x32d1cb(0x448)]('addText',_0xccf24d[_0x32d1cb(0x3aa)][_0x32d1cb(0x278)](_0x2ddefc['name']())),this[_0x32d1cb(0x448)](_0x32d1cb(0x1d4)));}}}this[_0x32d1cb(0x411)]&&this[_0x32d1cb(0x8b7)][_0x32d1cb(0x19a)](this[_0x32d1cb(0x411)]);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x1d8)]=function(){const _0x3e2f8e=_0x4ab18a;if(!this[_0x3e2f8e(0x422)])return;if(this[_0x3e2f8e(0x69e)]&&this[_0x3e2f8e(0x69e)][_0x3e2f8e(0x4de)]()){const _0x412204=this['_shadowSprite'][_0x3e2f8e(0x6db)];this['_shadowSprite'][_0x3e2f8e(0x849)](0x0,0x0,_0x412204['width'],_0x412204[_0x3e2f8e(0x428)]);}else this[_0x3e2f8e(0x422)][_0x3e2f8e(0x849)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x41d)]=function(){const _0x58ac3d=_0x4ab18a;return SceneManager[_0x58ac3d(0xae)]()?_0x58ac3d(0x139)!==_0x58ac3d(0x139)?_0x4cbfbc[_0x58ac3d(0x1fc)]?_0x4817cf[_0x58ac3d(0xa43)](_0x58ac3d(0x506)):_0x45dffc[_0x58ac3d(0x94c)][_0x58ac3d(0x3f5)][_0x58ac3d(0x581)][_0x58ac3d(0x48e)]:SceneManager[_0x58ac3d(0xa10)][_0x58ac3d(0x6f4)][_0x58ac3d(0x2a5)]:this['parent'];},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x79a)]=function(_0x1bd80b,_0x41e91b){const _0x1a39d4=_0x4ab18a;if(!this['_battler'][_0x1a39d4(0x9ec)]())return;const _0x52e2ee=VisuMZ[_0x1a39d4(0x94c)][_0x1a39d4(0x3f5)][_0x1a39d4(0x486)],_0x290866=new Sprite_Damage();_0x290866[_0x1a39d4(0xa01)]=_0x52e2ee[_0x1a39d4(0x5b7)],this[_0x1a39d4(0x380)](_0x290866),_0x290866[_0x1a39d4(0x79a)](_0x1bd80b,_0x41e91b),this[_0x1a39d4(0x6ba)](_0x290866);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x652)]=function(_0x18c5a2,_0x4a9232,_0x360fe7){const _0x2ab412=_0x4ab18a;if(!this[_0x2ab412(0x69e)]['isSpriteVisible']())return;const _0x412583=VisuMZ['BattleCore']['Settings'][_0x2ab412(0x486)],_0x1aa744=new Sprite_Damage();_0x1aa744[_0x2ab412(0xa01)]=_0x412583[_0x2ab412(0x5b7)],this[_0x2ab412(0x380)](_0x1aa744),_0x1aa744[_0x2ab412(0x652)](_0x18c5a2,_0x4a9232,_0x360fe7),this[_0x2ab412(0x6ba)](_0x1aa744);},Sprite_Battler[_0x4ab18a(0x49d)]['setupDamagePopup']=function(){const _0x2219d6=_0x4ab18a;if(!this[_0x2219d6(0x69e)][_0x2219d6(0x996)]())return;while(this[_0x2219d6(0x69e)][_0x2219d6(0x996)]()){if(this[_0x2219d6(0x69e)][_0x2219d6(0x9ec)]()){if(_0x2219d6(0x6aa)!=='nbDpK')this[_0x2219d6(0xaca)]();else{if(!_0x89c6ff[_0x2219d6(0x31a)]())return;_0x23bdc8[_0x2219d6(0x63c)](this['_methods'][_0x2219d6(0x71a)](_0x400c48=>_0x400c48['name'])[_0x2219d6(0x9bf)]('\x0a'));}}}this[_0x2219d6(0x69e)][_0x2219d6(0x297)](),this[_0x2219d6(0x69e)][_0x2219d6(0x656)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xaca)]=function(){const _0x1eaffd=_0x4ab18a,_0x2c5efd=VisuMZ['BattleCore']['Settings'][_0x1eaffd(0x486)],_0x159d8d=new Sprite_Damage();_0x159d8d[_0x1eaffd(0xa01)]=_0x2c5efd['PopupDuration'],this[_0x1eaffd(0x380)](_0x159d8d),_0x159d8d[_0x1eaffd(0x914)](this[_0x1eaffd(0x69e)]),_0x159d8d[_0x1eaffd(0x1c0)](this[_0x1eaffd(0x69e)]),this['addDamageSprite'](_0x159d8d);},Sprite_Battler[_0x4ab18a(0x49d)]['addDamageSprite']=function(_0xae4563){const _0x72d778=_0x4ab18a;this[_0x72d778(0xa56)][_0x72d778(0x448)](_0xae4563);if(this[_0x72d778(0x7db)]())SceneManager[_0x72d778(0xa10)][_0x72d778(0xc3)]['addDamageSprite'](_0xae4563,this[_0x72d778(0x69e)]);else{if(_0x72d778(0x1af)!==_0x72d778(0xa73)){this[_0x72d778(0x41d)]()['addChild'](_0xae4563);if(SceneManager[_0x72d778(0x313)]())_0xae4563[_0x72d778(0x443)]['x']=-0x1;}else this[_0x72d778(0xaa)]()?delete _0x315222[_0x72d778(0x539)]['cancel']:_0x174cba['setHandler'](_0x72d778(0x506),this[_0x72d778(0x6f9)][_0x72d778(0xae2)](this));}},Sprite_Battler[_0x4ab18a(0x49d)]['isShownOnBattlePortrait']=function(){const _0x384388=_0x4ab18a;return!$gameSystem[_0x384388(0x332)]()&&this[_0x384388(0x69e)]&&this['_battler'][_0x384388(0x526)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x380)]=function(_0x258d6b){const _0x51a78d=_0x4ab18a;this[_0x51a78d(0x307)](_0x258d6b,!![]);const _0x5090e4=VisuMZ[_0x51a78d(0x94c)][_0x51a78d(0x3f5)][_0x51a78d(0x486)],_0x5799c8=SceneManager[_0x51a78d(0x313)]()?-0x1:0x1;if(_0x5090e4[_0x51a78d(0xaa8)])for(const _0x2a3463 of this[_0x51a78d(0xa56)]){_0x2a3463['x']+=_0x5090e4[_0x51a78d(0x973)]*_0x5799c8,_0x2a3463['y']+=_0x5090e4[_0x51a78d(0x1d7)];}else{const _0x430da9=this[_0x51a78d(0xa56)][this[_0x51a78d(0xa56)]['length']-0x1];if(_0x430da9){if(_0x51a78d(0x865)!==_0x51a78d(0x865)){const _0x415969=this['weapons']();_0x4c0c06=_0x415969[_0x550307]?_0x415969[_0x41d489][_0x51a78d(0x6ad)]:0x0;}else _0x258d6b['x']=_0x430da9['x']+_0x5090e4['PopupShiftX']*_0x5799c8,_0x258d6b['y']=_0x430da9['y']+_0x5090e4[_0x51a78d(0x1d7)];}}},Sprite_Battler['prototype']['alignBattleCoreDamageSprite']=function(_0x3f43f4,_0x41b1e6){const _0x3c7026=_0x4ab18a,_0x27cd1b=SceneManager[_0x3c7026(0x313)]()?-0x1:0x1;let _0x55ef29=this[_0x3c7026(0x520)];_0x55ef29+=this[_0x3c7026(0xa5f)]();let _0x59c0aa=this['_baseY'];const _0x590aca=this['_distortionSprite']['scale']['y'];_0x59c0aa+=this[_0x3c7026(0x3e0)]();const _0xa9cb07=SceneManager[_0x3c7026(0xa10)][_0x3c7026(0xc3)];if(_0xa9cb07&&this[_0x3c7026(0x761)]===_0xa9cb07){if(_0x3c7026(0x15d)!==_0x3c7026(0x9d0)){_0x55ef29+=_0xa9cb07['x']-this[_0x3c7026(0x82f)]();const _0x3dec73=_0xa9cb07[_0x3c7026(0x6fe)]()*0x3/0x4;_0x59c0aa=_0xa9cb07['y']+_0x3dec73,_0x59c0aa=Math['min'](_0x59c0aa,_0xa9cb07['y']+this['y']-this[_0x3c7026(0x428)]+_0x3dec73);}else{const _0x139928=_0x1a1bf2[_0x3c7026(0x7d0)];if(_0x139928[_0x3c7026(0x378)](_0x20e8cb[_0x3c7026(0x94c)][_0x3c7026(0x90b)][_0x4c5aad])){const _0x28afdd=_0x49f6d9['$1'],_0x5a4a3f=_0x3c7026(0x331)[_0x3c7026(0x278)](_0x28afdd),_0x498220=_0x2b9921[_0x3c7026(0x94c)]['createKeyJS'](_0x25603d,_0x4388d0);_0x786edd[_0x3c7026(0x94c)]['JS'][_0x498220]=new _0x14f69f(_0x5a4a3f);}}}_0x3f43f4['x']=Math['round'](_0x55ef29+this['damageOffsetX']()*_0x27cd1b),_0x3f43f4['y']=Math[_0x3c7026(0x1e2)](_0x59c0aa+this['damageOffsetY']());},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x853)]=Sprite_Battler['prototype'][_0x4ab18a(0x82f)],Sprite_Battler['prototype']['damageOffsetX']=function(){const _0x269eb0=_0x4ab18a;let _0x50b10a=VisuMZ[_0x269eb0(0x94c)]['Sprite_Battler_damageOffsetX'][_0x269eb0(0x45b)](this),_0x3d6c6c=VisuMZ[_0x269eb0(0x94c)][_0x269eb0(0x3f5)]['Damage'][_0x269eb0(0xa2a)]||0x0;return Math[_0x269eb0(0x1e2)](_0x50b10a+_0x3d6c6c);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x37e)]=Sprite_Battler['prototype'][_0x4ab18a(0xad8)],Sprite_Battler['prototype'][_0x4ab18a(0xad8)]=function(){const _0x1e75c3=_0x4ab18a;let _0x592a38=VisuMZ['BattleCore'][_0x1e75c3(0x37e)]['call'](this);switch(VisuMZ[_0x1e75c3(0x94c)][_0x1e75c3(0x3f5)]['Damage']['PopupPosition']){case _0x1e75c3(0x25b):_0x592a38-=this[_0x1e75c3(0x428)]*this[_0x1e75c3(0x443)]['y'];break;case _0x1e75c3(0x419):_0x592a38-=this[_0x1e75c3(0x428)]*this[_0x1e75c3(0x443)]['y']*0.5;break;}let _0x19db32=VisuMZ[_0x1e75c3(0x94c)][_0x1e75c3(0x3f5)][_0x1e75c3(0x486)][_0x1e75c3(0x4b3)]||0x0;return Math[_0x1e75c3(0x1e2)](_0x592a38+_0x19db32);},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x82f)]=function(){const _0x7646d1=_0x4ab18a;return Sprite_Battler[_0x7646d1(0x49d)]['damageOffsetX'][_0x7646d1(0x45b)](this);},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0xad8)]=function(){const _0x33acf8=_0x4ab18a;return Sprite_Battler['prototype']['damageOffsetY'][_0x33acf8(0x45b)](this);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7a2)]=function(_0x37f76a){const _0x47bdec=_0x4ab18a;this[_0x47bdec(0x7db)]()?SceneManager[_0x47bdec(0xa10)][_0x47bdec(0xc3)]['removeDamageSprite'](_0x37f76a):(this['damageContainer']()[_0x47bdec(0xac7)](_0x37f76a),this[_0x47bdec(0xa56)][_0x47bdec(0x8d3)](_0x37f76a),_0x37f76a[_0x47bdec(0x3c0)]());},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x72e)]=Sprite_Battler[_0x4ab18a(0x49d)]['setHome'],Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x6ce)]=function(_0x3fc57c,_0x539844){const _0x5779b6=_0x4ab18a,_0x41d80b=VisuMZ[_0x5779b6(0x94c)][_0x5779b6(0x3f5)];if(this['constructor']===Sprite_Actor){if(_0x5779b6(0x7fc)!=='YKDlk')_0x3fc57c+=_0x41d80b['Actor'][_0x5779b6(0x4c3)]||0x0,_0x539844+=_0x41d80b[_0x5779b6(0x56a)]['OffsetY']||0x0;else{if(this[_0x5779b6(0x394)]()){if(this[_0x5779b6(0x21c)]()>=0x1)return!![];return this[_0x5779b6(0x30f)]()[_0x5779b6(0x66e)];}else return!![];}}else this[_0x5779b6(0x164)]===Sprite_Enemy&&(_0x5779b6(0x4a0)!==_0x5779b6(0x4a0)?this[_0x5779b6(0x58c)](_0x2020fe,_0x502d2b,_0x50a250):(_0x3fc57c+=_0x41d80b[_0x5779b6(0x582)][_0x5779b6(0x4c3)]||0x0,_0x539844+=_0x41d80b['Enemy'][_0x5779b6(0xab3)]||0x0));VisuMZ['BattleCore']['Sprite_Battler_setHome'][_0x5779b6(0x45b)](this,_0x3fc57c,_0x539844);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x1f2)]=Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)],Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)]=function(){const _0x776098=_0x4ab18a;VisuMZ[_0x776098(0x94c)][_0x776098(0x1f2)]['call'](this);if(!this[_0x776098(0x69e)]&&this[_0x776098(0x3a5)]){if('Sidev'!==_0x776098(0x312)){_0x3bb17e[_0x776098(0x49d)][_0x776098(0x5dd)][_0x776098(0x45b)](this);const _0x448c8d=this[_0x776098(0xaab)]()||this;if(!_0x448c8d)return;!_0x448c8d[_0x776098(0x6db)]&&(_0x448c8d['bitmap']=new _0x1d94a5(this[_0x776098(0x999)],this[_0x776098(0x428)])),this[_0x776098(0x700)]===_0x776098(0x5cd)?this[_0x776098(0x610)][_0x776098(0x849)](0x0,0x0,this[_0x776098(0x610)]['width'],this[_0x776098(0x469)]):_0x448c8d[_0x776098(0x849)](0x0,0x0,_0x448c8d[_0x776098(0x6db)][_0x776098(0x999)],this['bitmap'][_0x776098(0x428)]);}else this[_0x776098(0x3a5)][_0x776098(0x242)]=![];}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x619)]=Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa63)],Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa63)]=function(){const _0x4de618=_0x4ab18a;this[_0x4de618(0x77b)](),this[_0x4de618(0x8c0)](),this['updateSpin'](),this[_0x4de618(0xfc)](),this[_0x4de618(0x7b4)](),VisuMZ[_0x4de618(0x94c)][_0x4de618(0x619)]['call'](this);if(this[_0x4de618(0x164)]===Sprite_Enemy)this[_0x4de618(0x7e6)]();},VisuMZ['BattleCore'][_0x4ab18a(0x7a3)]=Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x1ec)],Sprite_Battler['prototype'][_0x4ab18a(0x1ec)]=function(){const _0x310e35=_0x4ab18a;VisuMZ[_0x310e35(0x94c)][_0x310e35(0x7a3)]['call'](this),this[_0x310e35(0x360)](),this[_0x310e35(0x6f8)]();},Sprite_Battler['prototype'][_0x4ab18a(0x360)]=function(){const _0x788fae=_0x4ab18a;this[_0x788fae(0x520)]=this['x'],this[_0x788fae(0x5e7)]=this['y'],this[_0x788fae(0x777)](),this[_0x788fae(0x9da)](),this['x']+=this[_0x788fae(0xa5f)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x788fae(0x6f0)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x788fae(0x831)](this['y']);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa5f)]=function(){let _0x2958df=0x0;return _0x2958df;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x3e0)]=function(){const _0x2dc043=_0x4ab18a;let _0x19d390=0x0;return this[_0x2dc043(0x69e)]&&!this[_0x2dc043(0x69e)][_0x2dc043(0x946)]()&&(_0x19d390-=this[_0x2dc043(0x9d1)],_0x19d390-=this['_jumpHeight']),_0x19d390;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x6f0)]=function(){const _0x32dbcb=_0x4ab18a;let _0x118fd2=0x0;if(this[_0x32dbcb(0x8b7)]&&this[_0x32dbcb(0x164)]!==Sprite_SvEnemy){const _0x3a7ef0=this[_0x32dbcb(0x8b7)][_0x32dbcb(0x443)]['y'];_0x118fd2-=(_0x3a7ef0-0x1)*this[_0x32dbcb(0x428)];}return _0x118fd2;},Sprite_Battler['prototype'][_0x4ab18a(0xfc)]=function(){const _0x58fde9=_0x4ab18a,_0x1c5712=this['_battler']&&this[_0x58fde9(0x69e)][_0x58fde9(0x303)]();this['_flipScaleX']=(_0x1c5712?-0x1:0x1)*Math[_0x58fde9(0x27f)](this[_0x58fde9(0x443)]['x']);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa3)]=function(_0x4b4f60,_0x5c2dd1,_0x45e8ca){const _0x23be01=_0x4ab18a;if(!this[_0x23be01(0x170)]())return;if(this[_0x23be01(0x201)]===_0x4b4f60)return;this[_0x23be01(0x201)]=_0x4b4f60,this['_floatDuration']=_0x5c2dd1,this[_0x23be01(0x7df)]=_0x5c2dd1,this[_0x23be01(0x554)]=_0x45e8ca||_0x23be01(0xfb);if(_0x5c2dd1<=0x0)this['_floatHeight']=_0x4b4f60;},Sprite_Battler['prototype'][_0x4ab18a(0x777)]=function(){const _0x975347=_0x4ab18a;if(this[_0x975347(0x29b)]<=0x0)return;const _0x52d17f=this[_0x975347(0x29b)],_0x4d03ef=this[_0x975347(0x7df)],_0xa54eb3=this[_0x975347(0x554)];if(Imported[_0x975347(0x1fc)]){if(_0x975347(0x75f)!==_0x975347(0x4aa))this[_0x975347(0x9d1)]=this[_0x975347(0x9f8)](this['_floatHeight'],this['_targetFloatHeight'],_0x52d17f,_0x4d03ef,_0xa54eb3);else{const _0x4012c9=_0x1a537d[_0x975347(0x94c)]['Settings']['BattleLog'];if(!_0x4012c9[_0x975347(0x9a7)])return;this[_0x975347(0x448)]('addText',_0x4012c9[_0x975347(0x24a)][_0x975347(0x278)](_0x5910ad[_0x975347(0x326)]())),this['push'](_0x975347(0x770),_0x4012c9[_0x975347(0x492)]),this[_0x975347(0x448)](_0x975347(0x7e0));}}else this[_0x975347(0x9d1)]=(this['_floatHeight']*(_0x52d17f-0x1)+this['_targetFloatHeight'])/_0x52d17f;this[_0x975347(0x29b)]--;if(this[_0x975347(0x29b)]<=0x0)this[_0x975347(0x768)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x768)]=function(){const _0x11fdba=_0x4ab18a;this[_0x11fdba(0x9d1)]=this[_0x11fdba(0x201)];},Sprite_Battler[_0x4ab18a(0x49d)]['isFloating']=function(){const _0x5279f0=_0x4ab18a;return this[_0x5279f0(0x29b)]>0x0;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x8b1)]=function(_0x22c53e,_0x15c055){const _0x59cc79=_0x4ab18a;if(!this[_0x59cc79(0x170)]())return;if(_0x15c055<=0x0)return;this[_0x59cc79(0x747)]=_0x22c53e,this[_0x59cc79(0x35b)]=_0x15c055,this[_0x59cc79(0x753)]=_0x15c055;},Sprite_Battler[_0x4ab18a(0x49d)]['updateJump']=function(){const _0x12b605=_0x4ab18a;if(this[_0x12b605(0x35b)]<=0x0)return;const _0x317d04=this[_0x12b605(0x753)]-this[_0x12b605(0x35b)],_0x231664=this[_0x12b605(0x753)]/0x2,_0x4af437=this[_0x12b605(0x747)],_0x2b1d94=-_0x4af437/Math[_0x12b605(0x1cb)](_0x231664,0x2);this['_jumpHeight']=_0x2b1d94*Math[_0x12b605(0x1cb)](_0x317d04-_0x231664,0x2)+_0x4af437,this[_0x12b605(0x35b)]--;if(this[_0x12b605(0x35b)]<=0x0)return this[_0x12b605(0xa82)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xa82)]=function(){const _0x51c110=_0x4ab18a;this[_0x51c110(0x744)]=0x0;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0xae1)]=function(){const _0x1a57e6=_0x4ab18a;return this[_0x1a57e6(0x35b)]>0x0;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x4ba)]=function(_0x3e0b3e,_0x22a698,_0x3958e4){const _0x31085b=_0x4ab18a;if(this[_0x31085b(0x5b6)]===_0x3e0b3e)return;this[_0x31085b(0x5b6)]=_0x3e0b3e,this[_0x31085b(0x41e)]=_0x22a698,this[_0x31085b(0x344)]=_0x22a698,this['_opacityEasing']=_0x3958e4||_0x31085b(0xfb);if(_0x22a698<=0x0)this[_0x31085b(0x43a)]=_0x3e0b3e;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x6f8)]=function(){const _0x146815=_0x4ab18a;if(this[_0x146815(0x164)]['name']===_0x146815(0x955))return;if(this[_0x146815(0x41e)]<=0x0)return;const _0x3edf18=this['_opacityDuration'],_0x1bca0c=this[_0x146815(0x344)],_0x4102d5=this['_opacityEasing'];if(Imported[_0x146815(0x1fc)])_0x146815(0x379)!==_0x146815(0x379)?(_0x142b3c[_0x146815(0x9d6)]=!![],this[_0x146815(0x762)](_0x151065)):this[_0x146815(0x43a)]=this['applyEasing'](this['opacity'],this[_0x146815(0x5b6)],_0x3edf18,_0x1bca0c,_0x4102d5);else{if(_0x146815(0x608)!==_0x146815(0x608)){_0xfdf9ac-=_0x5433e5[_0x31a925];if(_0x39529d<=0x0)return _0x3902d7;}else this[_0x146815(0x43a)]=(this[_0x146815(0x43a)]*(_0x3edf18-0x1)+this[_0x146815(0x5b6)])/_0x3edf18;}this[_0x146815(0x41e)]--;if(this[_0x146815(0x41e)]<=0x0)this[_0x146815(0x8e)]();},Sprite_Battler[_0x4ab18a(0x49d)]['onOpacityEnd']=function(){const _0x22f6f1=_0x4ab18a;this[_0x22f6f1(0x43a)]=this[_0x22f6f1(0x5b6)];},Sprite_Battler['prototype'][_0x4ab18a(0x87c)]=function(){const _0x49b604=_0x4ab18a;return this[_0x49b604(0x41e)]>0x0;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7e6)]=function(){const _0x431c28=_0x4ab18a;this[_0x431c28(0x422)][_0x431c28(0x242)]=this[_0x431c28(0x69e)][_0x431c28(0x394)](),this[_0x431c28(0x642)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x642)]=function(){const _0x2ceb69=_0x4ab18a;if(!this[_0x2ceb69(0x422)])return;this[_0x2ceb69(0x422)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x683)]=function(){const _0x2b27fc=_0x4ab18a;if(!this['_battler'])return;this[_0x2b27fc(0x781)]=this[_0x2b27fc(0x69e)][_0x2b27fc(0x20b)](),this[_0x2b27fc(0x2e8)]=this[_0x2b27fc(0x69e)][_0x2b27fc(0x3ef)]();},Game_BattlerBase[_0x4ab18a(0x49d)]['battlerShadowScaleX']=function(){const _0x19ec01=_0x4ab18a,_0x55de99=this[_0x19ec01(0x526)]()?this['actor']():this['enemy']();if(_0x55de99){if(_0x19ec01(0x5c0)!==_0x19ec01(0xa6c)){const _0x1e6ee2=_0x55de99['note'];if(_0x1e6ee2[_0x19ec01(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x19ec01(0x954)!=='sGTqU'?Number(RegExp['$1'])*0.01:_0x9d0af1[_0x19ec01(0xa10)][_0x19ec01(0xaf0)]()===_0x19ec01(0x1a7)?_0x138bae[_0x19ec01(0x94c)][_0x19ec01(0x3f5)][_0x19ec01(0x377)][_0x19ec01(0xab)]:_0x19c549['BattleCore'][_0x19ec01(0x3f5)]['BattleLayout'][_0x19ec01(0x573)];else{if(_0x1e6ee2[_0x19ec01(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if('oJSbs'===_0x19ec01(0x559))return Number(RegExp['$1'])||0x0;else this[_0x19ec01(0xc3)][_0x19ec01(0x384)](),this['_enemyWindow']['hide'](),this[_0x19ec01(0x813)]['activate']();}}}else this[_0x19ec01(0x90)]=0x0,this[_0x19ec01(0x736)]=0x0;}return 0x1;},Game_BattlerBase[_0x4ab18a(0x49d)]['battlerShadowScaleY']=function(){const _0x4356dc=_0x4ab18a,_0x10fe82=this[_0x4356dc(0x526)]()?this[_0x4356dc(0x475)]():this[_0x4356dc(0x637)]();if(_0x10fe82){const _0x10bf50=_0x10fe82[_0x4356dc(0x7d0)];if(_0x10bf50['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x10bf50[_0x4356dc(0x378)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler['prototype']['updateScale']=function(){const _0x1fa613=_0x4ab18a;if(this['constructor']===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x1fa613(0x7d6)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7d6)]=function(){const _0x10e27b=_0x4ab18a,_0x1fb1f6=this[_0x10e27b(0x8b7)];if(_0x1fb1f6){if(_0x10e27b(0x639)==='WiJDv'){_0x28492b[_0x10e27b(0x49d)][_0x10e27b(0x43d)][_0x10e27b(0x45b)](this),this[_0x10e27b(0x8f9)](),this[_0x10e27b(0x1d3)]();if(this[_0x10e27b(0xaf0)]()===_0x10e27b(0x1a7))this[_0x10e27b(0x438)]();}else _0x1fb1f6['scale']['x']=this[_0x10e27b(0xbb)](),_0x1fb1f6[_0x10e27b(0x443)]['y']=this[_0x10e27b(0x7b5)]();}},Sprite_Battler[_0x4ab18a(0x49d)]['mainSpriteScaleX']=function(){const _0x5aa192=_0x4ab18a;let _0x37039c=0x1;return _0x37039c*=this[_0x5aa192(0x84f)],_0x37039c*=this['_growX'],_0x37039c;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7b5)]=function(){const _0x371cb8=_0x4ab18a;return 0x1*this[_0x371cb8(0x1f5)];},Sprite_Battler[_0x4ab18a(0x49d)]['mainSpriteWidth']=function(){const _0x566e22=_0x4ab18a;return this[_0x566e22(0x999)]*this[_0x566e22(0xbb)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x6da)]=function(){const _0x1ff14f=_0x4ab18a;return this['height']*this[_0x1ff14f(0x7b5)]();},Sprite_Battler[_0x4ab18a(0x49d)]['startGrow']=function(_0x144f88,_0x19dc93,_0x45eb4f,_0x538e08){const _0xae984c=_0x4ab18a;if(!this[_0xae984c(0x170)]())return;if(!this[_0xae984c(0x8b7)])return;if(this['_targetGrowX']===_0x144f88&&this[_0xae984c(0xcd)]===_0x19dc93)return;this[_0xae984c(0x436)]=_0x144f88,this['_targetGrowY']=_0x19dc93,this[_0xae984c(0x949)]=_0x45eb4f,this[_0xae984c(0x26b)]=_0x45eb4f,this['_growEasing']=_0x538e08||_0xae984c(0xfb);if(_0x45eb4f<=0x0){if(_0xae984c(0x284)!==_0xae984c(0x284)){let _0x924491=_0x505c5e[_0xae984c(0x7ce)](_0x5c30ec['VariableHeal']);_0x50a29b[_0xae984c(0x9c0)]<0x0&&(_0x924491+=_0x23db6c[_0xae984c(0x27f)](_0x38b800[_0xae984c(0x9c0)])),_0x14ca60[_0xae984c(0x77c)](_0x2a3983[_0xae984c(0x560)],_0x924491);}else this[_0xae984c(0x4f5)]=this[_0xae984c(0x436)],this[_0xae984c(0x1f5)]=this['_targetGrowY'];}},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x91a)]=function(){const _0x23e9bd=_0x4ab18a;if(this['_growDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x43a8c7=this[_0x23e9bd(0x949)],_0x267261=this[_0x23e9bd(0x26b)],_0x542096=this[_0x23e9bd(0x4d2)];Imported[_0x23e9bd(0x1fc)]?_0x23e9bd(0xa1a)===_0x23e9bd(0xa1a)?(this[_0x23e9bd(0x4f5)]=this['applyEasing'](this['_growX'],this[_0x23e9bd(0x436)],_0x43a8c7,_0x267261,_0x542096),this[_0x23e9bd(0x1f5)]=this['applyEasing'](this[_0x23e9bd(0x1f5)],this[_0x23e9bd(0xcd)],_0x43a8c7,_0x267261,_0x542096)):_0x76d876=_0x3c58d5[_0x23e9bd(0x94c)][_0x23e9bd(0x9fd)][_0x23e9bd(0x45b)](this):(this[_0x23e9bd(0x4f5)]=(this[_0x23e9bd(0x4f5)]*(_0x43a8c7-0x1)+this['_targetGrowX'])/_0x43a8c7,this['_growY']=(this[_0x23e9bd(0x1f5)]*(_0x43a8c7-0x1)+this[_0x23e9bd(0xcd)])/_0x43a8c7);this[_0x23e9bd(0x949)]--;if(this[_0x23e9bd(0x949)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x9e)]=function(){const _0x3fcd29=_0x4ab18a;this[_0x3fcd29(0x4f5)]=this[_0x3fcd29(0x436)],this['_growY']=this['_targetGrowY'];},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x59f)]=function(){const _0x1acc6b=_0x4ab18a;return this[_0x1acc6b(0x949)]>0x0;},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x643)]=function(_0x151f66,_0x334e41,_0x9d1643,_0x31cd11){const _0x2f9b9b=_0x4ab18a;if(!this[_0x2f9b9b(0x170)]())return;if(!this[_0x2f9b9b(0x8b7)])return;if(this[_0x2f9b9b(0x435)]===_0x151f66&&this[_0x2f9b9b(0x1ca)]===_0x334e41)return;this['_targetSkewX']=_0x151f66,this['_targetSkewY']=_0x334e41,this[_0x2f9b9b(0xae0)]=_0x9d1643,this[_0x2f9b9b(0xdf)]=_0x9d1643,this['_skewEasing']=_0x31cd11||_0x2f9b9b(0xfb),_0x9d1643<=0x0&&('rfIoa'===_0x2f9b9b(0x844)?this[_0x2f9b9b(0x52c)]=_0x3d8cbb[_0x2f9b9b(0xac4)](_0x49933b[_0x2f9b9b(0x2a1)]):(this['_distortionSprite']['skew']['x']=this['_targetSkewX'],this[_0x2f9b9b(0x8b7)][_0x2f9b9b(0x1a5)]['y']=this[_0x2f9b9b(0x1ca)]));},Sprite_Battler[_0x4ab18a(0x49d)]['updateSkew']=function(){const _0x2e8e97=_0x4ab18a;if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x532022=this[_0x2e8e97(0xae0)],_0x465bd7=this[_0x2e8e97(0xdf)],_0x58ca06=this[_0x2e8e97(0x9ab)],_0x3759b1=this[_0x2e8e97(0x8b7)];Imported[_0x2e8e97(0x1fc)]?'xJjld'!==_0x2e8e97(0xa00)?(_0x3759b1[_0x2e8e97(0x1a5)]['x']=this[_0x2e8e97(0x9f8)](_0x3759b1[_0x2e8e97(0x1a5)]['x'],this[_0x2e8e97(0x435)],_0x532022,_0x465bd7,_0x58ca06),_0x3759b1[_0x2e8e97(0x1a5)]['y']=this[_0x2e8e97(0x9f8)](_0x3759b1[_0x2e8e97(0x1a5)]['y'],this['_targetSkewY'],_0x532022,_0x465bd7,_0x58ca06)):(_0x36fc33[_0x2e8e97(0x94c)]['Game_Party_removeActor'][_0x2e8e97(0x45b)](this,_0x160013),_0x6150e3[_0x2e8e97(0x76f)]()):(_0x3759b1['skew']['x']=(_0x3759b1[_0x2e8e97(0x1a5)]['x']*(_0x532022-0x1)+this[_0x2e8e97(0x435)])/_0x532022,_0x3759b1[_0x2e8e97(0x1a5)]['y']=(_0x3759b1[_0x2e8e97(0x1a5)]['y']*(_0x532022-0x1)+this[_0x2e8e97(0x1ca)])/_0x532022);this[_0x2e8e97(0xae0)]--;if(this[_0x2e8e97(0xae0)]<=0x0)this[_0x2e8e97(0x8be)]();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x8be)]=function(){const _0x4f1add=_0x4ab18a;this[_0x4f1add(0x8b7)][_0x4f1add(0x1a5)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x4f1add(0x1a5)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x352)]=function(){const _0x568c4d=_0x4ab18a;return this[_0x568c4d(0xae0)]>0x0;},Sprite_Battler['prototype'][_0x4ab18a(0x121)]=function(_0x1da147,_0x3d1636,_0x48aed5,_0x25022b){const _0x40040f=_0x4ab18a;if(!this['canMove']())return;if(!this[_0x40040f(0x8b7)])return;if(this[_0x40040f(0x90)]===_0x1da147)return;this['_targetAngle']=_0x1da147,this[_0x40040f(0x40f)]=_0x3d1636,this['_angleWholeDuration']=_0x3d1636,this[_0x40040f(0x879)]=_0x48aed5||'Linear',this[_0x40040f(0x276)]=_0x25022b,this[_0x40040f(0x276)]===undefined&&(this['_angleRevertOnFinish']=!![]),_0x3d1636<=0x0&&(_0x40040f(0x98)===_0x40040f(0x98)?(this[_0x40040f(0x736)]=_0x1da147,this[_0x40040f(0x276)]&&('DCAwF'==='DCAwF'?(this[_0x40040f(0x90)]=0x0,this[_0x40040f(0x736)]=0x0):(_0xf03b7a['BattleCore'][_0x40040f(0x845)]['call'](this),this[_0x40040f(0x723)]()))):this[_0x40040f(0x448)]('performRecovery',_0x5b3609));},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x293)]=function(){const _0x158dd4=_0x4ab18a;this['updateAngleCalculations'](),this[_0x158dd4(0x906)]();},Sprite_Battler[_0x4ab18a(0x49d)]['updateAngleCalculations']=function(){const _0x295996=_0x4ab18a;if(this['_angleDuration']<=0x0)return;const _0x6e2996=this['_angleDuration'],_0x3c1cab=this[_0x295996(0x260)],_0x3fa158=this[_0x295996(0x879)];Imported[_0x295996(0x1fc)]?this['_currentAngle']=this['applyEasing'](this['_currentAngle'],this['_targetAngle'],_0x6e2996,_0x3c1cab,_0x3fa158):this[_0x295996(0x736)]=(this[_0x295996(0x736)]*(_0x6e2996-0x1)+this[_0x295996(0x90)])/_0x6e2996;this[_0x295996(0x40f)]--;if(this['_angleDuration']<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x4ab18a(0x49d)]['onAngleEnd']=function(){const _0x25dc05=_0x4ab18a;this[_0x25dc05(0x736)]=this[_0x25dc05(0x90)],this[_0x25dc05(0x276)]&&(this[_0x25dc05(0x90)]=0x0,this[_0x25dc05(0x736)]=0x0);},Sprite_Battler[_0x4ab18a(0x49d)]['isSpinning']=function(){const _0x4d7d03=_0x4ab18a;return this[_0x4d7d03(0x40f)]>0x0;},Sprite_Battler['prototype']['applyAngleChange']=function(){const _0x3e2288=_0x4ab18a;if(!this[_0x3e2288(0x8b7)])return;const _0x27ebc8=this[_0x3e2288(0x736)],_0x284113=this['scale']['x'],_0x955872=this[_0x3e2288(0x69e)]['isActor']()?-0x1:0x1;this['_distortionSprite']['angle']=_0x27ebc8*_0x284113*_0x955872;const _0x26bb80=this[_0x3e2288(0x8b7)][_0x3e2288(0x443)]['y'];this[_0x3e2288(0x8b7)]['y']=this['height']*-0.5*(0x2-_0x26bb80),this[_0x3e2288(0x8b7)]['y']=Math[_0x3e2288(0x3c2)](this[_0x3e2288(0x8b7)]['y']);const _0x597446=[this[_0x3e2288(0x610)],this['_svBattlerSprite'],this[_0x3e2288(0x411)]];for(const _0x2908b9 of _0x597446){if(_0x3e2288(0x528)===_0x3e2288(0x528)){if(!_0x2908b9)continue;_0x2908b9['y']=this[_0x3e2288(0x428)]*0.5;}else return _0x2f7f5a[_0x3e2288(0x8bd)]();}if(this[_0x3e2288(0x422)]){if(_0x3e2288(0xf9)!==_0x3e2288(0x934))this[_0x3e2288(0x781)]=this['_shadowScaleX']??0x1,this[_0x3e2288(0x2e8)]=this[_0x3e2288(0x2e8)]??0x1,this[_0x3e2288(0x422)]['scale']['x']=this[_0x3e2288(0x8b7)][_0x3e2288(0x443)]['x']*this[_0x3e2288(0x781)],this['_shadowSprite'][_0x3e2288(0x443)]['y']=this['_distortionSprite'][_0x3e2288(0x443)]['y']*this[_0x3e2288(0x2e8)];else{if(!_0x4dfc0a['isSceneBattle']())return;const _0x2653c0=_0x32db24[_0x3e2288(0x9d8)](),_0x59a8bb=_0x31d567[_0x3e2288(0x84a)];_0x59a8bb[_0x3e2288(0x4e8)](),_0x2653c0[_0x3e2288(0x37d)](_0x3e2288(0xa7));}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x17b)]=Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x618)],Sprite_Actor['prototype'][_0x4ab18a(0x618)]=function(){const _0x44dfde=_0x4ab18a;VisuMZ[_0x44dfde(0x94c)][_0x44dfde(0x17b)][_0x44dfde(0x45b)](this),VisuMZ[_0x44dfde(0x94c)][_0x44dfde(0x3f5)][_0x44dfde(0x7bb)][_0x44dfde(0x71c)]&&this[_0x44dfde(0xacf)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3e6)]=Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x7da)],Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x7da)]=function(){const _0x4f998b=_0x4ab18a;VisuMZ[_0x4f998b(0x94c)][_0x4f998b(0x3f5)][_0x4f998b(0x7bb)]['ShowEnemyGauge']&&this[_0x4f998b(0xacf)](),VisuMZ['BattleCore'][_0x4f998b(0x3e6)][_0x4f998b(0x45b)](this);},Sprite_Battler['prototype'][_0x4ab18a(0xacf)]=function(){const _0x1d104b=_0x4ab18a;if(!ConfigManager[_0x1d104b(0x8c1)])return;if(this[_0x1d104b(0x164)]===Sprite_SvEnemy)return;const _0xa075ad=VisuMZ[_0x1d104b(0x94c)][_0x1d104b(0x3f5)]['HpGauge'],_0x250732=new Sprite_HpGauge();_0x250732[_0x1d104b(0x8a)]['x']=_0xa075ad['AnchorX'],_0x250732[_0x1d104b(0x8a)]['y']=_0xa075ad[_0x1d104b(0x4ad)],_0x250732[_0x1d104b(0x443)]['x']=_0x250732[_0x1d104b(0x443)]['y']=_0xa075ad['Scale'],this['_hpGaugeSprite']=_0x250732,this[_0x1d104b(0x19a)](this['_hpGaugeSprite']);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa5a)]=Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x669)],Sprite_Battler['prototype'][_0x4ab18a(0x669)]=function(_0x36e585){const _0xe191f5=_0x4ab18a,_0x41ecfe=this[_0xe191f5(0x69e)];VisuMZ['BattleCore'][_0xe191f5(0xa5a)][_0xe191f5(0x45b)](this,_0x36e585),this[_0xe191f5(0x7c3)](_0x36e585);if(_0x41ecfe!==_0x36e585)this['updateShadowScale']();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7c3)]=function(_0x534bcc){const _0x7fa4ca=_0x4ab18a;if(!_0x534bcc)return;if(!this[_0x7fa4ca(0x3a5)])return;if(_0x534bcc[_0x7fa4ca(0x526)]()){}else{if(_0x534bcc[_0x7fa4ca(0x6dd)]()){if(_0x7fa4ca(0x5a5)===_0x7fa4ca(0x1a0))return this[_0x7fa4ca(0x761)][_0x7fa4ca(0x746)]===0x0&&this[_0x7fa4ca(0x761)]['_offsetY']===0x0;else{if(this[_0x7fa4ca(0x164)]===Sprite_SvEnemy&&!_0x534bcc[_0x7fa4ca(0x394)]())return;}}}this[_0x7fa4ca(0x3a5)][_0x7fa4ca(0x914)](_0x534bcc,'hp');},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x7b4)]=function(){const _0x183057=_0x4ab18a;if(!this[_0x183057(0x69e)])return;if(!this[_0x183057(0x3a5)])return;const _0x43aac8=VisuMZ[_0x183057(0x94c)][_0x183057(0x3f5)][_0x183057(0x7bb)],_0x38fbd3=this['_hpGaugeSprite'];_0x38fbd3[_0x183057(0x242)]=this[_0x183057(0x801)]();const _0x1fd5cb=_0x43aac8['OffsetX'],_0x1033c9=_0x43aac8['OffsetY'];_0x38fbd3['x']=_0x1fd5cb,_0x38fbd3['x']+=this[_0x183057(0x69e)][_0x183057(0x41f)](),_0x38fbd3['y']=-this[_0x183057(0x428)]+_0x1033c9,_0x38fbd3['y']+=this[_0x183057(0x69e)]['battleUIOffsetY']();},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x801)]=function(){const _0x507aee=_0x4ab18a;if(!this['_battler'])return![];if(this[_0x507aee(0x69e)]['isActor']())return!![];const _0x21b441=this[_0x507aee(0x69e)][_0x507aee(0x637)]()[_0x507aee(0x7d0)];if(_0x21b441['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x21b441[_0x507aee(0x378)](/<HIDE HP GAUGE>/i))return![];const _0x2a07fd=VisuMZ[_0x507aee(0x94c)][_0x507aee(0x3f5)][_0x507aee(0x7bb)];if(_0x2a07fd['RequiresDefeat']){if('qxwYS'==='dwWjL'){if(this[_0x507aee(0x9b0)]>0x0){const _0x3e2a69=this['_borderPortraitDuration'],_0x5b85e1=this[_0x507aee(0x579)];_0x5b85e1['x']=(_0x5b85e1['x']*(_0x3e2a69-0x1)+this[_0x507aee(0x92c)])/_0x3e2a69,_0x5b85e1[_0x507aee(0x43a)]=(_0x5b85e1[_0x507aee(0x43a)]*(_0x3e2a69-0x1)+0xff)/_0x3e2a69,this[_0x507aee(0x9b0)]--;}}else{if(_0x2a07fd[_0x507aee(0x17a)]&&BattleManager['isBattleTest']())return!![];if(this[_0x507aee(0x69e)][_0x507aee(0x7e9)])return![];return this[_0x507aee(0x69e)][_0x507aee(0x6bb)]();}}return!![];},VisuMZ['BattleCore'][_0x4ab18a(0x4d8)]=Sprite_Battler[_0x4ab18a(0x49d)]['isMoving'],Sprite_Battler[_0x4ab18a(0x49d)]['isMoving']=function(){const _0x4141e0=_0x4ab18a;if(!this['_battler'])return![];return VisuMZ[_0x4141e0(0x94c)][_0x4141e0(0x4d8)][_0x4141e0(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x663)]=Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x6a1)],Sprite_Battler['prototype'][_0x4ab18a(0x6a1)]=function(_0x37d4a0,_0x3df780,_0x214001){const _0x22f8f3=_0x4ab18a;this['canMove']()&&VisuMZ[_0x22f8f3(0x94c)][_0x22f8f3(0x663)][_0x22f8f3(0x45b)](this,_0x37d4a0,_0x3df780,_0x214001);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x170)]=function(){const _0x491dc4=_0x4ab18a;if(this[_0x491dc4(0x69e)]&&this['_battler']['isDead']())return![];if(this[_0x491dc4(0x69e)]&&!this[_0x491dc4(0x69e)][_0x491dc4(0x8dc)]())return![];return $gameSystem[_0x491dc4(0x332)]();},Sprite_Battler[_0x4ab18a(0x49d)]['stepForward']=function(){},Sprite_Battler[_0x4ab18a(0x49d)]['stepBack']=function(){const _0xb68c2=_0x4ab18a;this[_0xb68c2(0x6a1)](0x0,0x0,0xc);},Sprite_Battler[_0x4ab18a(0x49d)][_0x4ab18a(0x71b)]=function(){},Sprite_Battler['prototype'][_0x4ab18a(0x145)]=function(){const _0x561d8b=_0x4ab18a,_0x14500d=VisuMZ['BattleCore'][_0x561d8b(0x3f5)][_0x561d8b(0x56a)],_0x3fdd6b=this['_battler']&&this[_0x561d8b(0x69e)][_0x561d8b(0x526)]()?0x1:-0x1,_0x304c35=this['_baseX']-this[_0x561d8b(0x9f)]+_0x3fdd6b*_0x14500d[_0x561d8b(0x910)],_0x317d1c=this[_0x561d8b(0x5e7)]-this['_homeY']+_0x3fdd6b*_0x14500d[_0x561d8b(0x595)],_0x44757c=_0x14500d[_0x561d8b(0x1e6)];this[_0x561d8b(0x6a1)](_0x304c35,_0x317d1c,_0x44757c);},VisuMZ['BattleCore']['Sprite_Actor_initMembers']=Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x78b)],Sprite_Actor[_0x4ab18a(0x49d)]['initMembers']=function(){const _0x1f2e56=_0x4ab18a;VisuMZ[_0x1f2e56(0x94c)]['Sprite_Actor_initMembers'][_0x1f2e56(0x45b)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0xaab)]=function(){const _0x2b1656=_0x4ab18a;return this[_0x2b1656(0x8b7)]||this[_0x2b1656(0x610)]||this;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x54a)]=Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x392)],Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x392)]=function(){},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x8e6)]=function(_0xec5798){const _0x45a79f=_0x4ab18a;if(SceneManager[_0x45a79f(0x6f3)]())return;if(!_0xec5798)return;if(!_0xec5798[_0x45a79f(0x170)]())return;VisuMZ['BattleCore'][_0x45a79f(0x54a)]['call'](this);},VisuMZ[_0x4ab18a(0x94c)]['Sprite_Actor_setActorHome']=Sprite_Actor['prototype'][_0x4ab18a(0x281)],Sprite_Actor[_0x4ab18a(0x49d)]['setActorHome']=function(_0x5aa91d){const _0x24f65c=_0x4ab18a;VisuMZ[_0x24f65c(0x94c)][_0x24f65c(0x3f5)][_0x24f65c(0x56a)][_0x24f65c(0x966)]?_0x24f65c(0x10c)!==_0x24f65c(0x2f5)?VisuMZ[_0x24f65c(0x94c)]['Settings']['Actor'][_0x24f65c(0x966)][_0x24f65c(0x45b)](this,_0x5aa91d):this[_0x24f65c(0x6ff)]=_0x24f65c(0x2d9):VisuMZ['BattleCore'][_0x24f65c(0x5ed)][_0x24f65c(0x45b)](this,_0x5aa91d);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x5af)]=Sprite_Actor['prototype'][_0x4ab18a(0x669)],Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x669)]=function(_0x2db978){const _0x30b2c0=_0x4ab18a;VisuMZ[_0x30b2c0(0x94c)]['Sprite_Actor_setBattler']['call'](this,_0x2db978),this[_0x30b2c0(0x4e1)](_0x2db978);},Sprite_Actor[_0x4ab18a(0x49d)]['setBattlerBattleCore']=function(_0x5a4544){const _0x30a7b0=_0x4ab18a;if(!_0x5a4544)return;if(!this[_0x30a7b0(0x610)])return;this[_0x30a7b0(0x610)]['anchor']['x']=this[_0x30a7b0(0x1cd)]['svBattlerAnchorX'](),this[_0x30a7b0(0x610)][_0x30a7b0(0x8a)]['y']=this[_0x30a7b0(0x1cd)][_0x30a7b0(0x19e)](),this[_0x30a7b0(0x1d8)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xa7e)]=Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)],Sprite_Actor['prototype']['update']=function(){const _0x4dafe8=_0x4ab18a;VisuMZ[_0x4dafe8(0x94c)][_0x4dafe8(0xa7e)]['call'](this),this['_actor']&&(this[_0x4dafe8(0x9d)](),this[_0x4dafe8(0x5a7)]());},VisuMZ['BattleCore']['Sprite_Actor_updateBitmap']=Sprite_Actor['prototype']['updateBitmap'],Sprite_Actor[_0x4ab18a(0x49d)]['updateBitmap']=function(){const _0x51bd2f=_0x4ab18a;VisuMZ[_0x51bd2f(0x94c)][_0x51bd2f(0x6a8)][_0x51bd2f(0x45b)](this),this[_0x51bd2f(0x610)]&&this[_0x51bd2f(0x610)][_0x51bd2f(0x6db)]&&this[_0x51bd2f(0x69e)]&&('gjSqg'!=='vlUIp'?this['_mainSprite'][_0x51bd2f(0x6db)][_0x51bd2f(0xa6f)]!==this[_0x51bd2f(0x69e)][_0x51bd2f(0x726)]()&&(_0x51bd2f(0x22d)===_0x51bd2f(0x737)?_0x2e0bad=['thrust','swing',_0x51bd2f(0xada)][_0x3db8d1[_0x51bd2f(0x626)]]||_0x51bd2f(0x49f):this[_0x51bd2f(0x610)][_0x51bd2f(0x6db)][_0x51bd2f(0xa6f)]=this[_0x51bd2f(0x69e)][_0x51bd2f(0x726)]()):this['requestMotionRefresh']());},VisuMZ['BattleCore'][_0x4ab18a(0x65d)]=Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x7e6)],Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x7e6)]=function(){const _0x17e894=_0x4ab18a;VisuMZ['BattleCore'][_0x17e894(0x65d)][_0x17e894(0x45b)](this),this[_0x17e894(0xabe)]();},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0xabe)]=function(){const _0x18bfe5=_0x4ab18a;if(!this[_0x18bfe5(0x610)])return;if(!this[_0x18bfe5(0x422)])return;this[_0x18bfe5(0x1d8)](),this[_0x18bfe5(0x642)]();},Sprite_Actor[_0x4ab18a(0x49d)]['updateStateSprite']=function(){const _0x382af5=_0x4ab18a;this['_stateSprite']['scale']['x']=0x1/(this['scale']['x']||0.001),this['_stateSprite'][_0x382af5(0x443)]['y']=0x1/(this[_0x382af5(0x443)]['y']||0.001);},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x5a7)]=function(){const _0x460e0f=_0x4ab18a;if(!$gameSystem[_0x460e0f(0x332)]()&&this[_0x460e0f(0x164)]===Sprite_Actor){const _0x358dca=Scene_Battle[_0x460e0f(0x49d)]['battleLayoutStyle']();if([_0x460e0f(0x2d9),_0x460e0f(0x5fb),_0x460e0f(0x6b3),_0x460e0f(0x1a7)][_0x460e0f(0xb2)](_0x358dca)){if(_0x460e0f(0x6e5)!==_0x460e0f(0x33a))this[_0x460e0f(0x43a)]=0x0;else{if(!_0x4736cb[_0x460e0f(0xae)]())return;_0x5c9743[_0x460e0f(0x3cb)](_0x1d63a4,_0x2cbda2);const _0x501c7a=_0x3aa883[_0x460e0f(0x7b9)];_0x4a910a[_0x460e0f(0xa10)]['playOnceParallelInterpreter'](_0x501c7a);}}}},Sprite_Actor[_0x4ab18a(0x49d)]['refreshMotion']=function(){const _0x2dded8=_0x4ab18a,_0x2bbeb7=this['_actor'];if(_0x2bbeb7){if(_0x2dded8(0x56c)!==_0x2dded8(0x74f)){const _0x130b8d=_0x2bbeb7[_0x2dded8(0x88a)]();if(_0x2bbeb7[_0x2dded8(0x3bb)]()||_0x2bbeb7[_0x2dded8(0x5a4)]()){if(_0x2dded8(0x97f)===_0x2dded8(0x97f))this[_0x2dded8(0xa86)]('walk');else return this[_0x2dded8(0x9dd)]();}else{if(_0x130b8d===0x3)this[_0x2dded8(0xa86)](_0x2dded8(0x43c));else{if(_0x130b8d===0x2){if(_0x2dded8(0x3f9)!==_0x2dded8(0x393))this['startMotion']('sleep');else{if(!_0x46efbf[_0x2dded8(0xae)]())return;_0x3d6af7[_0x2dded8(0x3cb)](_0x15f851,_0x21589e),_0x38cb78[_0x2dded8(0xa10)][_0x2dded8(0x60c)](_0x3bbf2d[_0x2dded8(0x418)]);}}else{if(this[_0x2dded8(0x5a9)])_0x2dded8(0xae8)===_0x2dded8(0xae8)?this[_0x2dded8(0xa86)](_0x2dded8(0x88e)):this['requestMotion']('damage');else{if(_0x2bbeb7['isCharging']()){if(_0x2dded8(0x20e)==='eXwWM')return _0x207da3[_0x2dded8(0x94c)]['Game_Interpreter_command301'][_0x2dded8(0x45b)](this,_0x401887);else this['startMotion'](_0x2dded8(0x1d4));}else{if(_0x2bbeb7[_0x2dded8(0x766)]())this[_0x2dded8(0xa86)]('chant');else{if(_0x2bbeb7[_0x2dded8(0x2f1)]()||_0x2bbeb7[_0x2dded8(0x4c9)]())_0x2dded8(0x6b4)!==_0x2dded8(0x810)?this['startMotion'](_0x2dded8(0x368)):(this[_0x2dded8(0x534)]&&this[_0x2dded8(0x19a)](this[_0x2dded8(0x534)]),this[_0x2dded8(0x728)]&&this['addChildToBack'](this['_backAttachmentSprite']));else{if(_0x130b8d===0x1)this['startMotion']('abnormal');else{if(_0x2bbeb7[_0x2dded8(0xbe)]())this[_0x2dded8(0xa86)](_0x2dded8(0x1c7));else{if(_0x2bbeb7[_0x2dded8(0x757)]())this[_0x2dded8(0xa86)]('walk');else _0x2bbeb7[_0x2dded8(0x4e0)]()?this[_0x2dded8(0xa86)]('wait'):_0x2dded8(0x195)===_0x2dded8(0x229)?this['_forcedBattleLayout']='border':this['startMotion'](_0x2dded8(0x38f));}}}}}}}}}}else return![];}},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x71b)]=function(){const _0x533bbf=0xa,_0x1ab40b=0x12c*_0x533bbf,_0x56e9e6=0x1e*_0x533bbf;this['startMove'](_0x1ab40b,0x0,_0x56e9e6);},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x923)]=function(){const _0x5e46e2=_0x4ab18a;Sprite_Battler[_0x5e46e2(0x49d)][_0x5e46e2(0x923)][_0x5e46e2(0x45b)](this);},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x79c)]=function(){const _0x1951ce=_0x4ab18a;return Sprite_Battler[_0x1951ce(0x355)];},Sprite_Weapon['prototype'][_0x4ab18a(0x56b)]=function(){const _0x4432ec=_0x4ab18a;return Sprite_Battler[_0x4432ec(0x355)];},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x38b)]=function(){},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x6d2)]=function(){},Sprite_Actor['prototype'][_0x4ab18a(0x67a)]=function(){const _0x5e3d12=_0x4ab18a;if(this[_0x5e3d12(0x712)]&&++this[_0x5e3d12(0x32d)]>=this[_0x5e3d12(0x79c)]()){if(this[_0x5e3d12(0x712)][_0x5e3d12(0x29c)])this[_0x5e3d12(0x687)]=(this[_0x5e3d12(0x687)]+0x1)%0x4;else this[_0x5e3d12(0x687)]<0x2?_0x5e3d12(0x8a2)===_0x5e3d12(0x8a2)?this[_0x5e3d12(0x687)]++:_0x3140ec[_0x5e3d12(0x94c)]['JS'][_0xefd733]['call'](this,this,this,_0x3326c2,0x0):this['refreshMotion']();this['_motionCount']=0x0;}},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x405)]=function(_0x2d096d){const _0x190225=_0x4ab18a;if(_0x2d096d===_0x190225(0x936))this[_0x190225(0x1e9)]=!![];if(this[_0x190225(0x69e)]&&this['_battler'][_0x190225(0x9b4)]()){if(_0x190225(0x6eb)!==_0x190225(0x7a9)){this['_motion']=Sprite_Actor['MOTIONS'][_0x190225(0x43c)];return;}else{if(!_0x90cb8b[_0x190225(0x31a)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x190225(0x57f)]=!![];let _0x1ef50d='';_0x1ef50d+=_0x190225(0x7cd),_0x1ef50d+=_0x190225(0x7b2)[_0x190225(0x278)](_0x5b521f['name']),_0x1f46a5(_0x1ef50d);}}const _0x129893=Sprite_Actor[_0x190225(0xa3e)][_0x2d096d];this[_0x190225(0x712)]=_0x129893,this['_motionCount']=0x0,this[_0x190225(0x687)]=0x0;},Sprite_Actor['prototype'][_0x4ab18a(0xae9)]=function(_0x119720){const _0x4da911=_0x4ab18a;this[_0x4da911(0x6f6)](),this[_0x4da911(0x8b0)][_0x4da911(0x914)](_0x119720),this[_0x4da911(0x1cd)][_0x4da911(0x2fe)]();},Sprite_Actor['prototype'][_0x4ab18a(0x6f6)]=function(){const _0xdd1668=_0x4ab18a;let _0x307d3a=-0x10,_0x5f4b43=this[_0xdd1668(0x428)]*0.5;const _0x85fdf6=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x28ba74=this['_battler'][_0xdd1668(0x9aa)]()[_0xdd1668(0x71a)](_0x1b06cb=>_0x1b06cb&&_0x1b06cb[_0xdd1668(0x7d0)]['match'](_0x85fdf6)?Number(RegExp['$1']):0x0),_0x1c5ff6=this[_0xdd1668(0x69e)][_0xdd1668(0x9aa)]()['map'](_0x38aa34=>_0x38aa34&&_0x38aa34['note'][_0xdd1668(0x378)](_0x85fdf6)?Number(RegExp['$2']):0x0);_0x307d3a=_0x28ba74[_0xdd1668(0x985)]((_0x482ea7,_0x4c38d5)=>_0x482ea7+_0x4c38d5,_0x307d3a),_0x5f4b43=_0x1c5ff6[_0xdd1668(0x985)]((_0x2fcbac,_0x53e9ed)=>_0x2fcbac+_0x53e9ed,_0x5f4b43),this[_0xdd1668(0x8b0)]['x']=_0x307d3a,this[_0xdd1668(0x8b0)]['y']=_0x5f4b43,this['_weaponSprite'][_0xdd1668(0x43d)]();},Sprite_Weapon[_0x4ab18a(0x49d)][_0x4ab18a(0x914)]=function(_0xcda512){const _0x5a2f3e=_0x4ab18a;this['_weaponImageId']=_0xcda512,this[_0x5a2f3e(0x725)]=-0x1,this['_pattern']=0x0,this['loadBitmap'](),this[_0x5a2f3e(0x5dd)]();},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x5e4)]=function(){},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0xcb)]=function(){const _0x336931=_0x4ab18a,_0x2464d8=VisuMZ[_0x336931(0x94c)]['Settings'][_0x336931(0x9d2)],_0x169bac=_0x2464d8[_0x336931(0x3f7)],_0x530d97=_0x2464d8[_0x336931(0x4f9)],_0x496358=_0x2464d8['StepDuration'];this[_0x336931(0x6a1)](-_0x169bac,-_0x530d97,_0x496358);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x106)]=Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x5dd)],Sprite_Actor['prototype'][_0x4ab18a(0x5dd)]=function(){const _0x580248=_0x4ab18a;this[_0x580248(0x993)](),VisuMZ[_0x580248(0x94c)][_0x580248(0x106)][_0x580248(0x45b)](this);},Sprite_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x993)]=function(){const _0x471cf4=_0x4ab18a;if(this['_battler']&&this['_battler'][_0x471cf4(0xfd)]){const _0x4a9e6c=this['_battler'][_0x471cf4(0xfd)];this[_0x471cf4(0x712)]=Sprite_Actor[_0x471cf4(0xa3e)][_0x4a9e6c[_0x471cf4(0xd4)]],this['_pattern']=_0x4a9e6c[_0x471cf4(0x56d)];const _0x52df83=this['_weaponSprite'];_0x52df83[_0x471cf4(0x4eb)](_0x4a9e6c[_0x471cf4(0x84e)],_0x4a9e6c[_0x471cf4(0x56d)]),this[_0x471cf4(0x6f6)]();}},Sprite_Weapon['prototype'][_0x4ab18a(0x4eb)]=function(_0x1f332d,_0x2bb099){const _0x82c989=_0x4ab18a;this['_weaponImageId']=_0x1f332d,this['_animationCount']=-Infinity,this[_0x82c989(0x687)]=_0x2bb099,this['loadBitmap'](),this['updateFrame']();},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x78b)]=function(){const _0x4e4ac5=_0x4ab18a;Sprite_Battler[_0x4e4ac5(0x49d)][_0x4e4ac5(0x78b)][_0x4e4ac5(0x45b)](this),this[_0x4e4ac5(0x614)]=null,this[_0x4e4ac5(0x6c2)]=![],this[_0x4e4ac5(0xa48)]='',this['_battlerHue']=0x0,this[_0x4e4ac5(0x700)]=null,this['_effectDuration']=0x0,this[_0x4e4ac5(0x6a7)]=0x0,this[_0x4e4ac5(0xa61)](),this[_0x4e4ac5(0x7da)]();},VisuMZ[_0x4ab18a(0x94c)]['Sprite_Enemy_update']=Sprite_Enemy['prototype'][_0x4ab18a(0x43d)],Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)]=function(){const _0x71fc42=_0x4ab18a;VisuMZ[_0x71fc42(0x94c)][_0x71fc42(0x29a)]['call'](this),this[_0x71fc42(0x1d8)]();},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0xa61)]=function(){const _0x498851=_0x4ab18a;this['_mainSprite']=new Sprite(),this[_0x498851(0x610)][_0x498851(0x8a)]['x']=0.5,this['_mainSprite'][_0x498851(0x8a)]['y']=0x1,this[_0x498851(0x19a)](this[_0x498851(0x610)]),this[_0x498851(0x989)]();},Sprite_Enemy['prototype'][_0x4ab18a(0xaab)]=function(){const _0xeefb88=_0x4ab18a;return this[_0xeefb88(0x8b7)]||this[_0xeefb88(0x610)]||this;},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x8af)]=function(_0x2d068e){const _0x1e5be8=_0x4ab18a;this[_0x1e5be8(0x6db)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){if(_0x1e5be8(0xe7)===_0x1e5be8(0xa31))for(const _0x154363 of _0x2383c5){const _0x52d3c3=_0x46a349[0x0][_0x1e5be8(0x278)](_0x154363[0x0]),_0x5ac98a=_0x3686b7[0x1]['format'](_0x154363[0x1]),_0x45c6fb=new _0x1c08cc(_0xd7727d['format'](_0x5ac98a),'i');_0x5171a2[_0x52d3c3]=_0x45c6fb;}else{const _0xf022e8=this[_0x1e5be8(0x614)][_0x1e5be8(0x30f)]();this['bitmap']=new Bitmap(_0xf022e8[_0x1e5be8(0x999)],_0xf022e8[_0x1e5be8(0x428)]),this[_0x1e5be8(0x610)][_0x1e5be8(0x6db)]=new Bitmap(0x1,0x1);}}else $gameSystem[_0x1e5be8(0x332)]()?(this[_0x1e5be8(0x610)]['bitmap']=ImageManager['loadSvEnemy'](_0x2d068e),this[_0x1e5be8(0x610)]['bitmap'][_0x1e5be8(0x65c)](this[_0x1e5be8(0x3b2)]['bind'](this))):(this['_mainSprite'][_0x1e5be8(0x6db)]=ImageManager['loadEnemy'](_0x2d068e),this[_0x1e5be8(0x610)][_0x1e5be8(0x6db)][_0x1e5be8(0x65c)](this[_0x1e5be8(0x3b2)]['bind'](this)));},Sprite_Enemy['prototype']['createEmptyBitmap']=function(){const _0x186e93=_0x4ab18a,_0x1be871=this[_0x186e93(0x610)]['bitmap'];_0x1be871&&(this[_0x186e93(0x6db)]=new Bitmap(_0x1be871[_0x186e93(0x999)],_0x1be871[_0x186e93(0x428)]));},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x93f)]=Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x43f)],Sprite_Enemy['prototype'][_0x4ab18a(0x43f)]=function(_0x5916e2){const _0x1f850c=_0x4ab18a;if(this['_mainSprite']){if(_0x1f850c(0x835)!==_0x1f850c(0x835)){const _0x908075=_0x2ff2cf(_0x36f081['$1']);return[_0x10252a[_0x1f850c(0x533)]()[_0x908075]];}else this['_mainSprite'][_0x1f850c(0x43f)](_0x5916e2);}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x933)]=Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x1c4)],Sprite_Enemy[_0x4ab18a(0x49d)]['initVisibility']=function(){const _0xecc4ee=_0x4ab18a;if(this['allowCollapse']()){if(_0xecc4ee(0x574)===_0xecc4ee(0xff)){this[_0xecc4ee(0xa5c)]=this[_0xecc4ee(0x8c6)]();const _0x9235bd=_0x32c786[_0xecc4ee(0x94c)][_0xecc4ee(0x3f5)][_0xecc4ee(0x377)];_0x9235bd[_0xecc4ee(0x64a)]&&(this[_0xecc4ee(0x43a)]=0x0);}else VisuMZ[_0xecc4ee(0x94c)][_0xecc4ee(0x933)][_0xecc4ee(0x45b)](this);}else this['_appeared']=!this[_0xecc4ee(0x614)][_0xecc4ee(0x793)](),!this['_appeared']&&(this[_0xecc4ee(0x43a)]=0x0);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x389)]=Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x9e2)],Sprite_Enemy[_0x4ab18a(0x49d)]['updateCollapse']=function(){const _0x27ac5c=_0x4ab18a;if(this[_0x27ac5c(0xe5)]())VisuMZ['BattleCore'][_0x27ac5c(0x389)][_0x27ac5c(0x45b)](this);},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x5dd)]=function(){const _0x1d0598=_0x4ab18a;Sprite_Battler[_0x1d0598(0x49d)][_0x1d0598(0x5dd)][_0x1d0598(0x45b)](this);const _0x4884fc=this[_0x1d0598(0xaab)]()||this;if(!_0x4884fc)return;!_0x4884fc[_0x1d0598(0x6db)]&&(_0x1d0598(0x89b)!==_0x1d0598(0x91)?_0x4884fc[_0x1d0598(0x6db)]=new Bitmap(this[_0x1d0598(0x999)],this[_0x1d0598(0x428)]):_0xfec448[_0x1d0598(0xf7)][_0x1d0598(0x58b)](_0x5a4d7d));if(this[_0x1d0598(0x700)]==='bossCollapse'){if(_0x1d0598(0x52b)===_0x1d0598(0x52b))this[_0x1d0598(0x610)][_0x1d0598(0x849)](0x0,0x0,this[_0x1d0598(0x610)]['width'],this['_effectDuration']);else{let _0x4dc045=this[_0x1d0598(0x524)](_0x3e310f);const _0x303abe=this[_0x1d0598(0x5e6)](),_0x1d380d=_0x17de9b[_0x1d0598(0x831)](_0x303abe*0.75);for(let _0x12bd81=0x0;_0x12bd81<_0x4dc045[_0x1d0598(0x820)];_0x12bd81++){const _0x37224c=this['createChildSprite'](_0x1d380d,_0x303abe);_0x37224c[_0x1d0598(0x6db)][_0x1d0598(0x5f1)](_0x4dc045[_0x12bd81],0x0,0x0,_0x1d380d,_0x303abe,'center'),_0x37224c['x']=(_0x12bd81-(_0x4dc045['length']-0x1)/0x2)*_0x1d380d,_0x37224c['dy']=-_0x12bd81;}}}else _0x1d0598(0x584)!=='yQqHs'?_0x4884fc[_0x1d0598(0x849)](0x0,0x0,_0x4884fc[_0x1d0598(0x6db)][_0x1d0598(0x999)],this[_0x1d0598(0x6db)][_0x1d0598(0x428)]):_0x21f058+=_0x5005e6['iconWidth'];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x8f7)]=Sprite_Enemy['prototype']['updateBossCollapse'],Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x28c)]=function(){const _0x56f155=_0x4ab18a;if(this[_0x56f155(0xe5)]())VisuMZ['BattleCore'][_0x56f155(0x8f7)]['call'](this);},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x69b)]=function(){const _0x49744e=_0x4ab18a;return Sprite_Battler[_0x49744e(0x49d)][_0x49744e(0x69b)][_0x49744e(0x45b)](this);},VisuMZ['BattleCore'][_0x4ab18a(0x622)]=Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x9d)],Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x9d)]=function(){const _0x46d4bb=_0x4ab18a;VisuMZ['BattleCore'][_0x46d4bb(0x622)][_0x46d4bb(0x45b)](this),this[_0x46d4bb(0x852)]();},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x852)]=function(){const _0x44663a=_0x4ab18a,_0x1b7e31=VisuMZ[_0x44663a(0x94c)][_0x44663a(0x3f5)][_0x44663a(0x582)];if(_0x1b7e31['NameAttachStateIcon']&&!_0x1b7e31[_0x44663a(0x346)]){if(_0x44663a(0x731)!==_0x44663a(0x731))return this[_0x44663a(0xa10)]&&this['_scene'][_0x44663a(0x164)]===_0x122328;else{this[_0x44663a(0x816)][_0x44663a(0x43a)]=0x0;return;}}this['_stateIconSprite']['x']=0x0,this['_stateIconSprite']['x']+=this['_battler'][_0x44663a(0x41f)](),this[_0x44663a(0x816)]['y']=-this['bitmap']['height']-this[_0x44663a(0x816)][_0x44663a(0x428)],this[_0x44663a(0x816)]['y']+=this[_0x44663a(0x69e)][_0x44663a(0x2c3)](),this[_0x44663a(0x816)][_0x44663a(0x443)]['x']=0x1/(this[_0x44663a(0x443)]['x']||0.001),this[_0x44663a(0x816)]['scale']['y']=0x1/(this[_0x44663a(0x443)]['y']||0.001);if(this[_0x44663a(0x394)]()){if(_0x44663a(0x6ae)!=='HXXGt'){if(!_0x1dc084)return![];return _0xee5742['friendsUnit']()===this[_0x44663a(0xadc)]();}else this[_0x44663a(0x1f8)][_0x44663a(0x390)][_0x44663a(0x443)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x44663a(0x1f8)][_0x44663a(0x390)][_0x44663a(0x443)]['y']=0x1/(this['scale']['y']||0.001);}},VisuMZ['BattleCore'][_0x4ab18a(0x264)]=Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x669)],Sprite_Enemy[_0x4ab18a(0x49d)]['setBattler']=function(_0x2a523d){const _0x2e2d39=_0x4ab18a;VisuMZ[_0x2e2d39(0x94c)]['Sprite_Enemy_setBattler'][_0x2e2d39(0x45b)](this,_0x2a523d),this[_0x2e2d39(0xa96)](_0x2a523d);},Sprite_Enemy[_0x4ab18a(0x49d)]['setSvBattlerSprite']=function(_0x15aa8c){const _0x81ab6b=_0x4ab18a;!this[_0x81ab6b(0x1f8)]&&(this[_0x81ab6b(0x1f8)]=new Sprite_SvEnemy(_0x15aa8c),this[_0x81ab6b(0x989)]()),this[_0x81ab6b(0x1f8)][_0x81ab6b(0x669)](_0x15aa8c);},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x394)]=function(){const _0x64293d=_0x4ab18a;return this[_0x64293d(0x614)]&&this['_enemy'][_0x64293d(0x394)]();},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0xe5)]=function(){const _0x317d2b=_0x4ab18a;if(this['hasSvBattler']())return this[_0x317d2b(0x614)][_0x317d2b(0xe5)]();else{if('QTJaM'===_0x317d2b(0x23a))_0x104219+=_0x3a283a[_0x317d2b(0x582)][_0x317d2b(0x4c3)]||0x0,_0x26670f+=_0x3ed214['Enemy'][_0x317d2b(0xab3)]||0x0;else return!![];}},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0x1dc)]=function(){const _0x2335e0=_0x4ab18a;this[_0x2335e0(0x394)]()&&this['_svBattlerSprite']['refreshMotion']();},Sprite_Enemy['prototype'][_0x4ab18a(0x405)]=function(_0x59117e){const _0x1aca6a=_0x4ab18a;if(this[_0x1aca6a(0x394)]())this[_0x1aca6a(0x1f8)]['forceMotion'](_0x59117e);},Sprite_Enemy[_0x4ab18a(0x49d)][_0x4ab18a(0xae9)]=function(_0x365b8a){const _0x2d38f9=_0x4ab18a;if(this[_0x2d38f9(0x394)]())this[_0x2d38f9(0x1f8)]['forceWeaponAnimation'](_0x365b8a);},Sprite_Enemy[_0x4ab18a(0x49d)]['stepForward']=function(){const _0x471e28=_0x4ab18a,_0x2bbaad=VisuMZ[_0x471e28(0x94c)]['Settings'][_0x471e28(0x9d2)],_0x115c07=_0x2bbaad['StepDistanceX'],_0x572cd8=_0x2bbaad[_0x471e28(0x4f9)],_0x5467d7=_0x2bbaad['StepDuration'];this[_0x471e28(0x6a1)](_0x115c07,_0x572cd8,_0x5467d7);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object['create'](Sprite_Actor[_0x4ab18a(0x49d)]),Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x164)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(_0x1e331a){const _0x200eb7=_0x4ab18a;Sprite_Actor['prototype'][_0x200eb7(0x9ed)][_0x200eb7(0x45b)](this,_0x1e331a),this['scale']['x']=-0x1,this[_0x200eb7(0x390)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x5f5)]=function(){},Sprite_SvEnemy['prototype'][_0x4ab18a(0x392)]=function(){},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x281)]=function(_0x4ea24b){},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x7e6)]=function(){},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x642)]=function(){},Sprite_SvEnemy['prototype'][_0x4ab18a(0x9d)]=function(){const _0x4f5d3f=_0x4ab18a;this['_stateSprite'][_0x4f5d3f(0x242)]=![];},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x1a8)]=function(){const _0x3e83a8=_0x4ab18a;Sprite_Battler[_0x3e83a8(0x49d)][_0x3e83a8(0x1a8)]['call'](this);const _0x953995=this[_0x3e83a8(0x1cd)]['svBattlerName']();this[_0x3e83a8(0xa48)]!==_0x953995&&(this[_0x3e83a8(0xa48)]=_0x953995,this[_0x3e83a8(0x610)][_0x3e83a8(0x6db)]=ImageManager[_0x3e83a8(0x442)](_0x953995)),this[_0x3e83a8(0x610)]&&this[_0x3e83a8(0x610)]['bitmap']&&this[_0x3e83a8(0x69e)]&&('CXyed'===_0x3e83a8(0x6a0)?_0x3ae82f[_0x3e83a8(0x901)](_0x3e83a8(0xa57)):this['_mainSprite'][_0x3e83a8(0x6db)][_0x3e83a8(0xa6f)]!==this['_battler'][_0x3e83a8(0x726)]()&&(this['_mainSprite'][_0x3e83a8(0x6db)]['smooth']=this[_0x3e83a8(0x69e)][_0x3e83a8(0x726)]()));},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x71b)]=function(){},Sprite_SvEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x6a1)]=function(_0x31e0d7,_0x177903,_0x372ea1){const _0x51d834=_0x4ab18a;if(this[_0x51d834(0x761)])this[_0x51d834(0x761)][_0x51d834(0x6a1)](_0x31e0d7,_0x177903,_0x372ea1);},Sprite_SvEnemy['prototype'][_0x4ab18a(0x1dc)]=function(){const _0x34311a=_0x4ab18a,_0x5e3186=this[_0x34311a(0x1cd)];if(_0x5e3186){if(_0x34311a(0x604)===_0x34311a(0x604)){const _0x25150a=_0x5e3186[_0x34311a(0x88a)]();if(_0x5e3186[_0x34311a(0x3bb)]()||_0x5e3186[_0x34311a(0x5a4)]())this[_0x34311a(0xa86)](_0x34311a(0x38f));else{if(_0x25150a===0x3)this['startMotion'](_0x34311a(0x43c));else{if(_0x25150a===0x2)this[_0x34311a(0xa86)](_0x34311a(0x33d));else{if(_0x5e3186[_0x34311a(0x766)]())this['startMotion'](_0x34311a(0xab1));else{if(_0x5e3186[_0x34311a(0x2f1)]()||_0x5e3186[_0x34311a(0x4c9)]())_0x34311a(0x174)!==_0x34311a(0x711)?this[_0x34311a(0xa86)](_0x34311a(0x368)):this[_0x34311a(0x514)]();else{if(_0x25150a===0x1){if(_0x34311a(0xd0)!==_0x34311a(0xd0)){const _0xdba055=_0x502ce4[_0x34311a(0x50a)](_0x3fcae6);return _0xdba055>=0x0?[_0x37e8af[_0xdba055+0x1]||_0x5006de]:[_0x38a186];}else this['startMotion']('abnormal');}else{if(_0x5e3186[_0x34311a(0xbe)]())this[_0x34311a(0xa86)](_0x34311a(0x1c7));else _0x5e3186[_0x34311a(0x757)]()?'PQdSB'==='MUpSC'?(_0x58eee8['width']=_0x19f80a(_0x307e8d['$1']),_0x4a6fc1[_0x34311a(0x428)]=_0x573121(_0x539775['$2'])):this['startMotion'](_0x34311a(0x38f)):this[_0x34311a(0xa86)](_0x5e3186[_0x34311a(0x30f)]()[_0x34311a(0x9ad)]||'walk');}}}}}}}else this['push'](_0x34311a(0x5a3),[_0x51fe76],_0x38b75c,_0x13b56a),this[_0x34311a(0x448)]('performMoveToTargets',_0x13a22d,_0x44d9ca,'front\x20center',_0x11d29d,!![],_0x34311a(0xfb),!![]),this[_0x34311a(0x448)](_0x34311a(0x27c),[_0x42fddf],_0x34311a(0x38f)),this['push'](_0x34311a(0x259));}},Sprite_SvEnemy[_0x4ab18a(0x49d)]['inHomePosition']=function(){const _0xeff5f1=_0x4ab18a;if(this['parent'])return this[_0xeff5f1(0x761)][_0xeff5f1(0x746)]===0x0&&this[_0xeff5f1(0x761)]['_offsetY']===0x0;else{if('LHcTT'==='HHzTC'){if(this[_0xeff5f1(0xabf)][_0xeff5f1(0xad4)]())return;this['finishActorInput'](),this['checkTpbInputClose'](),!this['_subject']&&!this[_0xeff5f1(0xabf)]&&_0x2652d3['_scene'][_0xeff5f1(0x5ee)]();}else return!![];}},Sprite_SvEnemy[_0x4ab18a(0x49d)]['updateFlip']=function(){},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x6b5)]=Sprite_Animation[_0x4ab18a(0x49d)][_0x4ab18a(0x31b)],Sprite_Animation[_0x4ab18a(0x49d)][_0x4ab18a(0x31b)]=function(_0x124081){const _0x900316=_0x4ab18a;if(_0x124081[_0x900316(0x8b7)])return'ZUPkD'!==_0x900316(0xa41)?this['targetDistortionSpritePosition'](_0x124081):![];else{if('YXMhm'!==_0x900316(0x20c))_0x2110e4['setValue'](_0x5770d0['SwitchMissEvade'],![]);else return VisuMZ[_0x900316(0x94c)]['Sprite_Animation_targetSpritePosition'][_0x900316(0x45b)](this,_0x124081);}},Sprite_Animation['prototype']['targetDistortionSpritePosition']=function(_0x32762a){const _0x2c768d=_0x4ab18a;let _0x4c75e5=_0x32762a['x'],_0x5c81bf=_0x32762a['y'],_0x14b9f3=_0x32762a['height'],_0x195877=_0x32762a[_0x2c768d(0x8b7)][_0x2c768d(0x443)]['y'];_0x32762a['x']=_0x32762a[_0x2c768d(0x520)]+_0x32762a[_0x2c768d(0xa5f)](),_0x32762a['y']=_0x32762a[_0x2c768d(0x5e7)]+_0x32762a[_0x2c768d(0x3e0)](),_0x32762a[_0x2c768d(0x428)]*=_0x195877;let _0x30b51d=VisuMZ['BattleCore'][_0x2c768d(0x6b5)][_0x2c768d(0x45b)](this,_0x32762a);return _0x32762a['x']=_0x4c75e5,_0x32762a['y']=_0x5c81bf,_0x32762a[_0x2c768d(0x428)]=_0x14b9f3,_0x30b51d;},Sprite_Damage[_0x4ab18a(0x49d)]['setupBattleCore']=function(_0x18eb30){const _0x528ebf=_0x4ab18a,_0x123dbd=_0x18eb30[_0x528ebf(0x4dd)]()||_0x18eb30[_0x528ebf(0x2d4)]();if(_0x123dbd['missed']||_0x123dbd[_0x528ebf(0x61c)])this['_colorType']=0x0,this[_0x528ebf(0x892)]();else{if(_0x123dbd[_0x528ebf(0xed)])this['_colorType']=_0x123dbd[_0x528ebf(0x9c0)]>=0x0?0x0:0x1,this[_0x528ebf(0x854)](_0x123dbd['hpDamage']);else _0x18eb30[_0x528ebf(0x3ab)]()&&_0x123dbd[_0x528ebf(0x9f6)]!==0x0&&(this[_0x528ebf(0x904)]=_0x123dbd['mpDamage']>=0x0?0x2:0x3,this[_0x528ebf(0x854)](_0x123dbd['mpDamage']));}_0x123dbd[_0x528ebf(0x33e)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x4ab18a(0x49d)]['setup']=function(_0x39c2a3){},Sprite_Damage[_0x4ab18a(0x49d)][_0x4ab18a(0x854)]=function(_0x16e864){const _0x599d88=_0x4ab18a;let _0x24b3de=this[_0x599d88(0x524)](_0x16e864);const _0x38ec09=this[_0x599d88(0x5e6)](),_0x1487ac=Math[_0x599d88(0x831)](_0x38ec09*0.75);for(let _0x5adee5=0x0;_0x5adee5<_0x24b3de[_0x599d88(0x820)];_0x5adee5++){if(_0x599d88(0xa64)==='GJLCT'){this[_0x599d88(0xba)]=_0x13085f,this[_0x599d88(0x4f4)]='';const _0x53c5ec=new _0x125d78(0x0,0x0,_0x4a7913[_0x599d88(0x958)],this[_0x599d88(0x6fe)]()*0x4);_0x5bdac[_0x599d88(0x49d)][_0x599d88(0x9ed)][_0x599d88(0x45b)](this,_0x53c5ec),this[_0x599d88(0x8d6)](0x2),this['contentsOpacity']=0x0;}else{const _0x51d38c=this['createChildSprite'](_0x1487ac,_0x38ec09);_0x51d38c['bitmap'][_0x599d88(0x5f1)](_0x24b3de[_0x5adee5],0x0,0x0,_0x1487ac,_0x38ec09,'center'),_0x51d38c['x']=(_0x5adee5-(_0x24b3de[_0x599d88(0x820)]-0x1)/0x2)*_0x1487ac,_0x51d38c['dy']=-_0x5adee5;}}},Sprite_Damage[_0x4ab18a(0x49d)][_0x4ab18a(0x524)]=function(_0xb3c7a6){const _0xdf4b62=_0x4ab18a;let _0x175667=Math[_0xdf4b62(0x27f)](_0xb3c7a6)[_0xdf4b62(0x5c9)]();this['useDigitGrouping']()&&(_0x175667=VisuMZ['GroupDigits'](_0x175667));const _0x51ea93=VisuMZ[_0xdf4b62(0x94c)][_0xdf4b62(0x3f5)][_0xdf4b62(0x486)];let _0x9d6218='',_0xe636a2='';switch(this[_0xdf4b62(0x904)]){case 0x0:_0x9d6218=_0x51ea93[_0xdf4b62(0x6b8)]||'-%1',_0xe636a2=TextManager['hp'];if(_0xb3c7a6===0x0)_0x9d6218='%1';break;case 0x1:_0x9d6218=_0x51ea93[_0xdf4b62(0xa0)]||_0xdf4b62(0xab6),_0xe636a2=TextManager['hp'];break;case 0x2:_0x9d6218=_0x51ea93['mpDamageFmt']||_0xdf4b62(0xad7),_0xe636a2=TextManager['mp'];break;case 0x3:_0x9d6218=_0x51ea93['mpHealingFmt']||'+%1\x20MP',_0xe636a2=TextManager['mp'];break;}return _0x9d6218['format'](_0x175667,_0xe636a2)[_0xdf4b62(0x3a3)]();},Sprite_Damage[_0x4ab18a(0x49d)][_0x4ab18a(0x35f)]=function(){const _0x5074cb=_0x4ab18a;if(Imported[_0x5074cb(0x1fc)])return VisuMZ[_0x5074cb(0xa7b)]['Settings'][_0x5074cb(0x550)][_0x5074cb(0x59e)];else{if(_0x5074cb(0x826)===_0x5074cb(0x429))_0x19fb10[_0x5074cb(0x5fa)](_0x3dcb98,_0x117964);else return![];}},Sprite_Damage[_0x4ab18a(0x49d)][_0x4ab18a(0x976)]=function(){const _0x47ccfd=_0x4ab18a,_0x1efcde=VisuMZ['BattleCore']['Settings'][_0x47ccfd(0x486)];this['_flashColor']=_0x1efcde[_0x47ccfd(0x2f2)][_0x47ccfd(0x2e2)](0x0),this[_0x47ccfd(0x462)]=_0x1efcde[_0x47ccfd(0x921)];},Sprite_Damage[_0x4ab18a(0x49d)]['setupTextPopup']=function(_0x4e18c4,_0x445f1c){const _0x43d6f3=_0x4ab18a;this[_0x43d6f3(0x193)]=_0x445f1c[_0x43d6f3(0x2f0)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x43d6f3(0x6e6)](this[_0x43d6f3(0x193)]),this[_0x43d6f3(0x462)]=_0x445f1c[_0x43d6f3(0x905)]||0x0;const _0xf22ee=this['fontSize'](),_0x245588=Math[_0x43d6f3(0x831)](_0xf22ee*0x1e),_0x28e379=this[_0x43d6f3(0x655)](_0x245588,_0xf22ee);_0x28e379['bitmap'][_0x43d6f3(0x1bd)]=ColorManager[_0x43d6f3(0x444)](_0x445f1c[_0x43d6f3(0x1bd)]),_0x28e379[_0x43d6f3(0x6db)][_0x43d6f3(0x5f1)](_0x4e18c4,0x0,0x0,_0x245588,_0xf22ee,_0x43d6f3(0x419)),_0x28e379['dy']=0x0;},Sprite_Damage[_0x4ab18a(0x49d)][_0x4ab18a(0x652)]=function(_0x15f45e,_0xb14dda,_0x57c316){const _0x24a9ae=_0x4ab18a,_0xe32ffa=Math[_0x24a9ae(0x877)](this[_0x24a9ae(0x5e6)](),ImageManager[_0x24a9ae(0x485)]),_0x2fe898=Math[_0x24a9ae(0x831)](_0xe32ffa*0x1e),_0x5cfa53=this[_0x24a9ae(0x655)](_0x2fe898,_0xe32ffa),_0x1ffda8=ImageManager[_0x24a9ae(0x718)]/0x2,_0x398c4f=_0x5cfa53['bitmap'][_0x24a9ae(0x5db)](_0xb14dda+'\x20');_0x5cfa53[_0x24a9ae(0x6db)][_0x24a9ae(0x1bd)]=ColorManager[_0x24a9ae(0x444)](_0x57c316['textColor']),_0x5cfa53[_0x24a9ae(0x6db)]['drawText'](_0xb14dda,_0x1ffda8,0x0,_0x2fe898-_0x1ffda8,_0xe32ffa,_0x24a9ae(0x419));const _0x183544=Math[_0x24a9ae(0x1e2)]((_0xe32ffa-ImageManager[_0x24a9ae(0x485)])/0x2),_0x20712c=_0x2fe898/0x2-ImageManager['iconWidth']-_0x398c4f/0x2+_0x1ffda8/0x2,_0x1c2ea2=ImageManager[_0x24a9ae(0xac4)](_0x24a9ae(0x4ee)),_0x1405e7=ImageManager['iconWidth'],_0x2c7c07=ImageManager[_0x24a9ae(0x485)],_0x5844c2=_0x15f45e%0x10*_0x1405e7,_0xbbe84d=Math[_0x24a9ae(0x831)](_0x15f45e/0x10)*_0x2c7c07;_0x5cfa53[_0x24a9ae(0x6db)][_0x24a9ae(0x57d)](_0x1c2ea2,_0x5844c2,_0xbbe84d,_0x1405e7,_0x2c7c07,_0x20712c,_0x183544),this[_0x24a9ae(0x193)]=_0x57c316['flashColor']||[0x0,0x0,0x0,0x0],this[_0x24a9ae(0x193)]=JsonEx[_0x24a9ae(0x6e6)](this['_flashColor']),this['_flashDuration']=_0x57c316[_0x24a9ae(0x905)]||0x0,_0x5cfa53['dy']=0x0;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x501)]=Sprite_StateIcon['prototype'][_0x4ab18a(0x5dd)],Sprite_StateIcon[_0x4ab18a(0x49d)][_0x4ab18a(0x5dd)]=function(){const _0x4418b8=_0x4ab18a;VisuMZ[_0x4418b8(0x94c)][_0x4418b8(0x501)][_0x4418b8(0x45b)](this),this['opacity']=this[_0x4418b8(0xa70)]>0x0?0xff:0x0;},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x799)]=Sprite_Weapon[_0x4ab18a(0x49d)][_0x4ab18a(0x8af)],Sprite_Weapon[_0x4ab18a(0x49d)][_0x4ab18a(0x8af)]=function(){const _0x2d3ec9=_0x4ab18a;VisuMZ['BattleCore'][_0x2d3ec9(0x799)][_0x2d3ec9(0x45b)](this),this[_0x2d3ec9(0x6db)]&&(this[_0x2d3ec9(0x6db)][_0x2d3ec9(0xa6f)]=VisuMZ[_0x2d3ec9(0x94c)][_0x2d3ec9(0x3f5)]['Actor'][_0x2d3ec9(0x4a9)]);};function _0x5edb(){const _0x410554=['ACxnl','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','Window_SkillList_maxCols','BindCommonEventKeysForGroup','isBattlerGrounded','displayReflectionPlayBack','anchorX','_growDuration','XPSpriteYLocation','repeatTargets','BattleCore','commandNameWindowCenter','Window_BattleLog_performReflection','setBattleSkew','18529459MyEVaA','ShowHpDmg','_executedValue','isBreakStunned','wRbvD','Sprite_SvEnemy','canGuardBattleCore','AlphaFilter','boxWidth','process_VisuMZ_BattleCore_Action_Notetags','AsTarget','helpWindowRect','revealNewWeaknesses','clearBattlerMotionTrailData','vXenX','commandName','WaitForMovement','ActiveTpbOptionsMessage','isCertainHit','ActSeq_Element_Clear','ActSeq_Horror_NoiseCreate','PartyCmd','HomePosJS','createJS','_ptbActionCost','WVBiO','activate','spFsM','skewBattler','processRefresh','sizAr','createCommandNameWindow','isForRandom','dPEaB','startEnemySelection','PopupShiftX','WaitForJump','uWnaW','setupCriticalEffect','hVUZa','ActSeq_Mechanics_BoostPointsChange','ActSeq_Skew_WaitForSkew','Window_BattleLog_clear','evalDamageFormulaBattleCore','ChangeOrderBy','DistanceAdjust','addAnimationSpriteToContainer','afSUw','NvjDi','Scene_Map_updateCallMenu','updateHelp','param','xacdm','reduce','nMdBK','isAnyoneChangingOpacity','updateStart','attachSpritesToDistortionSprite','clearHorrorEffects','Window_BattleEnemy_initialize','setHelpWindow','ActSeq_Impact_MotionBlurTarget','makeTargets','_back2Sprite','isForOpponent','610GDqwHO','HzLOP','applyFreezeMotionFrames','iterateBattler','Game_BattlerBase_isStateResist','isDamagePopupRequested','JS\x20%1REGENERATE','MJXkp','width','playCancel','createAttachedSprites','createActionSequenceProjectile','SceneManager_push','DefeatEvent','VariableDmg','faceWidth','ActSeq_Movement_WaitForSpin','regenerateAllBattleCore','MAXHP','Skill-%1-%2','nLDFH','executeDamage','StartTurnShow','apply','evalDamageFormula','traitObjects','_skewEasing','float','motionIdle','gVcAM','ActSeq_Movement_MoveBy','_borderPortraitDuration','mWddq','requestAnimation','HLQFT','isDead','wMiZM','Game_Battler_onTurnEnd','sideview_ui','VariableID','CgMJh','updateForceAction','focus','ActSeq_Motion_MotionType','StatusWindowAttachmentBackOffsetX','PXZNQ','join','hpDamage','CriticalDmgRate','PreStartTurnJS','battleJump','rgyew','StepDuration','lWNwl','iCOtU','ActSeq_Mechanics_OnceParallel','HfWMU','helpAreaBottom','JS\x20%1END\x20ACTION','softDamageCap','ActSeq_DB_DragonbonesMotionAni','unshift','adjustPosition','kCicy','_floatHeight','ActionSequence','AEdKh','eIWmg','value1','_deathStateApplied','Spriteset_Battle_createBattleField','getLastPluginCommandInterpreter','DTB','updateJump','Slot','MeNnM','getAttackMotion','origin','actorCommandAutoBattle','isTickBased','Game_Interpreter_command283','updateCollapse','wMIOe','haBNq','toUpperCase','isMVAnimation','split','ShowMissEvasion','NameAlwaysVisible','Scene_Battle_skillWindowRect','setHandler','isSpriteVisible','initialize','close','Game_Interpreter_terminate','textWidth','wdfIF','forceAction','Buffs','_callSceneOptions','SuyyB','mpDamage','dataId','applyEasing','weapons','parameters','SvWeaponMass-%1-%2','setEventCallback','Game_Action_makeTargets','setupZoomBlurImpactFilter','isDebuffAffected','pEyHo','_duration','isActionSelectionValid','KySLp','tlxhP','CheckMapBattleEventValid','jtqyI','performEvasion','performCastAnimation','ActSeq_BattleLog_PopBaseLine','animationId','rZkmp','placeTimeGauge','ActSeq_Mechanics_StbExtraAction','swapEnemyIDs','gainBravePoints','_scene','isETB','fRNVz','ActSeq_Target_RandTarget','Game_BattlerBase_initMembers','setText','cWHmo','dNIkm','Opacity','_actionBattlers','BNhnL','addChildAt','JPsXR','NAeyw','process_VisuMZ_BattleCore_Failsafes','WaitComplete','_endBattle','ActionCount','partyCommandWindowRectBorderStyle','performAction','#ffffff','makeActionListAutoAttack','kUTHK','canEscape','isItem','isMagical','PopupOffsetX','icon','prepareBorderActor','BattleManager_onEscapeFailure','Scene_Battle_selectNextCommand','WaitForAngle','setCursorRect','pBfHE','QghQt','UNTITLED','index','attackStatesRate','LastSelected','initBattleCore','addSingleSkillCommands','PreEndActionJS','drain','updateBorderSprite','ext','svAnchorY','MOTIONS','DamageType%1','ActSeq_Motion_ClearFreezeFrame','AGLMO','ActSeq_Mechanics_RemoveState','getInputButtonString','JAENO','mtwFP','Game_Battler_performDamage','filter','_battlerName','iconIndex','open','KuDvQ','missle','bLKMF','gqPtT','CommandAddAutoBattle','ActionSkillMsg2','upxRX','TlIZB','setCommonEvent','getStypeIdWithName','fpMcH','_damages','PreStartActionJS','preemptive','PreDamageJS','Sprite_Battler_setBattler','_tpbNeedsPartyCommand','frameVisible','CalcEscapeRatioJS','MotionSpeed','extraPositionX','_tempEquipCheck','createMainSprite','BattleManager_cancelActorInput','updateMain','hoMrn','Window_BattleLog_performCounter','processBattleCoreJS','actions','_actionInputIndex','battleFloat','WaitForCamera','callOptions','pPryM','StartName','setHelpWindowItem','smooth','_iconIndex','AutoBattleBgType','nAdyD','wViQP','playEnemyAttack','autoBattleUseSkills','performReflection','mFQdE','Window_BattleLog_displayMiss','tIoWI','Qzzwf','CoreEngine','CreateActionSequenceTargets','playReflection','Sprite_Actor_update','autoBattleWindowRect','Scene_Battle_startEnemySelection','MAXMP','onJumpEnd','Window_BattleLog_performActionEnd','battleSpin','isAutoBattle','startMotion','targetActionSet','displayEvasion','timeScale','tGcxA','commandSymbol','cancelTargetSelectionVisibility','pulTK','SideviewSelect','STRUCT','ActSeq_Camera_WaitForCamera','isAnyoneGrowing','boqiF','startDamagePopup','changeBattlerOpacity','pptRF','setSvBattlerSprite','oADCu','Immortal','changeInputWindow','kAtTJ','Game_Action_itemEffectAddAttackState','angleDuration','dNkaT','XVsnd','ActSeq_Element_NullElements','visibilityState','adjustPosition_ScaleUp','stateRate','BjilX','WaitCount','LqwTa','glitch','displayTpDamage','NewPopupBottom','TpGaugeOffsetY','softDamageCapRate','mainSprite','updateCancel','_updateCursorArea','autoBattleAtStart','makeTargetsBattleCore','isNextScene','chant','isOpponent','OffsetY','ActSeq_Impact_ZoomBlurTargetCenter','StateIconOffsetY','+%1','setupFont','ActSeq_Mechanics_AddBuffDebuff','arRedRate','encounterList','DefaultHardCap','processEscape','alive\x20battlers\x20not\x20user','updateShadowBattleCore','_currentActor','_flinched','MqetQ','_lastEnemy','MDF','loadSystem','nghGW','WEAPON\x20SWAP','removeChild','Window_BattleLog_performDamage','innerHeight','createDamageSprite','AutoMeleeAoE','pushBaseLine','getMenuImage','updateEffectsContainer','createHpGaugeSprite','Game_Troop_expTotal','addSingleSkillCommand','WaitCount1','StyleName','selectNextCommand','OverallFormulaJS','EnableSoftCap','-%1\x20MP','damageOffsetY','PopupPosition','missile','moOAr','friendsUnit','battleCommandName','eBPqR','ZfLzs','_skewDuration','isJumping','bind','canInput','ActSeq_Movement_Skew','isAnyoneMoving','_enemySprites','gmYii','nQJkw','forceWeaponAnimation','FollowTurn','gainTp','ActSeq_Mechanics_PtbConvert','custom','isAnimationShownOnBattlePortrait','kskTw','battleLayoutStyle','changeAtbCastTime','nextActiveWeaponSlot','Scene_Battle_startPartyCommandSelection','applyTargetFilters','ActSeq_Mechanics_AddState','growBattler','PreApplyAsUserJS','ARRAYNUM','itemHeight','StyleOFF','removeStatesAuto','Scene_Battle_createPartyCommandWindow','oFwxz','anchor','_active','displayAddedStates','VBMbs','onOpacityEnd','Window_BattleLog_performMiss','_targetAngle','pJorK','Game_Action_needsSelection','drawSingleSkillCost','VisuMZ_2_BattleSystemBTB','PostEndBattleJS','getCommonEventIdWithName','updateWaitMode','uNBej','clearFreezeMotion','WaitForSkew','YaaAZ','performAttack','updateStateSprite','onGrowEnd','_homeX','hpHealingFmt','waitForJump','ZsczO','startFloat','IUkpG','debuffAdd','IIBBG','battlelog','orGql','addCommand','isPartyCommandWindowDisabled','SkillItemBorderCols','ActSeq_BattleLog_AddText','performMiss','isSceneBattle','EGRNn','freezeMotion','BvIGw','includes','oOtyD','isMagicSkill','addState','battleOpacity','iconText','ConfigManager_makeData','BwrlF','_enemyID','mainSpriteScaleX','addShowHpGaugeCommand','tcgjl','isDying','createCommandVisibleJS','Gdowv','JS\x20BATTLE\x20VICTORY','removeHorrorEffect','_statusWindow','cameraClamp','createPartyCommandWindowBattleCore','ActSeq_Movement_Scale','weatherPower','_battlePortrait','VisuMZ_2_BattleSystemSTB','guardSkillId','stepForward','isAnyProjectilePresent','_targetGrowY','CmdIconOptions','getNextSubjectFromPool','BVfor','_phase','DWkTT','Sprite_Battleback_adjustPosition','motionType','CommandVisible','revertTpbCachedActor','startTurn','removedStateObjects','startTpbTurn','ActSeq_Camera_Offset','dimColor1','JSON','start','wyPCK','_skewWholeDuration','_lineHeight','PrioritySortActors','ForceDeath','isFriendly','FwMIl','allowCollapse','allBattleMembers','hrXRU','itemRect','deadMembers','tAzEj','random','DxuxV','hpAffected','selectNextActor','_tempBattler','BindCommonEventKeysForObj','tFINI','command301_PreBattleEvent','setupActionSet','dSnMo','_forcedBattlers','Game_Map_battleback1Name','_subject','ActSeq_Mechanics_CtbSpeed','ItcvQ','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','Linear','updateFlip','_freezeMotionData','DisplayAction','ckeQE','displayAffectedStatus','battleCamera','battleAnimation','not\x20focus','_baseLineStack','QNMqD','Sprite_Actor_updateFrame','PreApply%1JS','EFihp','TFuxH','hOCHo','SvMotionIdleMass-%1-%2','vrvbP','makeActions','isOpen','ActSeq_Movement_FaceDirection','WaitForFloat','isLearnedSkill','WPYWn','ShowAddedBuff','BattleManager_isTpbMainPhase','basicGaugesY','initBattlePortrait','ParseStateNotetags','hyNMQ','ConfigManager_applyData','Window_BattleLog_performAction','ActSeq_Impact_ZoomBlurPoint','peMLY','concat','YtJJP','priority','isTpbMainPhase','startSpin','jyhSt','opponentsUnit','isAnyoneSpinning','command283','COMBATLOG','zyPIn','commandNameWindowDrawText','maxTp','createDistortionSprite','cancelActorInput','BWLKW','CmdTextAutoBattle','skillWindowRect','code','casting','NRVHV','xAJic','RksiT','itemWindowRect','logWindowRect','MP_Flat','PJYwZ','boxHeight','pFBvw','CastAnimation','process_VisuMZ_BattleCore_CreateRegExp','HqKaU','playEnemyDamage','ActSeq_Mechanics_BreakShieldReset','notFocusValid','UZEaK','attack','Turns','EgtyZ','endAnimation','stepFlinch','_createDamageContainer','BattleManager_selectNextCommand','NQDBR','18dTwXcx','blockWidth','isTpb','KitKz','cancelButtonText','_effectsContainer','canAttackBattleCore','isActiveTpb','drawItemStyleIconText','%1Damage%2JS','selectNextCommandTpb','DHIWN','ShowCurrentState','Scene_Battle_updateStatusWindowPosition','Window_BattleLog_performActionStart','removeImmortal','endAction','_skillIDs','PreDamage%1JS','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','cDYFm','getDualWieldTimes','NfVCC','ZMWol','TextAlign','cameraDuration','_branch','constructor','HpGaugeOffsetX','createContents','commandOptions','equipSlots','BattleVictoryJS','createTroopNote','children','Name','ReflectPlayback','gaugeLineHeight','getWtypeIdWithName','canMove','ActSeq_Projectile_Picture','LLWnV','battler','uBWjC','callUpdateHelp','addPartyCommand','KZoYN','Game_Battler_performMiss','Game_Map_encounterList','BTestBypass','Sprite_Actor_createStateSprite','pbLYk','calcWindowHeight','SkewY','process_VisuMZ_BattleCore_PreBattleCommonEvent','process_VisuMZ_BattleCore_DamageStyles','WaitForEffect','YBEUe','autoBattleStyle','vmupX','StatusWindowSelectableBackHide','clearMotion','ZKrgY','_preBattleCommonEvent','updateLink','drawItemImageListStyle','OcUFr','fyHZv','prepareCustomActionSequence','BattleManager_inputtingAction','AddOption','active','battleback2Name','statusWindowRectXPStyle','_flashColor','SvBattlerMass-%1-%2','BXuBs','registerCommand','OiilY','stepBack','resetResultSwitches','addChild','requestMotionRefresh','faceRect','#%1','svBattlerAnchorY','rtJOf','FvORY','floatBattler','HWZVY','itemLineRect','AttachStateOffsetY','skew','Victory','border','updateBitmap','_additionalSprites','Scene_Battle_itemWindowRect','OZTlN','_activeWeaponSlot','startWeaponAnimation','UZNgp','eTjEE','isImmortal','windowAreaHeight','maxLines','EUkLg','Scene_Battle_onEnemyCancel','nuVrU','jgakc','addCombatLogCommand','abnormal','parseForcedGameTroopSettingsBattleCore','%1StartActionJS','useItem','animationBaseDelay','textColor','YKxGN','JS\x20%1START\x20TURN','setupBattleCore','HCkDl','logActionList','ShowFacesListStyle','initVisibility','Window_BattleLog_pushBaseLine','Mechanics','dying','isBattleCoreTargetScope','SvWeaponSolo-%1-%2','_targetSkewY','pow','onEnemyCancel','_actor','deeIc','isAnyoneFloating','HRSnj','updatePadding','JUlef','updateEffectContainers','wait','_enemyIDs','scPyL','PopupShiftY','updateShadowVisibility','dead\x20battlers','battleEffect','changeBattlebacks','refreshMotion','_enemies','performMoveToTargets','_escapeRatio','addedBuffs','Window_Options_addGeneralOptions','round','kNYRS','MCuYY','repositionCancelButtonBorderStyle','FlinchDuration','HP_Rate','refreshBattlerMotions','_checkOn','displayReflection','VkdMW','updatePosition','MZpxh','eAmlR','Game_Interpreter_updateWaitMode','MP_Rate','JumpToLabel','Sprite_Battler_update','expTotal','jwNAi','_growY','JKynA','string','_svBattlerSprite','updateActors','ActSeq_DB_DragonbonesTimeScale','isConfused','VisuMZ_0_CoreEngine','shadow','AutoBattleMsg','currentSymbol','xctZl','_targetFloatHeight','EIYod','NBcEc','processAnimationRequests','zmCEs','clearActiveWeaponSlot','_actions','lXnmR','wpGLI','createBattleUIOffsetX','battlerShadowScaleX','YXMhm','ctUjC','LtOjF','refreshActorPortrait','Game_Enemy_transform','_indent','ywjeK','GwWla','VisuMZ_3_WeaknessDisplay','DualWield','Game_BattlerBase_refresh','svAnchorX','displayCritical','setActionState','BattleStartEvent','ELjQi','collapseType','performActionStart','Game_Battler_forceAction','ZcqJI','getTraitSetKeys','_onceParallelInterpreters','linkSprite','sortEnemies','updateBattlerContainer','getItemDamageAmountTextOriginal','PreRegenerateJS','ActSeq_Impact_ShockwaveCenterTargets','zzQbZ','TWkmW','uiMenuStyle','attackMotions','maxCommands','KAXgV','base','Pemxt','ParseSkillNotetags','ActSeq_BattleLog_WaitForBattleLog','ActSeq_Movement_WaitForSkew','VisuMZ_3_BoostAction','wWgBz','JS\x20%1START\x20BATTLE','regionId','MpGaugeOffsetX','stop','battleZoom','sKsjt','addChildToBack','right','ppQBR','VisuMZ_2_BattleSystemETB','vxXBy','setBattlerFacePoint','Setting','visible','CmdIconEscape','addedStateObjects','jqkgi','pmytH','FaceDirection','addActor','Scale','StartTurnMsg','svBattlerAnchorX','Window_BattleLog_popupDamage','uiInputPosition','ActSeq_Weapon_SetActiveWeapon','clearRect','BattleManager_endAction','extraHeight','applyImmortal','Game_Troop_setup','performSubstitute','reverse','performMoveToPoint','displayChangedStates','isBattleMember','waitForMovement','hide','head','isBattleRefreshRequested','hkHzm','xSZau','drawItemImagePortraitStyle','_angleWholeDuration','FuQyt','12SGbiqe','Scene_Options_maxCommands','Sprite_Enemy_setBattler','onDisabledPartyCommandSelection','addSkillTypeCommand','preparePartyRefresh','_animationContainer','SDzZx','setupBattleCoreData','_growWholeDuration','nUrmL','createEnemyNames','vUeWi','spinBattler','VisuMZ_2_DragonbonesUnion','nouve','_totalValue','VisuMZ_1_SkillsStatesCore','performRecovery','SkipPartyCmd','_angleRevertOnFinish','replace','format','BjwRH','rBesh','trueRandomTarget','requestMotion','zODCf','PostEndActionJS','abs','Scene_Battle_createAllWindows','setActorHome','ScaleDown','8AXSqtF','bPYVa','_targets','skillTypes','nyoxV','_commonEventQueue','CombatLogIcon','performDamage','QTmpM','updateBossCollapse','alive\x20actors\x20not\x20target','updateBattlebackBitmap2','HlauE','Game_Enemy_setup','_animation','JjmHA','updateSpin','autoSelectLastSelected','createAllWindows','createBorderStylePortraitSprite','clearDamagePopup','_createCursorArea','EscapeFailureJS','Sprite_Enemy_update','_floatDuration','loop','wsmva','removeBuffsAuto','JS\x20ESCAPE\x20FAILURE','options','StatusWindowSkinFilename','ranmT','KOeLq','requestFauxAnimation','_damageContainer','Scene_Boot_onDatabaseLoaded','isTeamBased','skills','iloWS','setBattleAngle','Targets','getDamageStyle','clearActiveWeaponSet','checkShowHideSwitchNotetags','shift','Mute','GkoVc','attackStates','GsBbg','_tempActor','itemTextAlign','callOkHandler','Wave','ActSeq_Camera_FocusPoint','updateStatusWindowPosition','Game_Interpreter_PluginCommand','SYIQq','yxDvy','Parse_Notetags_Action','1608OYVghk','WBvXM','arPenFlat','inputting','upUyF','battleUIOffsetY','ZtXYa','HelpOptions','TpbActiveChangeEnabled','ARRAYJSON','contains','Direction','ScaleToFit','ieemq','deathStateId','isHiddenSkill','wsXMG','Shadow','gsFqt','rdqDE','VisuMZ_3_ActSeqProjectiles','isSpinning','result','initElementStatusCore','addAutoBattleCommand','_waitMode','_target','default','MLiOQ','kPqyA','RevertAngle','drawItemStatusListStyle','equips','weaponTypes','onTurnEnd','attackAnimationIdSlot','slice','pcndu','setupChild','mainSpriteWidth','aPiGy','EnkBT','_shadowScaleY','gsumA','spriteId','OwjsK','nzFPB','_index','Formula','ATTACK','flashColor','isGuard','CriticalColor','VisuMZ_2_BattleSystemFTB','SkillsStatesCore','nMvBE','JIdml','PWKTf','startPartyCommandSelection','ActSeq_ChangeAngle','\x5cI[%1]%2','processForcedAction','BattleLogRectJS','gainMp','clearWeaponAnimation','Pre','actionSplicePoint','AsUser','Targets1','isBattlerFlipped','WeaponTypeID','qyezw','Angle','alignBattleCoreDamageSprite','ZEIWy','cCtcJ','battleSkew','isMeleeMultiTargetAction','skill','TLjds','getNextSubject','svBattlerData','JCsXN','refreshCursor','Sidev','isBattleFlipped','ActSeq_Horror_NoiseRemove','xOYQR','QPyxC','processPostBattleCommonEvents','_stypeIDs','Scene_Map_initialize','isPlaytest','targetSpritePosition','setupMotionBlurImpactFilter','ActSeq_Element_AddElements','actorCommandWindowRect','gjKOB','NameOffsetY','uinJN','_battleCoreAddedElements','FTMdu','Filename','performActionEnd','turnCount','ActSeq_Impact_ShockwavePoint','usePremadeActionSequence','loadPicture','ParseClassNotetags','vfdjW','_updateFilterArea','_motionCount','Qnzhs','pQEog','processBorderActor','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','isSideView','_cacheTextWidth','hitRate','_attackAnimationId','ErNyG','adjustPosition_ScaleDown','popBaseLine','battleCoreResumeLaunchBattle','XIcqe','requestDragonbonesAnimation','isDeathStateAffected','sleep','critical','finishActionSet','changeCtbChargeTime','makeSpeed','isClicked','LUK','_opacityWholeDuration','displayMpDamage','NameLegacy','Scene_Battle_windowAreaHeight','ArPenRate','_autoBattleWindow','rowSpacing','isCustomBattleScope','qXIUd','yuqDW','isSkipPartyCommandWindow','updateCustomActionSequence','bitmapWidth','JS\x20ESCAPE\x20SUCCESS','isSkewing','ActSeq_Camera_Reset','_reflectionTarget','_motionSpeed','_surprise','setImmortal','isSceneChanging','rosyZ','reserveCommonEvent','_jumpDuration','CriticalHitRateJS','mJiWl','Game_Action_isForRandom','useDigitGrouping','updatePositionBattleCore','removeBuff','764065pMjCvo','dead\x20actors','CLjUs','%1StartTurnJS','POST-','Scene_Party','guard','ActSeq_ChangeSkew','StatusWindowAttachmentBack','makeActionList','getItemDamageAmountTextBattleCore','performCollapse','loadBattleback2','_cancelButton','Targets2','fmThK','updateCommandNameWindow','Game_BattlerBase_die','wxjQP','maxItems','_motionType','BattleLayout','match','uAvBF','BSXdP','moveBattlerDistance','dGtPN','setWaitMode','Sprite_Battler_damageOffsetY','TpGaugeOffsetX','sortDamageSprites','isOptionsCommandAdded','StateIconOffsetX','compareEnemySprite','show','setupShockwaveImpactFilter','addNewState','wuPKT','onRegeneratePlayStateAnimation','Sprite_Enemy_updateCollapse','drawItemImage','setupMotion','alive\x20enemies\x20not\x20target','commandAutoBattle','WSMQA','walk','_stateSprite','ActSeq_Mechanics_CtbOrder','moveToStartPosition','EXtMw','hasSvBattler','command301','ruGHE','Text','SwitchCritical','ActSeq_Mechanics_EnemyEscape','ActSeq_Horror_GlitchRemove','UQJxx','addText','ypJaO','removeAnimationFromContainer','showHelpWindow','createActorCommandWindowBattleCore','textSizeEx','_preemptive','trim','NDQvw','_hpGaugeSprite','setMoveEasingType','isAutoBattleCommandAdded','Actions','ActSeq_Movement_WaitForJump','message4','isAlive','5665vxqiej','_isBattlerFlipped','Mcjgu','ActSeq_Projectile_Icon','ActSeq_Target_CurrentIndex','Window_BattleLog_displayEvasion','createEmptyBitmap','stypeId','ConvertActionSequenceTarget','FrontViewSelect','Vwrrc','_commonEventKey','StyleON','getHardDamageCap','_commandNameWindow','isInputting','BattleManager_onEscapeSuccess','performTpbActiveCheckSwitch','notOd','addBattleCoreAutoBattleStartupCommand','destroy','adjustPosition_1for1','ceil','kgwWA','Scene_Battle_createCancelButton','VisuMZ_2_WeaponSwapSystem','cameraOffsetDuration','_customDamageFormula','Game_Action_itemEffectAddNormalState','buffRemove','getDefeatedEnemies','ConvertParams','addFightCommand','recoverAll','updateAttachedSprites','_multipliers','Spriteset_Battle_createLowerLayer','subject','_itemWindow','AutoBattleOK','anchorY','uduki','resize','EKYsb','PostStartTurnJS','frameCount','duration','sTPMJ','attackAnimationId1','ActorCmd','gYaDo','Scene_Battle_createActorCommandWindow','extraPositionY','process_VisuMZ_BattleCore_TraitObject_Notetags','gbBQp','Scene_Battle_onActorCancel','TpbGaugeOffsetX','isCustomActionSequence','Sprite_Enemy_createStateIconSprite','qKZRh','filters','addSkillCommands','updateOnceParallelInterpreters','processRandomizedData','JS\x20%1END\x20BATTLE','setCustomDamageFormula','<CUSTOM\x20ACTION\x20SEQUENCE>','battlerShadowScaleY','uZKdU','Window_BattleStatus_drawItemImage','gradientFillRect','SvUlB','_createCursorSprite','Settings','makeBattleCommand','StepDistanceX','DamageStyles','gjryH','ZFvYH','VisuMZ_2_HorrorEffects','ActSeq_Motion_PerformAction','selectPreviousCommand','createActorCommandWindow','gainCurrentActionsFTB','pointX','ScaleY','ActSeq_Zoom_Scale','FejSi','QLyFL','forceMotion','tpbCommandFight','WaitForAnimation','Window_Options_statusText','text\x20target','CalcEscapeRaiseJS','CqxAO','changePaintOpacity','AGI','getSkillIdWithName','_angleDuration','ParseWeaponNotetags','_dragonbonesSpriteContainer','ActSeq_Horror_GlitchCreate','Window_BattleLog_displayMpDamage','isAffectedByBreakShield','CalcActionSpeedJS','needsSelectionBattleCore','KzuLq','ShowHide','center','JEiMC','isCTB','startInput','damageContainer','_opacityDuration','battleUIOffsetX','Parse_Notetags_TraitObjects','bgpdB','_shadowSprite','Scene_Battle_initialize','status','compareBattlerSprites','clearForcedGameTroopSettingsBattleCore','ffFXC','height','pTlxL','Scene_Battle_createHelpWindow','ActSeq_Mechanics_CustomDmgFormula','PostDamageJS','needsSelection','BoostPoints','16rccWnc','checkAutoCustomActionSequenceNotetagEffect','switchToWeaponType','enemyId','isBusy','isAlwaysVisible','_targetSkewX','_targetGrowX','_actorWindow','updateBorderStyle','Game_Action_executeDamage','opacity','battleback1Name','dead','update','showAnimation','setHue','Window_BattleLog_performCollapse','ChantStyle','loadSvActor','scale','getColor','waitForFloat','GCdam','performSTBExploiter','push','<CENTER>%1','Game_Party_addActor','ScaleX','Reveal','DistanceX','ActSeq_Impact_MotionTrailCreate','Scene_Battle_commandFight','mmp','arRedFlat','Emyzo','setBattlerFlip','States','repositionEnemiesByResolution','ActSeq_Zoom_WaitForZoom','yzYBz','FlashDuration','skillItemWindowRectBorderStyle','ULmTj','call','_dimmerSprite','removeAnimation','StatusWindowAttachmentFront','BattleManager_startAction','displayCurrentState','Scene_ItemBase_applyItem','_flashDuration','ARRAYEVAL','fnordRemovedStates','_enemyWindow','ShowFailure','isSelected','EFFECT_COMMON_EVENT','_effectDuration','contents','commandStyleCheck','jHPSN','Game_Map_battleback2Name','createHelpWindowBattleCore','FullActions','gainStoredBoostPoints','HCILw','Style','fqUQi','validTargets','actor','LnCNN','Gsrwb','SkillItemMiddleLayout','action','ZWanc','HelpAutoBattle','xTbcI','isNextSceneBattleTransitionable','battleCoreTpbMainPhase','BoJrb','INTxg','lukEffectRate','drawEnemyName','damageRate','occasion','iconHeight','Damage','drawBackgroundRect','ActSeq_Movement_Jump','isAtbCastingState','_partyCommandWindow','shouldPopupDamage','MTofw','FocusX','AutoBattleCancel','NextTurn','MgzOd','TRvZa','StartTurnWait','applyHardDamageCap','ShowWeapon','windowPadding','getBattlePortraitOffsetX','Scene_Battle_updateBattleProcess','oiHnz','MkZaO','description','performMagicEvasion','VisuMZ_2_BattleSystemOTB','prototype','repeats','swing','hFJdI','Game_Battler_makeSpeed','AllowRandomSpeed','createInnerPortrait','Height','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','endBattle','Window_ItemList_maxCols','partyCommandWindowRectDefaultStyle','SmoothImage','CNOHJ','effects','placeGauge','AnchorY','createKeyJS','battleGrow','_forcing','hardDamageCap','Game_Actor_setup','PopupOffsetY','HitFlat','slices','ActSeq_Animation_ChangeBattlePortrait','ParseEnemyNotetags','FNAxf','xSIrm','startOpacity','statusText','CmdTextAlign','ParseArmorNotetags','_battleLayoutStyle','alterChange','YewuR','die','_linkedSprite','OffsetX','bCJuz','isIncludedInEnemyWindow','Shadow2','autoSelectPriority','centerFrontViewSprite','isGuardWaiting','iOQzN','cPpeg','VisuMZ_4_CombatLog','applyResultSwitches','magicReflection','Game_BattlerBase_addNewState','attackSkillId','itemHit','_growEasing','VisuMZ_3_ActSeqImpact','isAppeared','substitute','Parse_Notetags_Targets','isDTB','Sprite_Battler_isMoving','GWdnT','charging','ActSeq_Animation_PlayAtCoordinate','addAttackCommand','getNextDamagePopup','svBattlerShadowVisible','BattleManager_endBattle','currentAction','setBattlerBattleCore','Game_Party_removeActor','MpGaugeOffsetY','WaitForScale','Point','_lines','CPTTN','waitForNewLine','updateWeather','autoBattle','freezeFrame','OffsetAdjust','ATK','IconSet','_allTargets','numTargets','_cursorArea','TargetLocation','VisuMZ_1_MainMenuCore','_text','_growX','NameAlwaysSelectOnly','xnexk','coreEngineRepositionEnemies','StepDistanceY','Spriteset_Battle_updateActors','addEscapeCommand','TJIVe','AUPpw','createPartyCommandWindow','Window_BattleLog_displayCurrentState','isPartyTpbInputtable','Sprite_StateIcon_updateFrame','Window_BattleStatus_initialize','getAttackWeaponAnimationId','zAFAk','JS\x20%1START\x20ACTION','cancel','Game_Action_isForFriend','UcHOg','aqeeE','indexOf','Scene_Battle_start','TextColor','move','startActorSelection','_updateClientArea','_lastRegenFrameCount','makeCommandList','AutoBattleRect','Scene_Battle_partyCommandWindowRect','commandEscape','ParseItemNotetags','ZXjfI','GUARD','Scene_Battle_onEnemyOk','ShowCritical','_damagePopupArray','HUcKS','NameAlwaysHidden','aNmHa','CBvPa','CopyCombatLog','_baseX','RacLc','SPWyT','displayMiss','createString','ActSeq_Set_FinishAction','isActor','isSideButtonLayout','BzMsL','currentClass','FvuWa','JxLPv','windowskin','_windowLayer','onActorCancel','_tpbSceneChangeCacheActor','BARE\x20HANDS','ActSeq_Mechanics_PtbAlterCost','Duration','members','_frontAttachmentSprite','AqIdP','WtypeId','qGYTe','currentExt','_handlers','isQueueOptionsMenu','removeOnceParallelInterpreter','createLowerLayer','MotionAni','YuWPS','Skills','ysQAD','_uiContainer','Ctqwz','FUNC','ApplyImmortal','SaQEr','setFullActionsPTB','isForOne','battleAngle','Sprite_Battler_initMembers','Sprite_Actor_moveToStartPosition','weatherType','isBattleTest','power','gjqBD','MAT','QoL','statusTextAutoBattleStyle','createEffectActionSet','startAction','_floatEasing','_actorSprites','Scene_Battle_selectPreviousCommand','ugNbq','EnableDamageCap','oJSbs','HalfActions','command357','Game_Battler_onBattleStart','PrioritySortActive','Width','XEGOm','VariableHeal','Aoqjf','ohngD','Actor-%1-%2','makeDamageValue','isCancelled','CriticalHitMultiplier','getBattlePortraitOffsetY','PreApplyJS','pONTc','Actor','animationWait','ZRLvO','pattern','LPkmi','xAwIZ','addOptionsCommand','_eventId','%1EndActionJS','SkillItemStandardCols','FlIec','dead\x20friends','skillId','PreStartBattleJS','onEnemyOk','_borderPortraitSprite','kxHOd','getAttackMotionSlot','MANUAL','blt','AWsXQ','_displayBattleCoreTransitionErrorMsg','statusWindowRectDefaultStyle','AutoBattle','Enemy','ScaleUp','uOPkY','TtjKR','ShowMpDmg','faQGo','makeHpDamageText','applyDamageCaps','_createClientArea','stbGainInstant','wholeActionSet','rMarO','clearBattleRefreshRequest','AqyTY','backColor','%1RegenerateJS','sort','makeTargetSelectionMoreVisible','elUWy','FlinchDistanceY','filterArea','message2','Window_BattleLog_displayFailure','FaceAway','clearBattleCoreData','setHalfActionsPTB','NameOffsetX','setHorrorEffectSettings','DigitGroupingDamageSprites','isGrowing','YpYPC','dftso','addGeneralOptions','performJump','isActing','wlIqk','ActSeq_Animation_ShowAnimation','updateStyleOpacity','aMVPX','forceEscapeSprite','PostEndTurnJS','_targetIndex','ZbWpz','actorCommandSingleSkill','CmdStyle','Sprite_Actor_setBattler','LIxuU','_createEffectsContainer','isEffecting','maxCols','ActSeq_Mechanics_WaitForEffect','DamageRate','_targetOpacity','PopupDuration','displayActionResults','addedDebuffs','dgyGa','launchBattle','Frame','displayBattleCoreTransitionErrorMsg','ActSeq_Mechanics_Immortal','cbzzy','XrquP','DigitGrouping','WaitForNewLine','isForFriendBattleCore','isSkill','MotionIdle','createWeather','EasingType','_regionBattleback1','toString','startActorCommandSelection','CriticalDmgFlat','_autoBattle','bossCollapse','eifOi','padding','jump','ChargeRate','showNormalAnimation','fRepj','gainFullActionsPTB','WaitForZoom','_requestRefresh','ParseAllNotetags','yJLcy','Mirror','checkShowHideBattleNotetags','measureTextWidth','isForAll','updateFrame','performWeaponAnimation','Debuffs','_lastPluginCommandInterpreter','MotionFrameWait','actor%1-portrait','partyCommandWindowRect','updateTargetPosition','canUseItemCommand','fontSize','_baseY','VwnfL','MeleeDistance','refresh','applyItem','battleMembers','Sprite_Actor_setActorHome','updateBattleProcess','expRate','ActSeq_Motion_FreezeMotionFrame','drawText','ShowRemovedState','innerWidth','CfPFk','createShadowSprite','_svBattlerData','Venpx','AllowCollapse','bENpR','addDebuff','list','addItemCommand','Enemy-%1-%2','fnordAddedStates','_battlerContainer','rueBG','process_VisuMZ_BattleCore_BaseTroops','isSkillItemWindowsMiddle','updateEventMain','BoyQr','_action','PostStartBattleJS','Window_BattleLog_displayCritical','Qwvta','adjustPosition_ScaleToFit','partyCommandWindowRectXPStyle','udHGz','setVisibleUI','arPenRate','isEscapeCommandEnabled','ahbns','_mainSprite','ActSeq_Mechanics_AtbGauge','VisuMZ_3_SideviewBattleUI','ActSeq_Animation_ActionAnimation','_enemy','ClBgo','alive\x20enemies\x20not\x20user','contentsOpacity','createStateSprite','Sprite_Battler_updateMain','ActSeq_BattleLog_UI','callNextMethod','evaded','autoSelect','applySoftDamageCap','battleSys','isOTB','drawItemStatusXPStyle','Sprite_Enemy_updateStateSprite','isForOpponentBattleCore','HelpEscape','PostApplyJS','type','charged','loadBattleback1','KxBnp','ActionSkillMsg1','MLvBC','Game_Action_isForOpponent','sliceMax','nHrUT','EscapeSuccess','mZyiL','optDisplayTp','WaitForProjectile','text','SvMotionIdleSolo-%1-%2','Window_PartyCommand_initialize','updateAction','enemy','noSimilarSTypes','fumeU','drawSkillCost','WaitForOpacity','log','Scene_Battle_logWindowRect','dQMEH','isAnimationPlaying','changeAtbChargeTime','applyArmorModifiers','updateShadowPosition','startSkew','isAutoBattleCommandEnabled','onEncounterBattleCore','isATB','SwitchMissEvade','isForRandomBattleCore','showEnemyAttackAnimation','StatusWindowSkinHide','CommandAddOptions','Vpbpp','jumpBattler','Game_Actor_equips','_battleCoreBattleResumeAfter','ActSeq_Mechanics_Collapse','_immortal','setupIconTextPopup','PreEndTurnJS','drawItem','createChildSprite','clearResult','left','ActSeq_Mechanics_EtbAction','BattleManager_updatePhase','GGqir','FhISB','addLoadListener','Sprite_Actor_updateShadow','_battleCoreForcedElements','clamp','allowRandomSpeed','HxuAM','removeDamageSprite','Sprite_Battler_startMove','eMvAw','_homeY','isTurnBased','JS\x20BATTLE\x20DEFEAT','command119','setBattler','PostDamage%1JS','zoomDuration','ESCAPE','isCommandEnabled','collapse','BackColor','worldTransform','EHqyU','DefaultStyle','makeData','zTZnF','physical','fyXwW','battleSpriteSkew','criticalDmgRate','battleCameraData','updateMotionCount','qQkwW','dhFzQ','DefaultSoftCap','Battleback','BDhLB','setActiveWeaponSet','ActSeq_Movement_WaitForOpacity','ActSeq_Mechanics_BoostPointsStoreData','updateShadowScale','VisuMZ_2_BattleSystemCTB','updateAttachmentSprites','_methods','_pattern','command236','delay','addGuardCommand','updatePhase','isAnyoneSkewing','PostDamageAsUserJS','ZWNPs','ZxSlX','playOnceParallelInterpreter','commandStyle','ActSeq_Animation_WaitForAnimation','hitFlat','Window_BattleLog_displayActionResults','setBattleZoom','BlvZC','checkSceneBattleTransitionable','JlnUK','changeWeather','CmdIconAutoBattle','isMoving','ActSeq_Mechanics_TextPopup','StatusWindowAttachmentBackOffsetY','_battler','Scene_Battle_stop','tWevO','startMove','XPActorDefaultHeight','fittingHeight','%1EndTurnJS','startGrow','setActiveWeaponSlot','_shake','Sprite_Actor_updateBitmap','ShowAddedDebuff','NPuId','EXWiF','KjFhg','wtypeId','HXXGt','makeEscapeRatio','applyCritical','IconStypeMagic','ActSeq_Skew_Reset','portrait','Xkdwk','Sprite_Animation_targetSpritePosition','Scene_Battle_startActorCommandSelection','ActSeq_Mechanics_AnalyzeWeakness','hpDamageFmt','Spriteset_Battle_update','addDamageSprite','hasBeenDefeatedBefore','yKzoL','EVAL','ActSeq_BattleLog_Clear','requestRefresh','YvnZE','TFqkN','_appeared','placeStateIcon','messageSpeed','_lastAction','maxBattleMembers','criticalDmgFlat','setSTBExploited','ofPNs','_tpbState','customDamageFormula','ActSeq_Target_NextTarget','all\x20targets','setHome','ActSeq_Mechanics_ActionEffect','BattleManager_initMembers','isBorderStylePortraitShown','setupWeaponAnimation','rfYJE','CmdIconItem','process_VisuMZ_BattleCore_PluginParams','ActSeq_BattleLog_Refresh','ActSeq_Mechanics_VariablePopup','alive\x20friends\x20not\x20user','setBattleCameraOffset','mainSpriteHeight','bitmap','osLkN','isEnemy','_helpWindow','applyGlobalCommonEventNotetags','voKNk','SceneManager_isSceneChanging','updateCallMenu','splice','IcctS','LarMM','makeDeepCopy','battleProjectiles','createEnemyNameContainer','autoMeleeMultiTargetActionSet','Window_BattleLog_popBaseLine','zhXRv','terminate','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','drawItemBackground','3423462gRxGwb','extraPositionScaledY','UOHvC','createDamageContainer','isPreviousSceneBattleTransitionable','_spriteset','FfGLM','adjustWeaponSpriteOffset','animationShouldMirror','updateOpacity','actorCommandCancelTPB','KUcze','missed','TyNOZ','ActSeq_Mechanics_HpMpTp','lineHeight','_forcedBattleLayout','_effectType','undecided','ActSeq_Movement_WaitForFloat','isAttack','MCJiI','Scene_Map_initializeAfter','EDIcj','Game_BattlerBase_canGuard','HpGaugeOffsetY','EmnLX','waitForAnimation','isFTB','wfQDI','Game_Action_apply','PreEndBattleJS','makeActionOrders','ActSeq_Animation_AttackAnimation','KOkKT','_motion','ifRsW','acuZM','performAttackSlot','isOptionsCommandEnabled','statusWindowRect','iconWidth','BattleLog','map','retreat','ShowActorGauge','addCustomCommands','performActionEndMembers','QXwkh','kMFJu','_padding','dimColor2','performFlinch','Override','_animationCount','battlerSmoothImage','eGndd','_backAttachmentSprite','iIbjP','PostStartActionJS','commandFight','HljAU','helpAreaHeight','Sprite_Battler_setHome','uPePa','BattleManager_startInput','zsAaK','Window_BattleLog_update','PdtuT','onActorOk','Game_Battler_clearDamagePopup','_currentAngle','DFnPc','createTargetsJS','ActSeq_Mechanics_StbExploit','MuYWo','addBuff','alterBreakShield','StatusWindowAttachmentFrontOffsetY','lHwnD','isPTB','animation','setupBattleback','battlerSprites','isAtbChargingState','_jumpHeight','Intensity','_offsetX','_jumpMaxHeight','QxGaC','drawActorFace','createBattleUIOffsetY','pop','create','getFullActionsPTB','compatibilityVisible','Hdazk','unchanged','updateBattlebackBitmap1','addTextToCombatLog','_jumpWholeDuration','eraseState','Elements','TpbGaugeOffsetY','isUndecided','auto','JS\x20%1DAMAGE\x20%2','startBattle','_animationSprites','CcmSe','Game_BattlerBase_canAttack','EDeDj','kgSXN','BaseTroopIDs','parent','makeSuccess','Class-%1-%2','process_VisuMZ_BattleCore_CommonEventKeys','criticalHitFlat','isChanting','HelpItem','onFloatEnd','MIN_SAFE_INTEGER','fight','canGuard','eVrTi','TBdhJ','showPortraits','refreshStatusWindow','waitCount','yUaqO','Game_Action_evalDamageFormula','avEYs','setupBattlebackBattleCore','ixFao','isBypassDamageCap','updateFloat','ZEWce','zWIKZ','Game_Temp_requestAnimation','updateScale','setValue','BvGPB','BattleManager_startBattle','battleDisplayText','EscapeFail','_shadowScaleX','BKBER','NameFontSize','wQdwp','processActorCommandCancelTPB','forceSelect','giBDp','pxGlr','ActionEffect','NndXh','initMembers','onDatabaseLoaded','addImmortal','displayFailure','getEnemyIdWithName','putActiveBattlerOnTop','BattleCmdList','itemEffectAddAttackState','isHidden','onBattleStart','CheckSkillCommandShowSwitches','DefaultDamageStyle','_opacityEasing','parse','Sprite_Weapon_loadBitmap','setupTextPopup','loadWindowskin','motionSpeed','svShadow','_weather','setLastPluginCommandInterpreter','pointY','CreateCommonEventKeys','destroyDamageSprite','Sprite_Battler_updatePosition','RBuXJ','uyhIi','zdrkX','ShuffleArray','HelpSkillType','pWJNv','targetObjects','displayRemovedStates','_battleCoreBattleStartEvent','KGVnV','some','setBattleCameraPoint','isNonSubmenuCancel','applyBattleCoreJS','\x20to\x20%1\x20midbattle.','Jywhd','updateHpGaugePosition','mainSpriteScaleY','Window_BattleLog_displayTpDamage','alterActionCostPTB','ClearBattleLog','CommonEventID','transform','HpGauge','kGDyw','displayStartMessages','waitForOpacity','DisablePartyCmd','VisuMZ_3_ActSeqCamera','Sprite_Actor_initMembers','ActSeq_Movement_HomeReset','setupHpGaugeSprite','createBattleFieldBattleCore','resizeWindowBorderStyle','moveBattlerToPoint','actionEffect','%1StartBattleJS','ActSeq_Horror_Clear','chantStyle','_skillWindow','performCounter','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','value','Game_Action_itemHit','note','DefaultSoftScaler','inBattle','wAKJa','JVnMr','ActionEndUpdate','finalizeScale','removeActor','tPFKR','Scene_Battle_terminate','createStateIconSprite','isShownOnBattlePortrait','ActSeq_Mechanics_DamagePopup','isAlwaysHidden','NcjpJ','_floatWholeDuration','clear','PortraitScale','singleSkill','getBattlePortrait','BattleEndEvent','refreshDimmerBitmap','updateShadow','isFlipped','Window_BattleEnemy_show','_visualHpGauge_JustDied','isDisplayEmergedEnemies','displayBuffs','bitmapHeight','turnOrderChangeOTB','Game_Map_setupBattleback','PortraitScaleBorderStyle','createAttachmentSprites','TimeScale','dragonbonesData','EmergeText','exit','Game_Interpreter_command301','_updateCursorFilterArea','DrSkj','scope','gainCurrentActionsETB','ActSeq_Mechanics_ArmorPenetration','Scene_Map_launchBattle','IQafA','ActSeq_Horror_TVRemove','Exploited','frontviewSpriteY','prev\x20target','isVisualHpGaugeDisplayed','damageFlat','drawIcon','Rndms','BattleManager_startTurn','thrust','bgType','QrUOA','ShowCounter','isOnCurrentMap','DamageFlat','atbInterrupt','displayAction','isTriggered','isBuffAffected','vltHa','NphcI','lineRect','_actorCommandWindow','_commonEventIDs','turn','_stateIconSprite','ActSeq_Mechanics_SwapWeapon','ActionAnimation','ShowPortraitsBorderStyle','randomInt','ogIYn','PerformAction','PostApply%1JS','addAutoBattleCommands','createBattleField','length','alive\x20friends\x20not\x20target','setupRgbSplitImpactFilter','resizeWindowXPStyle','applyGuard','WaitCount2','SJBic','JWQbM','okButtonText','awbfN','udREq','skewDuration','drawTextEx','isPhysical','canAddSkillCommand','damageOffsetX','battleCorePreBattleCommonEvent','floor','_back1Sprite','Game_Battler_regenerateAll','resetFontSettings','hPGyX','AdjustRect','displayChangedBuffs','version','HZvJE','opacityStart','CSdCX','_interpreter','BattleManager_makeActionOrders','inputtingAction','LlHCU','skillItemWindowRectMiddle','IxCgq','TAqjb','getItemDamageAmountLabelOriginal','yvTVV','Game_Battler_performEvasion','battleStatusWindowAnimationContainer','VisuMZ_1_ElementStatusCore','clone','setFrame','_logWindow','makeAutoBattleActions','ShowCosts','snapForBackground','weaponImageId','_flipScaleX','spell','_battleField','updateStateSpriteBattleCore','Sprite_Battler_damageOffsetX','createDigits','ActSeq_Impact_MotionTrailRemove','LfuLj','helpWindowRectBorderStyle','displayType','pages','canUse','ActSeq_Mechanics_Multipliers','onEncounter','_emptyBitmap','front\x20base','isRightInputMode','MVQVp','Window_ActorCommand_setup','XZfRO','adjustFlippedBattlefield','alive\x20opponents','lZFpH','AaznW','zglPv','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','applyForcedGameTroopSettingsBattleCore','Scene_Battle_helpWindowRect','BattleDefeatJS','BattleManager_onEncounter','Interrupt','isAnyoneJumping','registerDefeatedEnemy','SpcyY','ActSeq_Camera_FocusTarget','animationNextDelay','_cursorSprite','MaxLines','CommandWidth','removedBuffs','max','Armor-%1-%2','_angleEasing','popupDamage','initMembersBattleCore','isChangingOpacity','command3011','ActSeq_Mechanics_StbRemoveExcessActions','ALL\x20SKILLS','ZRJyK','_regionBattleback2','applyVariance','_wtypeIDs','tDuyo','performActionMotions','cuKjO','alive\x20friends','battleMove','XPActorCommandLines','stateMotionIndex','Game_Actor_makeActionList','zUSkm','onBattleStartBattleCore','escape','_inputting','Bqtzg','drawItemStyleIcon','createMiss','sdYOi','DtSQD','drawGauge','cYayg','raOGU','ActSeq_Impact_MotionBlurScreen','ActionEnd','YoLfj','WFCID','canAttack','uVDpW','584967LLkspT','findTargetSprite','RIRgh','JqNgJ','udeAd','ElementStatusCore','Index','ActSeq_Movement_MoveToTarget','PostApplyAsTargetJS','RXZdz','traitSet','gaugeX','State-%1-%2','ActSeq_Set_TargetActionSet','isBattleSys','2736207JfIHOs','gainHalfActionsPTB','loadBitmap','_weaponSprite','startJump','DistanceY','ARRAYSTR','yAQHD','COMBAT\x20LOG','getSkillTypes','_distortionSprite','JS\x20%1END\x20TURN','_item','Defeat','ActSeq_Movement_Float','becomeSTBExploited','aliveMembers','onSkewEnd','isItemCommandEnabled','updateSkew','visualHpGauge','enemyNames','wXOtk','Window_ActorCommand_initialize','AS\x20USER','isFrameVisible','CUhlD','Wagtp','EscapeSuccessJS','Window_BattleLog_refresh','statusWindowRectBorderStyle','battleCommands','commandNameWindowDrawBackground','BURyv','nbZcH','Game_Action_clear','finishActorInput','KxOSW','remove','AtsYG','Game_Battler_startTpbTurn','setBackgroundType','ReflectAnimation','displayCounter','Game_Battler_clearMotion','clearOnceParallelInterpreters','Amp','canBattlerMove','displayItemMessage','_cache','VisuMZ_4_BreakShields','isTpbCharged','kXFKw','battleCommandIcon','ParseActorNotetags','applyData','itemEffectAddNormalState','moveToStartPositionBattleCore','ATbhV','addOnceParallelInterpreter','WuGRG','tRwBs','ybydo','ActSeq_Movement_BattleStep','placeActorName','xQbzI','bottom','criticalHitRate','min','VisuMZ_2_BattleSystemPTB','updateVisibility','ActSeq_Projectile_Animation','57lhLsvz','FNIjN','Sprite_Enemy_updateBossCollapse','toLowerCase','updateRefresh','okTargetSelectionVisibility','CLAQB','message1','svBattlerName','ForceRandom','name','ActionCenteredName','actionBattleCoreJS','createAutoBattleWindow','LSchM','_colorType','flashDuration','applyAngleChange','checkCacheKey','ActSeq_Impact_ShockwaveEachTargets','damageStyle','createCancelButton','RegExp','ActSeq_Angle_Reset','UdVEY','_armorPenetration','isFloating','FlinchDistanceX','gVQtw','vMGWL','UjXAK','setup','_list','VisuMZ_2_BattleSystemATB','getBattlePortraitFilename','ARfHt','UdVEt','updateGrow','evade','Window_BattleLog_performSubstitute','ActSeq_Movement_MoveToPoint','PreApplyAsTargetJS','invokeAction','isStateResist','CriticalDuration','onSelectAction','onMoveEnd','createHelpWindow','item','tpbActorSwitchConditionsMet','Radius','addBattleCoreAutoBattleStyleCommand','MotionType','clearFreezeMotionForWeapons','Window_BattleLog_performRecovery','_borderPortraitTargetX','JS\x20%1APPLY\x20%2','isDuringNonLoopingMotion','redraw','EZEyb','ActSeq_Motion_RefreshMotion','AddHpGaugeOption','Sprite_Enemy_initVisibility','jkUYq','sRzmV','victory','_enemyNameContainer','damage','hvjjM','nameY','displaySubstitute','isMeleeSingleTargetAction','createBattleFieldContainer','_defeatedEnemies','Sprite_Enemy_setHue','ActSeq_Weapon_NextActiveWeapon','CastMagical'];_0x5edb=function(){return _0x410554;};return _0x5edb();}function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x4ab18a(0x49d)]=Object[_0x4ab18a(0x74c)](Sprite_Gauge[_0x4ab18a(0x49d)]),Sprite_HpGauge['prototype']['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(){const _0xd3b0d6=_0x4ab18a;Sprite_Gauge[_0xd3b0d6(0x49d)][_0xd3b0d6(0x9ed)][_0xd3b0d6(0x45b)](this);},Sprite_HpGauge[_0x4ab18a(0x49d)][_0x4ab18a(0x8a9)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x4ab18a(0x92f)]=function(){const _0x155d8f=_0x4ab18a;this[_0x155d8f(0x6db)][_0x155d8f(0x7e0)]();const _0x7fadff=this['currentValue']();if(!isNaN(_0x7fadff)){if(_0x155d8f(0x315)!==_0x155d8f(0x315))return _0x56144d[_0x155d8f(0x7d0)][_0x155d8f(0x378)](/<COMMAND ICON: (\d+)>/i)?_0x4db1b6(_0x558e37['$1']):_0x1f96fe[_0x155d8f(0xa49)];else this[_0x155d8f(0x895)]();}};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x4ab18a(0x49d)]=Object[_0x4ab18a(0x74c)](Sprite_Name[_0x4ab18a(0x49d)]),Sprite_EnemyName['prototype']['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(){const _0x6a2406=_0x4ab18a;Sprite_Name[_0x6a2406(0x49d)]['initialize']['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x78b)]=function(){const _0x1794af=_0x4ab18a;Sprite_Name[_0x1794af(0x49d)][_0x1794af(0x78b)][_0x1794af(0x45b)](this),this[_0x1794af(0x43a)]=0x0,this[_0x1794af(0x4c2)]=null,this['anchor']['x']=0.5,this[_0x1794af(0x8a)]['y']=0x0;},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x99b)]=function(){const _0x1a2097=_0x4ab18a;VisuMZ[_0x1a2097(0x94c)][_0x1a2097(0x3f5)][_0x1a2097(0x582)]['NameAttachStateIcon']&&(this[_0x1a2097(0x816)]=new Sprite_StateIcon(),this['addChild'](this[_0x1a2097(0x816)]));},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x350)]=function(){const _0x1222fd=_0x4ab18a;return Graphics[_0x1222fd(0x958)];},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x7ec)]=function(){const _0x2e04ef=_0x4ab18a;return this[_0x2e04ef(0xe0)]=this[_0x2e04ef(0xe0)]||Window_Base[_0x2e04ef(0x49d)][_0x2e04ef(0x6fe)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x5e6)]=function(){const _0x228c00=_0x4ab18a;return VisuMZ[_0x228c00(0x94c)][_0x228c00(0x3f5)][_0x228c00(0x582)][_0x228c00(0x783)]||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x222)]=function(_0x2f98b7){const _0x3cfb77=_0x4ab18a;this[_0x3cfb77(0x4c2)]=_0x2f98b7;},Sprite_EnemyName['prototype'][_0x4ab18a(0x43d)]=function(){const _0x5eae91=_0x4ab18a;Sprite_Name['prototype'][_0x5eae91(0x43d)][_0x5eae91(0x45b)](this),this[_0x5eae91(0x189)](),this[_0x5eae91(0x1ec)](),this[_0x5eae91(0x3ce)](),this[_0x5eae91(0x6f8)]();},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x92f)]=function(){const _0x2e6154=_0x4ab18a;this[_0x2e6154(0x333)]=undefined;const _0x2d9c67=this['name'](),_0x2fb05d=this[_0x2e6154(0x350)](),_0x278b38=Window_Base[_0x2e6154(0x49d)][_0x2e6154(0x6fe)]();this[_0x2e6154(0xab7)](),this[_0x2e6154(0x6db)]['clear'](),this['bitmap'][_0x2e6154(0x5f1)](_0x2d9c67,0x0,0x0,_0x2fb05d,_0x278b38,_0x2e6154(0x419));},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x189)]=function(){const _0xab7460=_0x4ab18a;if(!this[_0xab7460(0x4c2)])return;this[_0xab7460(0x69e)]!==this['_linkedSprite'][_0xab7460(0x69e)]&&(_0xab7460(0xaa5)!==_0xab7460(0xaa5)?this['_visualHpGauge_JustDied']=![]:this['setup'](this[_0xab7460(0x4c2)]['_battler']));},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x1ec)]=function(){const _0x289f49=_0x4ab18a;if(!this['_linkedSprite'])return;this[_0x289f49(0xe0)]=this[_0x289f49(0xe0)]||Window_Base[_0x289f49(0x49d)][_0x289f49(0x6fe)](),this['x']=this['_linkedSprite'][_0x289f49(0x520)],this['y']=this[_0x289f49(0x4c2)][_0x289f49(0x5e7)]-this['_lineHeight']*0.5;const _0x1766ad=VisuMZ['BattleCore'][_0x289f49(0x3f5)][_0x289f49(0x582)];this['x']+=_0x1766ad[_0x289f49(0x59c)]||0x0,this['y']+=_0x1766ad[_0x289f49(0x320)]||0x0;},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x3ce)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x4ab18a(0x49d)]['updateStateIconSprite']=function(){const _0x36fae8=_0x4ab18a;if(!this[_0x36fae8(0x816)])return;if(this[_0x36fae8(0x69e)]!==this[_0x36fae8(0x816)]['_battler']){if(_0x36fae8(0x975)!=='vVvVQ')this[_0x36fae8(0x816)]['setup'](this[_0x36fae8(0x69e)]);else return _0x5a6879(_0x22f24e['$1']);}const _0x156547=this[_0x36fae8(0x9f0)]();this[_0x36fae8(0xe0)]=this['_lineHeight']||Window_Base['prototype'][_0x36fae8(0x6fe)](),this[_0x36fae8(0x816)]['x']=Math[_0x36fae8(0x1e2)]((_0x156547+ImageManager[_0x36fae8(0x718)])/0x2)+0x8,this[_0x36fae8(0x816)]['y']=this['_lineHeight']/0x2;const _0x93de28=VisuMZ[_0x36fae8(0x94c)][_0x36fae8(0x3f5)][_0x36fae8(0x582)];this[_0x36fae8(0x816)]['x']+=_0x93de28['AttachStateOffsetX']||0x0,this[_0x36fae8(0x816)]['y']+=_0x93de28[_0x36fae8(0x1a4)]||0x0;},Sprite_EnemyName[_0x4ab18a(0x49d)]['updateOpacity']=function(){const _0x4224b1=_0x4ab18a,_0x4e13a8=this['visibilityState']();if(_0x4e13a8&&this[_0x4224b1(0x43a)]<0xff)this[_0x4224b1(0x43a)]+=0x10;else!_0x4e13a8&&this[_0x4224b1(0x43a)]>0x0&&(_0x4224b1(0xd2)!==_0x4224b1(0xd2)?(_0x29da2e[_0x4224b1(0x94c)][_0x4224b1(0x7c1)]['call'](this),this['attachSpritesToDistortionSprite']()):this[_0x4224b1(0x43a)]-=0x10);},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0xaa0)]=function(){const _0x131fe4=_0x4ab18a;if(this[_0x131fe4(0x7dd)]()){if('Ljrjv'==='WgMFQ'){if(_0xc75d74[_0x131fe4(0x5cc)]&&!_0x24e211['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return _0x4e8f22[_0x131fe4(0x94c)][_0x131fe4(0x88b)]['call'](this);;}}else return![];}else{if(!this[_0x131fe4(0x69e)])return![];else{if(this[_0x131fe4(0x69e)][_0x131fe4(0x9b4)]())return _0x131fe4(0x890)!==_0x131fe4(0xac1)?![]:_0x18f0a1[_0x131fe4(0x94c)][_0x131fe4(0x3f5)][_0x131fe4(0x965)][_0x131fe4(0x5ae)];else{if(!this[_0x131fe4(0x69e)][_0x131fe4(0x4d4)]()){if(_0x131fe4(0x2a2)===_0x131fe4(0x38e)){const _0x4f0b15=this[_0x131fe4(0x173)]();if(_0x4f0b15&&_0x1c9cd7)_0x4f0b15['stepForward']();return;}else return![];}else{if(this[_0x131fe4(0x74e)]())return!![];else{if(this[_0x131fe4(0x434)]())return!![];else{if(this[_0x131fe4(0x4c5)]()){if(_0x131fe4(0x96e)===_0x131fe4(0x96e))return!![];else _0x32835a*=_0x3ad63b[_0x131fe4(0xaa2)](_0x1269b7[_0x131fe4(0x9f7)]),_0x38a8a1*=this[_0x131fe4(0x481)](_0x42263c);}else{if(this[_0x131fe4(0x43a)]>0x0)return![];}}}}}}}},Sprite_EnemyName['prototype'][_0x4ab18a(0x7dd)]=function(){const _0x30ec79=_0x4ab18a;return VisuMZ[_0x30ec79(0x94c)]['Settings'][_0x30ec79(0x582)][_0x30ec79(0x51c)];},Sprite_EnemyName[_0x4ab18a(0x49d)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x434)]=function(){const _0x36be9a=_0x4ab18a;return VisuMZ['BattleCore'][_0x36be9a(0x3f5)][_0x36be9a(0x582)][_0x36be9a(0x9e9)];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x6a5e8e=_0x4ab18a;if(VisuMZ[_0x6a5e8e(0x94c)][_0x6a5e8e(0x3f5)][_0x6a5e8e(0x582)][_0x6a5e8e(0x4f6)]){if('LlHCU'!==_0x6a5e8e(0x83f))_0x254447[_0x6a5e8e(0x448)](_0x6a5e8e(0x2ad),_0x58993e);else return this[_0x6a5e8e(0x69e)][_0x6a5e8e(0x467)]();}else{if('KVnWX'!==_0x6a5e8e(0xadb))return SceneManager[_0x6a5e8e(0xa10)][_0x6a5e8e(0x465)]&&SceneManager[_0x6a5e8e(0xa10)][_0x6a5e8e(0x465)][_0x6a5e8e(0x190)]&&SceneManager[_0x6a5e8e(0xa10)][_0x6a5e8e(0x465)][_0x6a5e8e(0x1dd)][_0x6a5e8e(0xb2)](this['_battler']);else{if(this[_0x6a5e8e(0x617)]>0x0)this[_0x6a5e8e(0x617)]-=0x10;}}},Sprite_EnemyName['prototype'][_0x4ab18a(0x9f0)]=function(){const _0x118459=_0x4ab18a;if(!this[_0x118459(0x69e)])return 0x0;if(this[_0x118459(0x333)])return this[_0x118459(0x333)];const _0xf19a73=this[_0x118459(0x8ff)]();return this['setupFont'](),this['_cacheTextWidth']=this[_0x118459(0x6db)]['measureTextWidth'](_0xf19a73)||0x1,this[_0x118459(0x333)];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0xd3)]=Sprite_Battleback['prototype'][_0x4ab18a(0x9cf)],Sprite_Battleback[_0x4ab18a(0x49d)][_0x4ab18a(0x9cf)]=function(){const _0x1d3046=_0x4ab18a,_0x4968b0=VisuMZ['BattleCore'][_0x1d3046(0x3f5)][_0x1d3046(0x67e)];if(!_0x4968b0)return VisuMZ[_0x1d3046(0x94c)]['Sprite_Battleback_adjustPosition'][_0x1d3046(0x45b)](this);const _0x4784e7=String(_0x4968b0[_0x1d3046(0x672)])||'MZ';switch(_0x4784e7){case'MZ':VisuMZ['BattleCore'][_0x1d3046(0xd3)][_0x1d3046(0x45b)](this);break;case'1:1':this['adjustPosition_1for1']();break;case _0x1d3046(0x2ca):this[_0x1d3046(0x609)]();break;case _0x1d3046(0x282):this[_0x1d3046(0x337)]();break;case _0x1d3046(0x583):this[_0x1d3046(0xaa1)]();break;}},Sprite_Battleback[_0x4ab18a(0x49d)][_0x4ab18a(0x3c1)]=function(){const _0x5762d1=_0x4ab18a;this['width']=Graphics[_0x5762d1(0x999)],this[_0x5762d1(0x428)]=Graphics[_0x5762d1(0x428)];const _0x5eab22=0x1;this['scale']['x']=_0x5eab22,this['scale']['y']=_0x5eab22,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x4ab18a(0x609)]=function(){const _0x2d701c=_0x4ab18a;this[_0x2d701c(0x999)]=Graphics[_0x2d701c(0x999)],this[_0x2d701c(0x428)]=Graphics[_0x2d701c(0x428)];const _0x5f5745=this[_0x2d701c(0x999)]/this['bitmap']['width'],_0x4ea011=this[_0x2d701c(0x428)]/this['bitmap']['height'],_0x2271b4=Math['max'](_0x5f5745,_0x4ea011);this['scale']['x']=_0x2271b4,this[_0x2d701c(0x443)]['y']=_0x2271b4,this['x']=(Graphics[_0x2d701c(0x999)]-this['width'])/0x2,this['y']=Graphics[_0x2d701c(0x428)]-this[_0x2d701c(0x428)];},Sprite_Battleback['prototype'][_0x4ab18a(0x337)]=function(){const _0x4b465a=_0x4ab18a;this[_0x4b465a(0x999)]=Graphics['width'],this[_0x4b465a(0x428)]=Graphics[_0x4b465a(0x428)];const _0x11f538=Math[_0x4b465a(0x8f1)](0x1,this['width']/this[_0x4b465a(0x6db)][_0x4b465a(0x999)]),_0x145d22=Math[_0x4b465a(0x8f1)](0x1,this['height']/this[_0x4b465a(0x6db)]['height']),_0x2202c2=Math[_0x4b465a(0x877)](_0x11f538,_0x145d22);this[_0x4b465a(0x443)]['x']=_0x2202c2,this[_0x4b465a(0x443)]['y']=_0x2202c2,this['x']=(Graphics[_0x4b465a(0x999)]-this[_0x4b465a(0x999)])/0x2,this['y']=Graphics[_0x4b465a(0x428)]-this[_0x4b465a(0x428)];},Sprite_Battleback[_0x4ab18a(0x49d)]['adjustPosition_ScaleUp']=function(){const _0x28bb98=_0x4ab18a;this[_0x28bb98(0x999)]=Graphics['width'],this[_0x28bb98(0x428)]=Graphics[_0x28bb98(0x428)];const _0x552064=Math[_0x28bb98(0x877)](0x1,this['width']/this[_0x28bb98(0x6db)][_0x28bb98(0x999)]),_0x1df767=Math['max'](0x1,this[_0x28bb98(0x428)]/this[_0x28bb98(0x6db)][_0x28bb98(0x428)]),_0xb9955f=Math[_0x28bb98(0x877)](_0x552064,_0x1df767);this[_0x28bb98(0x443)]['x']=_0xb9955f,this[_0x28bb98(0x443)]['y']=_0xb9955f,this['x']=(Graphics['width']-this[_0x28bb98(0x999)])/0x2,this['y']=Graphics[_0x28bb98(0x428)]-this[_0x28bb98(0x428)];},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x7e7)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x1bc)]=function(){return 0x0;},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x872)]=function(){return 0x0;},VisuMZ['BattleCore'][_0x4ab18a(0x3d0)]=Spriteset_Battle['prototype'][_0x4ab18a(0x53c)],Spriteset_Battle['prototype']['createLowerLayer']=function(){const _0x15b921=_0x4ab18a;VisuMZ[_0x15b921(0x94c)]['Spriteset_Battle_createLowerLayer'][_0x15b921(0x45b)](this),this['createWeather'](),this['createUIContainer'](),this[_0x15b921(0x26d)]();},VisuMZ[_0x4ab18a(0x94c)]['Spriteset_Battle_update']=Spriteset_Battle['prototype']['update'],Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)]=function(){const _0x2427c2=_0x4ab18a;VisuMZ[_0x2427c2(0x94c)][_0x2427c2(0x6b9)][_0x2427c2(0x45b)](this),this[_0x2427c2(0x4e9)]();},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x5c6)]=function(){const _0x60beb6=_0x4ab18a;this['_weather']=new Weather(),this['_battleField'][_0x60beb6(0x19a)](this[_0x60beb6(0x79e)]);},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x4e9)]=function(){const _0x27a171=_0x4ab18a;this[_0x27a171(0x79e)][_0x27a171(0x626)]=$gameScreen[_0x27a171(0x54b)](),this['_weather'][_0x27a171(0x54d)]=$gameScreen[_0x27a171(0xc7)]();},Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x688)]=function(_0x4bb73e){const _0x3ca1a2=_0x4ab18a;$gameScreen[_0x3ca1a2(0x699)](_0x4bb73e[0x0],_0x4bb73e[0x1],_0x4bb73e[0x2]);if(_0x4bb73e[0x3])this['wait'](_0x4bb73e[0x2]);return!![];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x9e1)]=Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x125)],Game_Interpreter[_0x4ab18a(0x49d)][_0x4ab18a(0x125)]=function(_0x546ed9){const _0x59ecd3=_0x4ab18a;if(SceneManager[_0x59ecd3(0xae)]()){if(_0x59ecd3(0x8d4)===_0x59ecd3(0x3e2))_0x349091[_0x5bda4e]=0x1,_0x33cc03++;else return SceneManager[_0x59ecd3(0xa10)][_0x59ecd3(0x6f4)][_0x59ecd3(0x1db)](_0x546ed9[0x0],_0x546ed9[0x1]),!![];}else{if('hkHzm'!==_0x59ecd3(0x25d))_0x6a361a[_0x59ecd3(0x35a)](_0x1f7949[_0x59ecd3(0x7e4)]);else return VisuMZ[_0x59ecd3(0x94c)][_0x59ecd3(0x9e1)]['call'](this,_0x546ed9);}},Spriteset_Battle[_0x4ab18a(0x49d)]['updateBattlebackBitmap']=function(_0x39ae12,_0x538bd5){const _0x208434=_0x4ab18a;_0x39ae12[_0x208434(0x6db)]=_0x538bd5;},Spriteset_Battle[_0x4ab18a(0x49d)]['changeBattlebacks']=function(_0x3081e9,_0x25cff7){const _0x3cb978=_0x4ab18a;_0x3081e9=_0x3081e9||'',_0x25cff7=_0x25cff7||'';_0x3081e9===''&&_0x25cff7===''&&(_0x3081e9=this[_0x3cb978(0x832)][_0x3cb978(0x43b)](),_0x25cff7=this[_0x3cb978(0x98f)][_0x3cb978(0x191)]());const _0x88f8b1=ImageManager[_0x3cb978(0x628)](_0x3081e9),_0xa98d4d=ImageManager[_0x3cb978(0x36e)](_0x25cff7);_0x88f8b1[_0x3cb978(0x65c)](this['updateBattlebackBitmap1'][_0x3cb978(0xae2)](this,this[_0x3cb978(0x832)],this[_0x3cb978(0x98f)],_0x88f8b1,_0xa98d4d));},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x751)]=function(_0x56186f,_0x4160cf,_0x28f1de,_0x48ca59){const _0x56ba35=_0x4ab18a;_0x48ca59['addLoadListener'](this[_0x56ba35(0x28e)][_0x56ba35(0xae2)](this,_0x56186f,_0x4160cf,_0x28f1de,_0x48ca59));},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x28e)]=function(_0xc8f321,_0x148a08,_0x46202c,_0x3d2ac7){const _0xc5245b=_0x4ab18a;_0xc8f321[_0xc5245b(0x6db)]=_0x46202c,_0x148a08[_0xc5245b(0x6db)]=_0x3d2ac7,_0xc8f321['adjustPosition'](),_0x148a08[_0xc5245b(0x9cf)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x9d7)]=Spriteset_Battle['prototype']['createBattleField'],Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x81f)]=function(){VisuMZ['BattleCore']['Spriteset_Battle_createBattleField']['call'](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x7c4)]=function(){const _0x1d7e26=_0x4ab18a;this[_0x1d7e26(0x93d)](),this['createAnimationContainer'](),this[_0x1d7e26(0x6f2)](),this[_0x1d7e26(0x863)]();},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x93d)]=function(){const _0x1dbdae=_0x4ab18a;this['_battlerContainer']=new Sprite(),this[_0x1dbdae(0x851)][_0x1dbdae(0x19a)](this[_0x1dbdae(0x5ff)]);},Spriteset_Battle[_0x4ab18a(0x49d)]['createAnimationContainer']=function(){const _0x2b5410=_0x4ab18a;this['_animationContainer']=new Sprite(),this[_0x2b5410(0x851)]['addChild'](this[_0x2b5410(0x268)]);},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x6f2)]=function(){const _0x4bdb02=_0x4ab18a;this[_0x4bdb02(0x2a5)]=new Sprite(),this['_damageContainer']['x']=this[_0x4bdb02(0x851)]['x'],this['_damageContainer']['y']=this['_battleField']['y'],this[_0x4bdb02(0x19a)](this['_damageContainer']);},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x863)]=function(){const _0x4d7329=_0x4ab18a;if(!this['isFlipped']())return;this[_0x4d7329(0x5ff)]['scale']['x']=-0x1,this[_0x4d7329(0x5ff)]['x']=this[_0x4d7329(0x851)]['width'],this[_0x4d7329(0x268)][_0x4d7329(0x443)]['x']=-0x1,this['_animationContainer']['x']=this['_battleField'][_0x4d7329(0x999)],this['_damageContainer'][_0x4d7329(0x443)]['x']=-0x1,this['_damageContainer']['x']=this['_battleField']['x']+this['_battleField']['width'];},Spriteset_Battle['prototype']['createEnemies']=function(){const _0x38c114=_0x4ab18a;Imported[_0x38c114(0x1fc)]&&this[_0x38c114(0x4f8)]()&&this[_0x38c114(0x455)]();const _0x4dde22=$gameTroop[_0x38c114(0x533)](),_0x4ea82a=[];for(const _0x2cb04d of _0x4dde22){_0x4ea82a[_0x38c114(0x448)](new Sprite_Enemy(_0x2cb04d));}_0x4ea82a[_0x38c114(0x592)](this[_0x38c114(0x383)][_0x38c114(0xae2)](this));for(const _0x144adf of _0x4ea82a){this[_0x38c114(0x5ff)]['addChild'](_0x144adf);}this['_enemySprites']=_0x4ea82a;},Spriteset_Battle[_0x4ab18a(0x49d)]['createActors']=function(){const _0x6dd59b=_0x4ab18a;this['_actorSprites']=[];for(let _0x25583a=0x0;_0x25583a<$gameParty[_0x6dd59b(0x6c6)]();_0x25583a++){const _0x49cd06=$gameParty[_0x6dd59b(0x5ec)]()[_0x25583a],_0x2b141a=new Sprite_Actor();_0x2b141a[_0x6dd59b(0x8e6)](_0x49cd06),_0x2b141a[_0x6dd59b(0x669)](_0x49cd06),_0x2b141a[_0x6dd59b(0x43d)](),this[_0x6dd59b(0x555)][_0x6dd59b(0x448)](_0x2b141a),this['_battlerContainer'][_0x6dd59b(0x19a)](_0x2b141a);}},Spriteset_Battle[_0x4ab18a(0x49d)]['createAnimationSprite']=function(_0x5d066b,_0x2a7f62,_0x55c4bb,_0x273f7f){const _0x531ebd=_0x4ab18a,_0x1ba92c=this[_0x531ebd(0x9e6)](_0x2a7f62),_0x4b0d1f=new(_0x1ba92c?Sprite_AnimationMV:Sprite_Animation)(),_0x51e2ac=this['makeTargetSprites'](_0x5d066b);this[_0x531ebd(0x6f7)](_0x5d066b[0x0])&&(_0x55c4bb=!_0x55c4bb),_0x4b0d1f[_0x531ebd(0x7aa)]=_0x5d066b,_0x4b0d1f[_0x531ebd(0x914)](_0x51e2ac,_0x2a7f62,_0x55c4bb,_0x273f7f),this[_0x531ebd(0x97e)](_0x4b0d1f);},Spriteset_Battle['prototype'][_0x4ab18a(0x97e)]=function(_0x41b744){const _0x3625da=_0x4ab18a;this[_0x3625da(0xaee)](_0x41b744)?this[_0x3625da(0x846)]()[_0x3625da(0x19a)](_0x41b744):this[_0x3625da(0x268)][_0x3625da(0x19a)](_0x41b744),this['_animationSprites']['push'](_0x41b744);},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0xaee)]=function(_0x2dfa76){const _0x4d4563=_0x4ab18a;if(!_0x2dfa76)return![];if(!_0x2dfa76['_animation'])return![];if(_0x2dfa76['_animation'][_0x4d4563(0x858)]!==0x0)return![];if(!_0x2dfa76['targetObjects'][0x0])return![];if(_0x2dfa76[_0x4d4563(0x7aa)][0x0][_0x4d4563(0x526)]&&!_0x2dfa76['targetObjects'][0x0][_0x4d4563(0x526)]())return![];if($gameSystem[_0x4d4563(0x332)]())return![];if(!this[_0x4d4563(0x846)]())return![];const _0x542329=Window_BattleStatus['prototype'][_0x4d4563(0xaf0)]();return['portrait','xp'][_0x4d4563(0x2c8)](_0x542329);},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x846)]=function(){const _0x12fb87=_0x4ab18a;if(!SceneManager[_0x12fb87(0xa10)])return null;if(!SceneManager[_0x12fb87(0xa10)][_0x12fb87(0xc3)])return null;if(!SceneManager[_0x12fb87(0xa10)][_0x12fb87(0xc3)][_0x12fb87(0x14e)])return null;return SceneManager[_0x12fb87(0xa10)][_0x12fb87(0xc3)][_0x12fb87(0x14e)];},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x45d)]=function(_0x5ca26e){const _0x2808e9=_0x4ab18a;this[_0x2808e9(0x39e)](_0x5ca26e);for(const _0x55ca8e of _0x5ca26e[_0x2808e9(0x7aa)]){if('MeNnM'!==_0x2808e9(0x9dc)){if(this[_0x2808e9(0x712)][_0x2808e9(0x29c)])this['_pattern']=(this[_0x2808e9(0x687)]+0x1)%0x4;else this['_pattern']<0x2?this[_0x2808e9(0x687)]++:this[_0x2808e9(0x1dc)]();this[_0x2808e9(0x32d)]=0x0;}else{if(_0x55ca8e[_0x2808e9(0x144)]){if('ETVhb'!=='HThgd')_0x55ca8e[_0x2808e9(0x144)]();else{if(this['_battleLayoutStyle'])return this[_0x2808e9(0x4be)];return this[_0x2808e9(0x4be)]=_0x4b1268[_0x2808e9(0xa10)]['battleLayoutStyle'](),this[_0x2808e9(0x4be)];}}}}_0x5ca26e[_0x2808e9(0x3c0)]();},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x39e)]=function(_0xbba3f6){const _0x4cadc1=_0x4ab18a;this[_0x4cadc1(0x75b)][_0x4cadc1(0x8d3)](_0xbba3f6),this[_0x4cadc1(0xaee)](_0xbba3f6)?_0x4cadc1(0x118)===_0x4cadc1(0x860)?(_0x3ba47a[_0x4cadc1(0x49d)][_0x4cadc1(0x43d)][_0x4cadc1(0x45b)](this),this[_0x4cadc1(0x189)](),this[_0x4cadc1(0x1ec)](),this[_0x4cadc1(0x3ce)](),this[_0x4cadc1(0x6f8)]()):this[_0x4cadc1(0x846)]()[_0x4cadc1(0xac7)](_0xbba3f6):'UjXAK'===_0x4cadc1(0x913)?this['_animationContainer'][_0x4cadc1(0xac7)](_0xbba3f6):(this[_0x4cadc1(0x781)]=this[_0x4cadc1(0x781)]??0x1,this[_0x4cadc1(0x2e8)]=this[_0x4cadc1(0x2e8)]??0x1,this[_0x4cadc1(0x422)][_0x4cadc1(0x443)]['x']=this['_distortionSprite'][_0x4cadc1(0x443)]['x']*this[_0x4cadc1(0x781)],this[_0x4cadc1(0x422)][_0x4cadc1(0x443)]['y']=this['_distortionSprite'][_0x4cadc1(0x443)]['y']*this[_0x4cadc1(0x2e8)]);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x4fa)]=Spriteset_Battle['prototype'][_0x4ab18a(0x1f9)],Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x1f9)]=function(){const _0x1c8283=_0x4ab18a;VisuMZ['BattleCore'][_0x1c8283(0x4fa)]['call'](this),this[_0x1c8283(0x224)]();},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x224)]=function(){const _0x1ab236=_0x4ab18a;this[_0x1ab236(0x5ff)]['children'][_0x1ab236(0x592)](this['compareBattlerSprites'][_0x1ab236(0xae2)](this)),this[_0x1ab236(0x790)]();},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x425)]=function(_0x22717f,_0x1cd340){const _0x44ef4e=_0x4ab18a;if(VisuMZ['BattleCore']['Settings'][_0x44ef4e(0x56a)][_0x44ef4e(0xe1)]){if(_0x22717f[_0x44ef4e(0x69e)]&&_0x1cd340['_battler']){if(_0x44ef4e(0x1eb)!=='VkdMW')this[_0x44ef4e(0x579)]['x']=0x0,this[_0x44ef4e(0x92c)]=_0xf5f5a6['ceil'](_0x3040f5[_0x44ef4e(0x999)]/0x2);else{if(_0x22717f[_0x44ef4e(0x69e)][_0x44ef4e(0x526)]()&&_0x1cd340[_0x44ef4e(0x69e)][_0x44ef4e(0x6dd)]()){if(_0x44ef4e(0xadf)!==_0x44ef4e(0x896))return 0x1;else this[_0x44ef4e(0x90)]=0x0,this[_0x44ef4e(0x736)]=0x0;}else{if(_0x1cd340[_0x44ef4e(0x69e)][_0x44ef4e(0x526)]()&&_0x22717f[_0x44ef4e(0x69e)]['isEnemy']())return-0x1;}}}}return _0x22717f[_0x44ef4e(0x5e7)]!==_0x1cd340[_0x44ef4e(0x5e7)]?_0x22717f[_0x44ef4e(0x5e7)]-_0x1cd340['_baseY']:_0x1cd340[_0x44ef4e(0x2ea)]-_0x22717f['spriteId'];},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x790)]=function(){const _0x15d7c1=_0x4ab18a;if(!VisuMZ[_0x15d7c1(0x94c)][_0x15d7c1(0x3f5)][_0x15d7c1(0x56a)][_0x15d7c1(0x55d)])return;const _0x2dd08=BattleManager['_subject'];if(_0x2dd08){if(_0x2dd08['isActor']()&&!$gameSystem[_0x15d7c1(0x332)]())return;const _0xb3ef59=_0x2dd08[_0x15d7c1(0x173)]();if(_0xb3ef59&&_0x2dd08[_0x15d7c1(0x526)]())this[_0x15d7c1(0x5ff)][_0x15d7c1(0x19a)](_0xb3ef59);}},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0xabc)]=function(){const _0x1b0ab3=_0x4ab18a;for(const _0x56fca4 of $gameParty[_0x1b0ab3(0x8bd)]()){if(_0x1b0ab3(0x1d6)===_0x1b0ab3(0x1d6)){if(!_0x56fca4)continue;if(!_0x56fca4['battler']())continue;_0x56fca4[_0x1b0ab3(0x173)]()['forceEscapeSprite']=!![],_0x56fca4['battler']()[_0x1b0ab3(0x71b)]();}else this[_0x1b0ab3(0x4f5)]=this[_0x1b0ab3(0x436)],this[_0x1b0ab3(0x1f5)]=this[_0x1b0ab3(0xcd)];}},Spriteset_Battle['prototype']['createUIContainer']=function(){const _0x56a816=_0x4ab18a;this[_0x56a816(0x541)]=new Sprite(),this[_0x56a816(0x851)][_0x56a816(0x19a)](this['_uiContainer']);},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x26d)]=function(){const _0x16824b=_0x4ab18a;if(VisuMZ[_0x16824b(0x94c)][_0x16824b(0x3f5)][_0x16824b(0x582)][_0x16824b(0x346)])return;this[_0x16824b(0x937)]=new Sprite(),this[_0x16824b(0x541)][_0x16824b(0x19a)](this[_0x16824b(0x937)]);for(const _0x5ab80c of this[_0x16824b(0xae6)]){const _0x424f23=new Sprite_EnemyName();this[_0x16824b(0x937)][_0x16824b(0x19a)](_0x424f23),_0x424f23[_0x16824b(0x222)](_0x5ab80c);}},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x433)]=function(){return![];},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x1cf)]=function(){const _0x4d6dff=_0x4ab18a;return this['battlerSprites']()['some'](_0x430472=>_0x430472[_0x4d6dff(0x90f)]());},Spriteset_Battle['prototype'][_0x4ab18a(0x86e)]=function(){const _0x54e8cb=_0x4ab18a;return this['battlerSprites']()['some'](_0x476be0=>_0x476be0[_0x54e8cb(0xae1)]());},Spriteset_Battle[_0x4ab18a(0x49d)]['isAnyoneGrowing']=function(){const _0x51dd6f=_0x4ab18a;return this[_0x51dd6f(0x742)]()[_0x51dd6f(0x7ae)](_0x3feb6b=>_0x3feb6b[_0x51dd6f(0x59f)]());},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x68c)]=function(){const _0x53714e=_0x4ab18a;return this[_0x53714e(0x742)]()[_0x53714e(0x7ae)](_0x4bd4a4=>_0x4bd4a4[_0x53714e(0x352)]());},Spriteset_Battle[_0x4ab18a(0x49d)][_0x4ab18a(0x124)]=function(){const _0x48d147=_0x4ab18a;return this[_0x48d147(0x742)]()[_0x48d147(0x7ae)](_0x3c8f32=>_0x3c8f32[_0x48d147(0x2d3)]());},Spriteset_Battle['prototype'][_0x4ab18a(0x987)]=function(){const _0x5ba604=_0x4ab18a;return this['battlerSprites']()[_0x5ba604(0x7ae)](_0x41fd3f=>_0x41fd3f[_0x5ba604(0x87c)]());},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x4a7)]=Window_ItemList[_0x4ab18a(0x49d)][_0x4ab18a(0x5b3)],Window_ItemList[_0x4ab18a(0x49d)][_0x4ab18a(0x5b3)]=function(){const _0x511b3b=_0x4ab18a;return SceneManager[_0x511b3b(0xae)]()?_0x511b3b(0x1e4)!==_0x511b3b(0x228)?SceneManager['_scene'][_0x511b3b(0xaf0)]()===_0x511b3b(0x1a7)?VisuMZ[_0x511b3b(0x94c)][_0x511b3b(0x3f5)][_0x511b3b(0x377)][_0x511b3b(0xab)]:VisuMZ[_0x511b3b(0x94c)][_0x511b3b(0x3f5)][_0x511b3b(0x377)][_0x511b3b(0x573)]:this['isBattleCoreTargetScope']()&&!this[_0x511b3b(0x34b)]()?this[_0x511b3b(0x5c3)]():_0x338f8c[_0x511b3b(0x94c)][_0x511b3b(0x507)][_0x511b3b(0x45b)](this):VisuMZ['BattleCore'][_0x511b3b(0x4a7)][_0x511b3b(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x944)]=Window_SkillList['prototype']['maxCols'],Window_SkillList[_0x4ab18a(0x49d)][_0x4ab18a(0x5b3)]=function(){const _0x4e1de8=_0x4ab18a;return SceneManager[_0x4e1de8(0xae)]()?SceneManager[_0x4e1de8(0xa10)][_0x4e1de8(0xaf0)]()==='border'?VisuMZ[_0x4e1de8(0x94c)][_0x4e1de8(0x3f5)][_0x4e1de8(0x377)][_0x4e1de8(0xab)]:VisuMZ[_0x4e1de8(0x94c)][_0x4e1de8(0x3f5)][_0x4e1de8(0x377)][_0x4e1de8(0x573)]:VisuMZ[_0x4e1de8(0x94c)]['Window_SkillList_maxCols'][_0x4e1de8(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x1e1)]=Window_Options[_0x4ab18a(0x49d)][_0x4ab18a(0x5a2)],Window_Options[_0x4ab18a(0x49d)][_0x4ab18a(0x5a2)]=function(){const _0x2638b0=_0x4ab18a;VisuMZ[_0x2638b0(0x94c)][_0x2638b0(0x1e1)][_0x2638b0(0x45b)](this),this[_0x2638b0(0x81e)](),this['addShowHpGaugeCommand']();},Window_Options[_0x4ab18a(0x49d)][_0x4ab18a(0x81e)]=function(){const _0x3af5e7=_0x4ab18a;if(VisuMZ['BattleCore']['Settings'][_0x3af5e7(0x581)][_0x3af5e7(0x18f)]){if(_0x3af5e7(0x2d1)==='qlFKc')return![];else this[_0x3af5e7(0x3bf)](),this[_0x3af5e7(0x928)]();}},Window_Options[_0x4ab18a(0x49d)][_0x4ab18a(0xbc)]=function(){const _0x42f127=_0x4ab18a;if(!VisuMZ[_0x42f127(0x94c)][_0x42f127(0x3f5)][_0x42f127(0x7bb)][_0x42f127(0x932)])return;const _0x37c317=TextManager[_0x42f127(0x8c1)],_0x43bfc1=_0x42f127(0x8c1);this['addCommand'](_0x37c317,_0x43bfc1);},Window_Options['prototype']['addBattleCoreAutoBattleStartupCommand']=function(){const _0x4865f2=_0x4ab18a,_0x29bfe4=TextManager['autoBattleStart'],_0x4cce16=_0x4865f2(0xaae);this['addCommand'](_0x29bfe4,_0x4cce16);},Window_Options['prototype']['addBattleCoreAutoBattleStyleCommand']=function(){const _0x52d909=_0x4ab18a,_0x45459c=TextManager[_0x52d909(0x183)],_0x4c6d65=_0x52d909(0xa75);this['addCommand'](_0x45459c,_0x4c6d65);},VisuMZ['BattleCore']['Window_Options_statusText']=Window_Options['prototype'][_0x4ab18a(0x4bb)],Window_Options[_0x4ab18a(0x49d)][_0x4ab18a(0x4bb)]=function(_0x106f78){const _0x65991d=_0x4ab18a,_0x2b9230=this[_0x65991d(0xa8b)](_0x106f78);if(_0x2b9230===_0x65991d(0xa75)){if('ctUjC'!==_0x65991d(0x20d))this[_0x65991d(0xe5)]()?_0x53e8e5[_0x65991d(0x94c)][_0x65991d(0x933)]['call'](this):(this[_0x65991d(0x6c2)]=!this[_0x65991d(0x614)][_0x65991d(0x793)](),!this[_0x65991d(0x6c2)]&&(this[_0x65991d(0x43a)]=0x0));else return this[_0x65991d(0x551)]();}else return VisuMZ[_0x65991d(0x94c)][_0x65991d(0x408)]['call'](this,_0x106f78);},Window_Options[_0x4ab18a(0x49d)][_0x4ab18a(0x551)]=function(){const _0x9d2e35=_0x4ab18a,_0x3bb3a9=VisuMZ['BattleCore'][_0x9d2e35(0x3f5)][_0x9d2e35(0x581)],_0x53b733=this['getConfigValue'](_0x9d2e35(0xa75));return _0x53b733?_0x3bb3a9[_0x9d2e35(0x3b8)]:_0x3bb3a9[_0x9d2e35(0x86)];},Window_ShopStatus[_0x4ab18a(0x49d)]['getItemDamageAmountLabelBattleCore']=function(){const _0x22f750=_0x4ab18a,_0x3e51a0=DataManager['getDamageStyle'](this[_0x22f750(0x8b9)]),_0x11127c=VisuMZ[_0x22f750(0x3f8)][_0x3e51a0];if(!_0x11127c)return this['getItemDamageAmountLabelOriginal']();const _0x3f729a=_0x22f750(0xa3f)[_0x22f750(0x278)](this[_0x22f750(0x8b9)][_0x22f750(0x938)][_0x22f750(0x626)]),_0x52a529=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x22f750(0x8b9)][_0x22f750(0x938)]['type']];return _0x11127c[_0x3f729a][_0x22f750(0x278)](_0x52a529);},Window_ShopStatus['prototype'][_0x4ab18a(0x36c)]=function(){const _0x1d2ff7=_0x4ab18a,_0x2db834=DataManager[_0x1d2ff7(0x2ac)](this[_0x1d2ff7(0x8b9)]),_0x22fac3=VisuMZ[_0x1d2ff7(0x3f8)][_0x2db834];if(!_0x22fac3)return this[_0x1d2ff7(0x225)]();return _0x22fac3['DamageDisplay'][_0x1d2ff7(0x45b)](this);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x635)]=Window_PartyCommand['prototype']['initialize'],Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(_0x4f963a){const _0x46589d=_0x4ab18a;VisuMZ[_0x46589d(0x94c)][_0x46589d(0x635)][_0x46589d(0x45b)](this,_0x4f963a),this['createCommandNameWindow'](_0x4f963a);},Window_PartyCommand['prototype'][_0x4ab18a(0x96f)]=function(_0x480b59){const _0x1913d4=_0x4ab18a,_0x2c47f4=new Rectangle(0x0,0x0,_0x480b59[_0x1913d4(0x999)],_0x480b59[_0x1913d4(0x428)]);this['_commandNameWindow']=new Window_Base(_0x2c47f4),this[_0x1913d4(0x3ba)][_0x1913d4(0x43a)]=0x0,this['addChild'](this['_commandNameWindow']),this[_0x1913d4(0x372)]();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0x1e817b=_0x4ab18a;Window_Command[_0x1e817b(0x49d)][_0x1e817b(0x175)]['call'](this);if(this[_0x1e817b(0x3ba)])this[_0x1e817b(0x372)]();},Window_PartyCommand['prototype'][_0x4ab18a(0x372)]=function(){const _0x3f1835=_0x4ab18a,_0x4d6b8e=this[_0x3f1835(0x3ba)];_0x4d6b8e[_0x3f1835(0x46a)][_0x3f1835(0x7e0)]();const _0x304019=this['commandStyleCheck'](this[_0x3f1835(0xa34)]());if(_0x304019==='icon'&&this[_0x3f1835(0x375)]()>0x0){const _0x27b397=this[_0x3f1835(0x1a3)](this[_0x3f1835(0xa34)]());let _0x2a92bc=this[_0x3f1835(0x95f)](this[_0x3f1835(0xa34)]());_0x2a92bc=_0x2a92bc[_0x3f1835(0x277)](/\\I\[(\d+)\]/gi,''),_0x4d6b8e[_0x3f1835(0x834)](),this[_0x3f1835(0x8cd)](_0x2a92bc,_0x27b397),this['commandNameWindowDrawText'](_0x2a92bc,_0x27b397),this[_0x3f1835(0x94d)](_0x2a92bc,_0x27b397);}},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x8cd)]=function(_0x7d88dc,_0x5265f2){},Window_PartyCommand[_0x4ab18a(0x49d)]['commandNameWindowDrawText']=function(_0x2b4e56,_0x6ee747){const _0x2dc66e=_0x4ab18a,_0x5e6721=this['_commandNameWindow'];_0x5e6721['drawText'](_0x2b4e56,0x0,_0x6ee747['y'],_0x5e6721[_0x2dc66e(0x5f3)],_0x2dc66e(0x419));},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x94d)]=function(_0x4585f9,_0x429cf7){const _0x20134a=_0x4ab18a,_0x4ee6e8=this[_0x20134a(0x3ba)],_0x4293d3=$gameSystem['windowPadding'](),_0x531da3=_0x429cf7['x']+Math[_0x20134a(0x831)](_0x429cf7[_0x20134a(0x999)]/0x2)+_0x4293d3;_0x4ee6e8['x']=_0x4ee6e8['width']/-0x2+_0x531da3,_0x4ee6e8['y']=Math[_0x20134a(0x831)](_0x429cf7[_0x20134a(0x428)]/0x2);},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x511)]=function(){const _0x2e870b=_0x4ab18a;this[_0x2e870b(0x3cc)](),this['addAutoBattleCommand'](),this[_0x2e870b(0x71d)](),this[_0x2e870b(0x570)](),this[_0x2e870b(0x4fb)]();},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x3cc)]=function(){const _0x381fcb=_0x4ab18a,_0xccae13=this[_0x381fcb(0x691)](),_0x30f466=VisuMZ[_0x381fcb(0x94c)][_0x381fcb(0x3f5)]['PartyCmd']['CmdIconFight'],_0x114c90=_0xccae13===_0x381fcb(0x633)?TextManager[_0x381fcb(0x76a)]:_0x381fcb(0x2fa)[_0x381fcb(0x278)](_0x30f466,TextManager['fight']),_0x385094=this['isFightCommandEnabled']();this['addCommand'](_0x114c90,_0x381fcb(0x76a),_0x385094);},Window_PartyCommand[_0x4ab18a(0x49d)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4ab18a(0x49d)]['addAutoBattleCommand']=function(){const _0x49f683=_0x4ab18a;if(!this[_0x49f683(0x3a7)]())return;const _0x53762a=this['commandStyle'](),_0x4b597d=VisuMZ['BattleCore'][_0x49f683(0x3f5)]['PartyCmd'][_0x49f683(0x69a)],_0x4315af=_0x53762a==='text'?TextManager['autoBattle']:_0x49f683(0x2fa)[_0x49f683(0x278)](_0x4b597d,TextManager[_0x49f683(0x4ea)]),_0x1636cb=this[_0x49f683(0x644)]();this[_0x49f683(0xa9)](_0x4315af,'autoBattle',_0x1636cb);},Window_PartyCommand['prototype'][_0x4ab18a(0x3a7)]=function(){const _0x3284e1=_0x4ab18a;return VisuMZ['BattleCore'][_0x3284e1(0x3f5)][_0x3284e1(0x965)][_0x3284e1(0xa4f)];},Window_PartyCommand['prototype']['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x71d)]=function(){},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x570)]=function(){const _0x4b998b=_0x4ab18a;if(!this[_0x4b998b(0x381)]())return;const _0xd0620c=this['commandStyle'](),_0x89710a=VisuMZ[_0x4b998b(0x94c)][_0x4b998b(0x3f5)][_0x4b998b(0x965)][_0x4b998b(0xce)],_0x4694fa=_0xd0620c===_0x4b998b(0x633)?TextManager['options']:_0x4b998b(0x2fa)[_0x4b998b(0x278)](_0x89710a,TextManager['options']),_0x421229=this['isOptionsCommandEnabled']();this[_0x4b998b(0xa9)](_0x4694fa,_0x4b998b(0x2a0),_0x421229);},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x381)]=function(){const _0x2b211a=_0x4ab18a;return VisuMZ[_0x2b211a(0x94c)][_0x2b211a(0x3f5)][_0x2b211a(0x965)][_0x2b211a(0x64b)];},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x716)]=function(){return!![];},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x4fb)]=function(){const _0x321f88=_0x4ab18a,_0x272b21=this[_0x321f88(0x691)](),_0x163b60=VisuMZ[_0x321f88(0x94c)][_0x321f88(0x3f5)][_0x321f88(0x965)][_0x321f88(0x243)],_0x33188b=_0x272b21==='text'?TextManager['escape']:_0x321f88(0x2fa)[_0x321f88(0x278)](_0x163b60,TextManager[_0x321f88(0x88e)]),_0x13f635=this['isEscapeCommandEnabled']();this[_0x321f88(0xa9)](_0x33188b,_0x321f88(0x88e),_0x13f635);},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x60e)]=function(){const _0x162f73=_0x4ab18a;return BattleManager[_0x162f73(0xa27)]();},Window_PartyCommand[_0x4ab18a(0x49d)]['itemTextAlign']=function(){const _0x99f287=_0x4ab18a;return VisuMZ[_0x99f287(0x94c)][_0x99f287(0x3f5)][_0x99f287(0x965)][_0x99f287(0x4bc)];},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x654)]=function(_0x41171c){const _0x181998=_0x4ab18a,_0x2c4469=this[_0x181998(0x46b)](_0x41171c);if(_0x2c4469===_0x181998(0xb7))this[_0x181998(0x151)](_0x41171c);else _0x2c4469===_0x181998(0xa2b)?_0x181998(0x674)===_0x181998(0x1b5)?_0x2f4719[_0x181998(0x668)]([_0x2a259]):this[_0x181998(0x891)](_0x41171c):Window_Command[_0x181998(0x49d)][_0x181998(0x654)][_0x181998(0x45b)](this,_0x41171c);},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x691)]=function(){const _0x4dfbf1=_0x4ab18a;return VisuMZ[_0x4dfbf1(0x94c)][_0x4dfbf1(0x3f5)][_0x4dfbf1(0x965)][_0x4dfbf1(0x5ae)];},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x46b)]=function(_0x1dec77){const _0x26ebdc=_0x4ab18a;if(_0x1dec77<0x0)return _0x26ebdc(0x633);const _0x38bea4=this['commandStyle']();if(_0x38bea4!=='auto')return _0x38bea4;else{if(this[_0x26ebdc(0x375)]()>0x0){if(_0x26ebdc(0x3f0)==='kpGRB')this[_0x26ebdc(0xa86)](_0x26ebdc(0x43c));else{const _0x4737f9=this[_0x26ebdc(0x95f)](_0x1dec77);if(_0x4737f9[_0x26ebdc(0x378)](/\\I\[(\d+)\]/i)){const _0x2a7d66=this[_0x26ebdc(0x1a3)](_0x1dec77),_0x48d1fb=this[_0x26ebdc(0x3a1)](_0x4737f9)[_0x26ebdc(0x999)];return _0x48d1fb<=_0x2a7d66[_0x26ebdc(0x999)]?_0x26ebdc(0xb7):_0x26ebdc(0xa2b);}}}}return'text';},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x151)]=function(_0xa78b15){const _0x19c31c=_0x4ab18a,_0x5413b4=this[_0x19c31c(0x1a3)](_0xa78b15),_0x27b72=this[_0x19c31c(0x95f)](_0xa78b15),_0x2dc2ef=this[_0x19c31c(0x3a1)](_0x27b72)[_0x19c31c(0x999)];this[_0x19c31c(0x40c)](this[_0x19c31c(0x66d)](_0xa78b15));const _0x19a076=this[_0x19c31c(0x2b5)]();if(_0x19a076===_0x19c31c(0x23c))this[_0x19c31c(0x82c)](_0x27b72,_0x5413b4['x']+_0x5413b4[_0x19c31c(0x999)]-_0x2dc2ef,_0x5413b4['y'],_0x2dc2ef);else{if(_0x19a076===_0x19c31c(0x419)){const _0x3ec9d7=_0x5413b4['x']+Math[_0x19c31c(0x831)]((_0x5413b4[_0x19c31c(0x999)]-_0x2dc2ef)/0x2);this['drawTextEx'](_0x27b72,_0x3ec9d7,_0x5413b4['y'],_0x2dc2ef);}else{if('BThrY'!==_0x19c31c(0x499))this['drawTextEx'](_0x27b72,_0x5413b4['x'],_0x5413b4['y'],_0x2dc2ef);else{const _0x4c1361=new _0x3e712e(0x0,0x0,_0x25b9ac[_0x19c31c(0x999)],_0x58af71['height']);this['_commandNameWindow']=new _0x2cceb9(_0x4c1361),this[_0x19c31c(0x3ba)][_0x19c31c(0x43a)]=0x0,this[_0x19c31c(0x19a)](this[_0x19c31c(0x3ba)]),this['updateCommandNameWindow']();}}}},Window_PartyCommand['prototype'][_0x4ab18a(0x891)]=function(_0x236b9c){const _0x3e1a65=_0x4ab18a;this['commandName'](_0x236b9c)[_0x3e1a65(0x378)](/\\I\[(\d+)\]/i);const _0x4f5e48=Number(RegExp['$1'])||0x0,_0x29b860=this[_0x3e1a65(0x1a3)](_0x236b9c),_0x2e43b2=_0x29b860['x']+Math[_0x3e1a65(0x831)]((_0x29b860[_0x3e1a65(0x999)]-ImageManager[_0x3e1a65(0x718)])/0x2),_0x19edae=_0x29b860['y']+(_0x29b860[_0x3e1a65(0x428)]-ImageManager['iconHeight'])/0x2;this[_0x3e1a65(0x803)](_0x4f5e48,_0x2e43b2,_0x19edae);},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x25a)]=function(){},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x96a)]=function(){const _0x2189c9=_0x4ab18a;Window_Command['prototype'][_0x2189c9(0x96a)]['call'](this);const _0x1089bf=this[_0x2189c9(0xaf0)]();if(_0x1089bf===_0x2189c9(0x1a7)){if(_0x2189c9(0x5a1)==='dftso')this[_0x2189c9(0x39f)]();else{let _0x50a34b=0x0;return this[_0x2189c9(0x69e)]&&!this[_0x2189c9(0x69e)][_0x2189c9(0x946)]()&&(_0x50a34b-=this[_0x2189c9(0x9d1)],_0x50a34b-=this['_jumpHeight']),_0x50a34b;}}},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0xaf0)]=function(){const _0x175385=_0x4ab18a;if(this[_0x175385(0x4be)])return this[_0x175385(0x4be)];return this[_0x175385(0x4be)]=SceneManager['_scene'][_0x175385(0xaf0)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x982)]=function(){const _0x536a1b=_0x4ab18a,_0x2a11f0=VisuMZ[_0x536a1b(0x94c)][_0x536a1b(0x3f5)][_0x536a1b(0x965)],_0x1858b3=this[_0x536a1b(0x1ff)]();switch(_0x1858b3){case'fight':this[_0x536a1b(0x6de)][_0x536a1b(0xa15)](_0x2a11f0['HelpFight']);break;case _0x536a1b(0x4ea):this['_helpWindow'][_0x536a1b(0xa15)](_0x2a11f0['HelpAutoBattle']);break;case'options':this[_0x536a1b(0x6de)][_0x536a1b(0xa15)](_0x2a11f0[_0x536a1b(0x2c5)]);break;case _0x536a1b(0x88e):this[_0x536a1b(0x6de)]['setText'](_0x2a11f0[_0x536a1b(0x624)]);break;default:this[_0x536a1b(0x6de)][_0x536a1b(0xa15)]('');break;}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x8c4)]=Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)],Window_ActorCommand[_0x4ab18a(0x49d)]['initialize']=function(_0x2fbb0c){const _0x15cd92=_0x4ab18a;VisuMZ[_0x15cd92(0x94c)]['Window_ActorCommand_initialize'][_0x15cd92(0x45b)](this,_0x2fbb0c),this[_0x15cd92(0x96f)](_0x2fbb0c);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x96f)]=function(_0x362a95){const _0x22a9e5=_0x4ab18a,_0x5035bb=new Rectangle(0x0,0x0,_0x362a95['width'],_0x362a95[_0x22a9e5(0x428)]);this[_0x22a9e5(0x3ba)]=new Window_Base(_0x5035bb),this[_0x22a9e5(0x3ba)][_0x22a9e5(0x43a)]=0x0,this[_0x22a9e5(0x19a)](this[_0x22a9e5(0x3ba)]),this[_0x22a9e5(0x372)]();},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x175)]=function(){const _0x1e320c=_0x4ab18a;Window_Command[_0x1e320c(0x49d)][_0x1e320c(0x175)][_0x1e320c(0x45b)](this);if(this['_commandNameWindow'])this[_0x1e320c(0x372)]();},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x372)]=function(){const _0x5ca726=_0x4ab18a,_0x2b636b=this[_0x5ca726(0x3ba)];_0x2b636b['contents'][_0x5ca726(0x7e0)]();const _0xd63232=this[_0x5ca726(0x46b)](this[_0x5ca726(0xa34)]());if(_0xd63232===_0x5ca726(0xa2b)&&this[_0x5ca726(0x375)]()>0x0){const _0x4413b5=this[_0x5ca726(0x1a3)](this[_0x5ca726(0xa34)]());let _0x412cf8=this[_0x5ca726(0x95f)](this['index']());_0x412cf8=_0x412cf8[_0x5ca726(0x277)](/\\I\[(\d+)\]/gi,''),_0x2b636b[_0x5ca726(0x834)](),this[_0x5ca726(0x8cd)](_0x412cf8,_0x4413b5),this[_0x5ca726(0x128)](_0x412cf8,_0x4413b5),this[_0x5ca726(0x94d)](_0x412cf8,_0x4413b5);}},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x8cd)]=function(_0x586f29,_0x21abd3){},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x128)]=function(_0x4b185b,_0x25edf5){const _0x4aea53=_0x4ab18a,_0x4a9776=this[_0x4aea53(0x3ba)];_0x4a9776[_0x4aea53(0x5f1)](_0x4b185b,0x0,_0x25edf5['y'],_0x4a9776[_0x4aea53(0x5f3)],_0x4aea53(0x419));},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x94d)]=function(_0x3ae0c2,_0x289636){const _0x239ea1=_0x4ab18a,_0x53678e=this[_0x239ea1(0x3ba)],_0x5caba5=$gameSystem[_0x239ea1(0x495)](),_0x445c51=_0x289636['x']+Math[_0x239ea1(0x831)](_0x289636[_0x239ea1(0x999)]/0x2)+_0x5caba5;_0x53678e['x']=_0x53678e[_0x239ea1(0x999)]/-0x2+_0x445c51,_0x53678e['y']=Math[_0x239ea1(0x831)](_0x289636[_0x239ea1(0x428)]/0x2);},Window_ActorCommand['prototype'][_0x4ab18a(0x511)]=function(){const _0x2f87dc=_0x4ab18a;if(!this[_0x2f87dc(0x1cd)])return;const _0x5e4f5f=this[_0x2f87dc(0x1cd)][_0x2f87dc(0x8cc)]();for(const _0x2483d7 of _0x5e4f5f){this[_0x2f87dc(0x3f6)](_0x2483d7[_0x2f87dc(0x9e5)]()['trim']());}},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x3f6)]=function(_0x5cc4c5){const _0x39f85c=_0x4ab18a;_0x5cc4c5===_0x39f85c(0x2ef)&&(_0x39f85c(0xac5)!=='mOKBO'?this[_0x39f85c(0x4dc)]():_0x9f7243['removeBuff'](_0x4ae7af));['STYPES','SKILLS'][_0x39f85c(0xb2)](_0x5cc4c5)&&this[_0x39f85c(0x3e9)]();if(_0x5cc4c5===_0x39f85c(0x517)){if('MeoAx'===_0x39f85c(0x5a0)){const _0x35f22a=_0x372ce7['item']();this[_0x39f85c(0xf3)](_0xad7faf,_0x22ed68,_0x2234e8),this['createEffectActionSet'](_0x5ba115,_0x278db5,_0xabd8f9),this[_0x39f85c(0x33f)](_0x4c2549,_0x150edd,_0x2db264);}else this[_0x39f85c(0x68a)]();}_0x5cc4c5==='ITEM'&&this[_0x39f85c(0x5fc)]();_0x5cc4c5===_0x39f85c(0x66c)&&this[_0x39f85c(0x4fb)]();_0x5cc4c5==='AUTO\x20BATTLE'&&this['addAutoBattleCommand']();if(_0x5cc4c5[_0x39f85c(0x378)](/STYPE: (\d+)/i)){const _0x56fa73=Number(RegExp['$1']);this[_0x39f85c(0x266)](_0x56fa73);}else{if(_0x5cc4c5['match'](/STYPE: (.*)/i)){const _0x4b8bc8=DataManager[_0x39f85c(0xa54)](RegExp['$1']);this['addSkillTypeCommand'](_0x4b8bc8);}}_0x5cc4c5===_0x39f85c(0x87f)&&this['addSingleSkillCommands']();if(_0x5cc4c5['match'](/SKILL: (\d+)/i)){if(_0x39f85c(0x72c)!==_0x39f85c(0x516)){const _0x33ee38=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x33ee38]);}else _0x659f13[_0x39f85c(0x94c)][_0x39f85c(0x7a1)](),_0x5cd8ce['BattleCore']['BindCommonEventKeysForGroup'](_0x294c15),_0x517464[_0x39f85c(0x94c)]['BindCommonEventKeysForGroup'](_0x51aec4);}else{if(_0x5cc4c5['match'](/SKILL: (.*)/i)){if(_0x39f85c(0x3a4)===_0x39f85c(0x13c))return _0x49f72c;else{const _0x31b732=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x39f85c(0xad1)]($dataSkills[_0x31b732]);}}}_0x5cc4c5==='PARTY'&&Imported['VisuMZ_2_PartySystem']&&this[_0x39f85c(0x176)](),[_0x39f85c(0x126),_0x39f85c(0x8b5)]['includes'](_0x5cc4c5)&&Imported[_0x39f85c(0x4cc)]&&this[_0x39f85c(0x1b7)](),_0x5cc4c5===_0x39f85c(0xac6)&&Imported[_0x39f85c(0x3c5)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand[_0x4ab18a(0x49d)]['addAttackCommand']=function(){const _0x51934b=_0x4ab18a,_0xe74eb4=$dataSkills[this[_0x51934b(0x1cd)]['attackSkillId']()];if(!_0xe74eb4)return;if(!this[_0x51934b(0x82e)](_0xe74eb4))return;const _0x1214de=this['commandStyle'](),_0x5ed764=DataManager['battleCommandName'](_0xe74eb4),_0x12a2d6=DataManager[_0x51934b(0x8e2)](_0xe74eb4),_0x5a07ee=_0x1214de===_0x51934b(0x633)?_0x5ed764:_0x51934b(0x2fa)[_0x51934b(0x278)](_0x12a2d6,_0x5ed764);this['addCommand'](_0x5a07ee,_0x51934b(0x141),this[_0x51934b(0x1cd)]['canAttack']());},Window_ActorCommand['prototype'][_0x4ab18a(0x68a)]=function(){const _0x1b4ca7=_0x4ab18a,_0x5ed97e=$dataSkills[this['_actor']['guardSkillId']()];if(!_0x5ed97e)return;if(!this['canAddSkillCommand'](_0x5ed97e))return;const _0x2fa183=this['commandStyle'](),_0x531de6=DataManager[_0x1b4ca7(0xadd)](_0x5ed97e),_0x468913=DataManager[_0x1b4ca7(0x8e2)](_0x5ed97e),_0x5ca02b=_0x2fa183===_0x1b4ca7(0x633)?_0x531de6:_0x1b4ca7(0x2fa)['format'](_0x468913,_0x531de6);this[_0x1b4ca7(0xa9)](_0x5ca02b,_0x1b4ca7(0x368),this[_0x1b4ca7(0x1cd)][_0x1b4ca7(0x76b)]());},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x5fc)]=function(){const _0x4a924b=_0x4ab18a,_0x1df7a8=this[_0x4a924b(0x691)](),_0x1e2d2a=VisuMZ[_0x4a924b(0x94c)][_0x4a924b(0x3f5)]['ActorCmd'][_0x4a924b(0x6d4)],_0x14f3c3=_0x1df7a8===_0x4a924b(0x633)?TextManager[_0x4a924b(0x925)]:_0x4a924b(0x2fa)[_0x4a924b(0x278)](_0x1e2d2a,TextManager['item']),_0xe8fd86=this[_0x4a924b(0x8bf)]();this[_0x4a924b(0xa9)](_0x14f3c3,_0x4a924b(0x925),_0xe8fd86);},Window_ActorCommand['prototype']['isItemCommandEnabled']=function(){const _0x415e03=_0x4ab18a;return this[_0x415e03(0x1cd)]&&this['_actor'][_0x415e03(0x5e5)]();},Window_ActorCommand[_0x4ab18a(0x49d)]['addSkillCommands']=function(){const _0x5a7546=_0x4ab18a,_0x2548f6=this[_0x5a7546(0x1cd)]['skillTypes']();for(const _0x22c19f of _0x2548f6){_0x5a7546(0xa95)!==_0x5a7546(0xa95)?this[_0x5a7546(0x37d)](_0x5a7546(0x9ac)):this[_0x5a7546(0x266)](_0x22c19f);}},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x266)]=function(_0x33a5f5){const _0x9e8fd0=_0x4ab18a;let _0xffba4f=$dataSystem[_0x9e8fd0(0x286)][_0x33a5f5];if(!_0xffba4f)return;let _0x1dd02f=_0xffba4f;const _0x5551e9=this[_0x9e8fd0(0x691)]();if(_0x5551e9===_0x9e8fd0(0x633))_0x1dd02f=_0x1dd02f['replace'](/\x1I\[(\d+)\]/gi,''),_0x1dd02f=_0x1dd02f['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0xffba4f['match'](/\\I\[(\d+)\]/i)){if('CQwuF'!==_0x9e8fd0(0xaa3)){const _0x11eda3=Imported[_0x9e8fd0(0x273)]?VisuMZ[_0x9e8fd0(0x2f4)]['Settings'][_0x9e8fd0(0x53f)]:VisuMZ[_0x9e8fd0(0x94c)][_0x9e8fd0(0x3f5)][_0x9e8fd0(0x3dd)],_0x1952ac=$dataSystem['magicSkills']['includes'](_0x33a5f5),_0x573485=_0x1952ac?_0x11eda3[_0x9e8fd0(0x6b1)]:_0x11eda3['IconStypeNorm'];_0x1dd02f='\x5cI[%1]%2'[_0x9e8fd0(0x278)](_0x573485,_0xffba4f);}else{this[_0x9e8fd0(0x46a)][_0x9e8fd0(0x7e0)]();const _0x523d1c=_0x12ba72['BattleCore'][_0x9e8fd0(0x3f5)][_0x9e8fd0(0x581)]['AutoBattleMsg'],_0x4a3393=_0x523d1c[_0x9e8fd0(0x278)](this[_0x9e8fd0(0x828)](),this['cancelButtonText']()),_0x6a0e59=this[_0x9e8fd0(0x3a1)](_0x4a3393)[_0x9e8fd0(0x999)],_0x17745f=_0x250f8e['floor']((this['innerWidth']-_0x6a0e59)/0x2);this[_0x9e8fd0(0x82c)](_0x4a3393,_0x17745f,0x0,_0x6a0e59);}}}this[_0x9e8fd0(0xa9)](_0x1dd02f,_0x9e8fd0(0x30c),!![],_0x33a5f5);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0xa38)]=function(){const _0x5ce4e4=_0x4ab18a,_0x41bd8c=this['_actor'][_0x5ce4e4(0x286)](),_0x3d285e=this[_0x5ce4e4(0x1cd)][_0x5ce4e4(0x2a8)]();for(const _0x151487 of _0x3d285e){if(_0x5ce4e4(0x7b3)===_0x5ce4e4(0x2f6))_0x4764f2[_0x5ce4e4(0x94c)]['Game_Battler_clearMotion'][_0x5ce4e4(0x45b)](this),this[_0x5ce4e4(0x99)]();else{if(!_0x151487)continue;if(Imported[_0x5ce4e4(0x273)]){if(this[_0x5ce4e4(0x638)](_0x151487))continue;if(this[_0x5ce4e4(0x2cd)](_0x151487))continue;}else{if(!_0x41bd8c[_0x5ce4e4(0xb2)](_0x151487[_0x5ce4e4(0x3b3)]))continue;}this[_0x5ce4e4(0xad1)](_0x151487);}}},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x638)]=function(_0x23b2f3){const _0x3fd848=_0x4ab18a,_0x13323a=this['_actor'][_0x3fd848(0x286)](),_0xf0aa0=_0x13323a[_0x3fd848(0xa47)](_0x2e36aa=>DataManager[_0x3fd848(0x8b6)](_0x23b2f3)['includes'](_0x2e36aa));return _0xf0aa0['length']<=0x0;},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x2cd)]=function(_0x58ed8f){const _0x4ec8e1=_0x4ab18a;if(!Window_SkillList['prototype'][_0x4ec8e1(0x5da)][_0x4ec8e1(0x45b)](this,_0x58ed8f))return!![];if(!Window_SkillList[_0x4ec8e1(0x49d)][_0x4ec8e1(0x2ae)][_0x4ec8e1(0x45b)](this,_0x58ed8f))return!![];if(!Window_SkillList['prototype']['checkShowHideSkillNotetags']['call'](this,_0x58ed8f))return!![];return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0xccd071){const _0x3e8a39=_0x4ab18a;if(!_0xccd071)return;if(!this['canAddSkillCommand'](_0xccd071))return;const _0x4e6ca2=this[_0x3e8a39(0x691)](),_0x404c2d=DataManager[_0x3e8a39(0xadd)](_0xccd071),_0x16bc8a=DataManager[_0x3e8a39(0x8e2)](_0xccd071),_0x45a917=_0x4e6ca2==='text'?_0x404c2d:'\x5cI[%1]%2'['format'](_0x16bc8a,_0x404c2d),_0xec5120=this['_actor'][_0x3e8a39(0x85a)](_0xccd071);this[_0x3e8a39(0xa9)](_0x45a917,_0x3e8a39(0x7e2),_0xec5120,_0xccd071['id']);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x82e)]=function(_0x50c63f){const _0x1999bc=_0x4ab18a,_0x3c7e96=_0x50c63f['note'];if(_0x3c7e96[_0x1999bc(0x378)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x1999bc(0x1cd)][_0x1999bc(0x111)](_0x50c63f['id']))return![];}if(_0x3c7e96[_0x1999bc(0x378)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x1999bc(0x1cd)]['hasSkill'](_0x50c63f['id']))return![];}const _0x20b97f=VisuMZ[_0x1999bc(0x94c)][_0x1999bc(0x4ae)](_0x50c63f,'CommandVisible');if(VisuMZ['BattleCore']['JS'][_0x20b97f]){if(!VisuMZ[_0x1999bc(0x94c)]['JS'][_0x20b97f]['call'](this,this[_0x1999bc(0x1cd)],_0x50c63f))return![];}return VisuMZ[_0x1999bc(0x94c)][_0x1999bc(0x795)](_0x50c63f);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x795)]=function(_0x4a8cb5){const _0x183f51=_0x4ab18a,_0x566088=_0x4a8cb5[_0x183f51(0x7d0)];if(_0x566088['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x163695=JSON[_0x183f51(0x798)]('['+RegExp['$1'][_0x183f51(0x378)](/\d+/g)+']');for(const _0x5a1a51 of _0x163695){if(!$gameSwitches['value'](_0x5a1a51))return![];}return!![];}if(_0x566088[_0x183f51(0x378)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x556923=JSON[_0x183f51(0x798)]('['+RegExp['$1'][_0x183f51(0x378)](/\d+/g)+']');for(const _0x236ff5 of _0x556923){if('ZEIWy'!==_0x183f51(0x308)){const _0x136834=_0x1b57dd[_0x183f51(0x50a)](_0x1364be);return _0x136834>=0x0?[_0xe705b6[_0x136834-0x1]||_0x348ded]:[_0x52f02d];}else{if(!$gameSwitches[_0x183f51(0x7ce)](_0x236ff5))return![];}}return!![];}if(_0x566088[_0x183f51(0x378)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x183f51(0x32f)===_0x183f51(0x32f)){const _0x570c11=JSON[_0x183f51(0x798)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x40feb2 of _0x570c11){if($gameSwitches[_0x183f51(0x7ce)](_0x40feb2))return!![];}return![];}else _0x42ca3f+=_0xacc508;}if(_0x566088['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x79aa96=JSON[_0x183f51(0x798)]('['+RegExp['$1'][_0x183f51(0x378)](/\d+/g)+']');for(const _0x1a57a3 of _0x79aa96){if(!$gameSwitches[_0x183f51(0x7ce)](_0x1a57a3))return!![];}return![];}if(_0x566088[_0x183f51(0x378)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x58f174=JSON[_0x183f51(0x798)]('['+RegExp['$1'][_0x183f51(0x378)](/\d+/g)+']');for(const _0xa0429a of _0x58f174){if(!$gameSwitches[_0x183f51(0x7ce)](_0xa0429a))return!![];}return![];}if(_0x566088[_0x183f51(0x378)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x28a02c=JSON['parse']('['+RegExp['$1'][_0x183f51(0x378)](/\d+/g)+']');for(const _0x3797d9 of _0x28a02c){if(_0x183f51(0x15f)!=='NfVCC'){if(this[_0x183f51(0x5f6)]!==_0x337d8c)return this['_svBattlerData'];return this[_0x183f51(0x26a)](),this['_svBattlerData'];}else{if($gameSwitches[_0x183f51(0x7ce)](_0x3797d9))return![];}}return!![];}return!![];},Window_ActorCommand['prototype']['addEscapeCommand']=function(){const _0x38e907=_0x4ab18a,_0x4699b1=this[_0x38e907(0x691)](),_0x41c554=VisuMZ[_0x38e907(0x94c)]['Settings'][_0x38e907(0x965)][_0x38e907(0x243)],_0x4b0529=_0x4699b1===_0x38e907(0x633)?TextManager[_0x38e907(0x88e)]:'\x5cI[%1]%2'[_0x38e907(0x278)](_0x41c554,TextManager[_0x38e907(0x88e)]),_0x14adbb=this[_0x38e907(0x60e)]();this[_0x38e907(0xa9)](_0x4b0529,_0x38e907(0x88e),_0x14adbb);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x60e)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x2d6)]=function(){const _0x5ce73a=_0x4ab18a,_0x49d4db=this['commandStyle'](),_0x1e2237=VisuMZ[_0x5ce73a(0x94c)][_0x5ce73a(0x3f5)][_0x5ce73a(0x965)]['CmdIconAutoBattle'],_0x150972=_0x49d4db===_0x5ce73a(0x633)?TextManager[_0x5ce73a(0x4ea)]:_0x5ce73a(0x2fa)[_0x5ce73a(0x278)](_0x1e2237,TextManager[_0x5ce73a(0x4ea)]),_0x25e6f2=this[_0x5ce73a(0x644)]();this[_0x5ce73a(0xa9)](_0x150972,_0x5ce73a(0x4ea),_0x25e6f2);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x644)]=function(){return!![];},Window_ActorCommand['prototype'][_0x4ab18a(0x2b5)]=function(){const _0x4c69fc=_0x4ab18a;return VisuMZ[_0x4c69fc(0x94c)][_0x4c69fc(0x3f5)]['ActorCmd'][_0x4c69fc(0x4bc)];},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x654)]=function(_0x38f739){const _0x378b0a=_0x4ab18a,_0x78f036=this[_0x378b0a(0x46b)](_0x38f739);if(_0x78f036==='iconText')this[_0x378b0a(0x151)](_0x38f739);else _0x78f036===_0x378b0a(0xa2b)?this[_0x378b0a(0x891)](_0x38f739):Window_Command['prototype'][_0x378b0a(0x654)]['call'](this,_0x38f739);this[_0x378b0a(0x93)](_0x38f739);},Window_ActorCommand[_0x4ab18a(0x49d)]['commandStyle']=function(){const _0x5e9560=_0x4ab18a;return VisuMZ['BattleCore'][_0x5e9560(0x3f5)][_0x5e9560(0x3dd)][_0x5e9560(0x5ae)];},Window_ActorCommand['prototype'][_0x4ab18a(0x46b)]=function(_0x436d56){const _0x23cb7d=_0x4ab18a;if(_0x436d56<0x0)return _0x23cb7d(0x633);const _0x56d436=this['commandStyle']();if(_0x56d436!==_0x23cb7d(0x758)){if(_0x23cb7d(0x1be)===_0x23cb7d(0x1be))return _0x56d436;else for(const _0x4af54d of _0x44c2b1){const _0x20eeef=_0xb7a089[0x0]['format'](_0x4af54d[0x0],_0x11912e[0x0]),_0x1ee7f8=_0x486f8d[0x1]['format'](_0x4af54d[0x1],_0x1ddfe6[0x1])[_0x23cb7d(0x3a3)](),_0x34b38c=new _0xd0ee93(_0x5975be[_0x23cb7d(0x278)](_0x1ee7f8),'i');_0x521b0f[_0x20eeef]=_0x34b38c;}}else{if(this[_0x23cb7d(0x375)]()>0x0){if('FnBMW'===_0x23cb7d(0x480))_0x508cf2[_0x23cb7d(0x9ad)]=_0x38f09c(_0x218b9f['$1'])[_0x23cb7d(0x8f8)]()[_0x23cb7d(0x3a3)]();else{const _0x3dd41=this[_0x23cb7d(0x95f)](_0x436d56);if(_0x3dd41[_0x23cb7d(0x378)](/\\I\[(\d+)\]/i)){if(_0x23cb7d(0x9be)===_0x23cb7d(0x32e))this[_0x23cb7d(0x8b7)][_0x23cb7d(0x19a)](this[_0x23cb7d(0x411)]);else{const _0x1cc47a=this[_0x23cb7d(0x1a3)](_0x436d56),_0xf4b1a1=this[_0x23cb7d(0x3a1)](_0x3dd41)[_0x23cb7d(0x999)];return _0xf4b1a1<=_0x1cc47a[_0x23cb7d(0x999)]?_0x23cb7d(0xb7):_0x23cb7d(0xa9d)!==_0x23cb7d(0xa9d)?_0x23cb7d(0xb7):_0x23cb7d(0xa2b);}}}}}return'text';},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x151)]=function(_0x5592f2){const _0xd65620=_0x4ab18a,_0xd758dd=this['itemLineRect'](_0x5592f2),_0x2721ce=this[_0xd65620(0x95f)](_0x5592f2),_0x1910de=this[_0xd65620(0x3a1)](_0x2721ce)[_0xd65620(0x999)];this[_0xd65620(0x40c)](this['isCommandEnabled'](_0x5592f2));const _0x2e89a6=this[_0xd65620(0x2b5)]();if(_0x2e89a6===_0xd65620(0x23c))this[_0xd65620(0x82c)](_0x2721ce,_0xd758dd['x']+_0xd758dd[_0xd65620(0x999)]-_0x1910de,_0xd758dd['y'],_0x1910de);else{if(_0x2e89a6==='center'){const _0x46d81e=_0xd758dd['x']+Math['floor']((_0xd758dd[_0xd65620(0x999)]-_0x1910de)/0x2);this['drawTextEx'](_0x2721ce,_0x46d81e,_0xd758dd['y'],_0x1910de);}else _0xd65620(0xa4b)===_0xd65620(0xa4b)?this[_0xd65620(0x82c)](_0x2721ce,_0xd758dd['x'],_0xd758dd['y'],_0x1910de):(this[_0xd65620(0x4f5)]=this[_0xd65620(0x9f8)](this[_0xd65620(0x4f5)],this[_0xd65620(0x436)],_0x3ae213,_0x85b23b,_0x2cd907),this['_growY']=this[_0xd65620(0x9f8)](this[_0xd65620(0x1f5)],this[_0xd65620(0xcd)],_0x2d34f4,_0x52a373,_0x290558));}},Window_ActorCommand['prototype'][_0x4ab18a(0x891)]=function(_0x2ee0dc){const _0x4f4458=_0x4ab18a;this[_0x4f4458(0x95f)](_0x2ee0dc)['match'](/\\I\[(\d+)\]/i);const _0x586a92=Number(RegExp['$1'])||0x0,_0x2fe950=this[_0x4f4458(0x1a3)](_0x2ee0dc),_0x26b30d=_0x2fe950['x']+Math['floor']((_0x2fe950[_0x4f4458(0x999)]-ImageManager[_0x4f4458(0x718)])/0x2),_0x13ea66=_0x2fe950['y']+(_0x2fe950[_0x4f4458(0x428)]-ImageManager[_0x4f4458(0x485)])/0x2;this[_0x4f4458(0x803)](_0x586a92,_0x26b30d,_0x13ea66);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x93)]=function(_0x1ccb8d){const _0x1d8ce4=_0x4ab18a;if(!(VisuMZ[_0x1d8ce4(0x94c)][_0x1d8ce4(0x3f5)][_0x1d8ce4(0x3dd)][_0x1d8ce4(0x84c)]??!![]))return;const _0x3baa59=this[_0x1d8ce4(0xa8b)](_0x1ccb8d);if(![_0x1d8ce4(0x141),'guard',_0x1d8ce4(0x7e2)][_0x1d8ce4(0xb2)](_0x3baa59))return;const _0x99c967=this['itemLineRect'](_0x1ccb8d);let _0x434e08=null;if(_0x3baa59===_0x1d8ce4(0x141))_0x1d8ce4(0x67c)!==_0x1d8ce4(0x67c)?(_0x3a8307[_0x1d8ce4(0x49d)]['resetFontSettings']['call'](this),this[_0x1d8ce4(0x46a)][_0x1d8ce4(0x5e6)]=_0x574426['BattleCore'][_0x1d8ce4(0x3f5)]['Enemy']['NameFontSize']):_0x434e08=$dataSkills[this['_actor']['attackSkillId']()];else{if(_0x3baa59==='guard'){if(_0x1d8ce4(0x9a5)===_0x1d8ce4(0x396))return _0x4a305c[_0x1d8ce4(0x94c)][_0x1d8ce4(0x3f5)][_0x1d8ce4(0x56a)][_0x1d8ce4(0x4a9)];else _0x434e08=$dataSkills[this[_0x1d8ce4(0x1cd)][_0x1d8ce4(0xca)]()];}else _0x1d8ce4(0x30d)===_0x1d8ce4(0x30d)?_0x434e08=$dataSkills[this[_0x1d8ce4(0x915)][_0x1ccb8d][_0x1d8ce4(0xa3c)]]:_0x5ad3df[_0x1d8ce4(0x448)](_0x2b2970[_0x1d8ce4(0x27b)]());}this['drawSkillCost'](this[_0x1d8ce4(0x1cd)],_0x434e08,_0x99c967['x'],_0x99c967['y'],_0x99c967['width']);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x63a)]=function(_0x40611e,_0x5642a7,_0x7e7311,_0x3951ef,_0x456685){const _0x2de61a=_0x4ab18a;if(!_0x5642a7)return;Imported[_0x2de61a(0x273)]?Window_Command[_0x2de61a(0x49d)][_0x2de61a(0x63a)][_0x2de61a(0x45b)](this,_0x40611e,_0x5642a7,_0x7e7311,_0x3951ef,_0x456685):Window_SkillList[_0x2de61a(0x49d)][_0x2de61a(0x63a)][_0x2de61a(0x45b)](this,_0x5642a7,_0x7e7311,_0x3951ef,_0x456685);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x25a)]=function(){},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x96a)]=function(){const _0x2835ab=_0x4ab18a;Window_Command[_0x2835ab(0x49d)][_0x2835ab(0x96a)]['call'](this);const _0x5b39df=this[_0x2835ab(0xaf0)]();_0x5b39df===_0x2835ab(0x1a7)&&this[_0x2835ab(0x39f)]();},Window_ActorCommand[_0x4ab18a(0x49d)]['battleLayoutStyle']=function(){const _0x402d8b=_0x4ab18a;if(this[_0x402d8b(0x4be)])return this['_battleLayoutStyle'];return this[_0x402d8b(0x4be)]=SceneManager[_0x402d8b(0xa10)][_0x402d8b(0xaf0)](),this[_0x402d8b(0x4be)];},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x861)]=Window_ActorCommand[_0x4ab18a(0x49d)]['setup'],Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x914)]=function(_0x4f8b97){const _0x47bdbc=_0x4ab18a,_0x57864d=this[_0x47bdbc(0xaf0)]();if(_0x4f8b97&&['xp','portrait'][_0x47bdbc(0xb2)](_0x57864d))_0x47bdbc(0x108)==='EFihp'?this['resizeWindowXPStyle'](_0x4f8b97):this['requestMotion'](_0x47bdbc(0x925));else _0x4f8b97&&[_0x47bdbc(0x1a7)][_0x47bdbc(0xb2)](_0x57864d)&&(this[_0x47bdbc(0x7c5)](_0x4f8b97),this[_0x47bdbc(0x39f)]());VisuMZ[_0x47bdbc(0x94c)][_0x47bdbc(0x861)][_0x47bdbc(0x45b)](this,_0x4f8b97),_0x4f8b97&&$gameTroop['aliveMembers']()[_0x47bdbc(0x820)]>0x0&&_0x4f8b97[_0x47bdbc(0x173)]()&&_0x4f8b97[_0x47bdbc(0x173)]()[_0x47bdbc(0xcb)]();},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x823)]=function(_0x143502){const _0x4befbc=_0x4ab18a,_0x59e5a5=Math[_0x4befbc(0x1e2)](Graphics[_0x4befbc(0x958)]/0x3),_0x405411=Math[_0x4befbc(0x1e2)](Graphics[_0x4befbc(0x958)]/$gameParty[_0x4befbc(0x5ec)]()[_0x4befbc(0x820)]),_0x16ada8=Math[_0x4befbc(0x8f1)](_0x59e5a5,_0x405411),_0x134e62=this[_0x4befbc(0x6a3)](VisuMZ[_0x4befbc(0x94c)][_0x4befbc(0x3f5)][_0x4befbc(0x377)]['XPActorCommandLines']),_0x521342=_0x405411*_0x143502[_0x4befbc(0xa34)]()+(_0x405411-_0x16ada8)/0x2,_0x1d3286=SceneManager[_0x4befbc(0xa10)][_0x4befbc(0xc3)]['y']-_0x134e62;this['move'](_0x521342,_0x1d3286,_0x16ada8,_0x134e62),this[_0x4befbc(0x166)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x7c5)]=function(_0x380180){const _0x991ddb=_0x4ab18a,_0x4c1eb3=SceneManager[_0x991ddb(0xa10)]['partyCommandWindowRectBorderStyle']();this[_0x991ddb(0x50d)](_0x4c1eb3['x'],_0x4c1eb3['y'],_0x4c1eb3[_0x991ddb(0x999)],_0x4c1eb3[_0x991ddb(0x428)]),this[_0x991ddb(0x166)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x4ab18a(0x49d)][_0x4ab18a(0x7e5)]=function(){const _0x3b0951=_0x4ab18a;if(this[_0x3b0951(0x45c)]){const _0x3deece=this['_dimmerSprite'][_0x3b0951(0x6db)],_0x4b47e9=this[_0x3b0951(0x999)]-0x8,_0x39abb8=this[_0x3b0951(0x428)],_0x4559d3=this[_0x3b0951(0x5cf)],_0xa93370=ColorManager[_0x3b0951(0xdb)](),_0x17fc07=ColorManager[_0x3b0951(0x722)]();this[_0x3b0951(0x45c)]['x']=0x4,_0x3deece[_0x3b0951(0x3d6)](_0x4b47e9,_0x39abb8),_0x3deece[_0x3b0951(0x3f2)](0x0,0x0,_0x4b47e9,_0x4559d3,_0x17fc07,_0xa93370,!![]),_0x3deece['fillRect'](0x0,_0x4559d3,_0x4b47e9,_0x39abb8-_0x4559d3*0x2,_0xa93370),_0x3deece[_0x3b0951(0x3f2)](0x0,_0x39abb8-_0x4559d3,_0x4b47e9,_0x4559d3,_0xa93370,_0x17fc07,!![]),this[_0x3b0951(0x45c)][_0x3b0951(0x849)](0x0,0x0,_0x4b47e9,_0x39abb8);}},Window_ActorCommand[_0x4ab18a(0x49d)]['updateHelp']=function(){const _0x3562d5=_0x4ab18a;if(!this[_0x3562d5(0x1cd)])return;const _0x5774c9=VisuMZ[_0x3562d5(0x94c)][_0x3562d5(0x3f5)]['ActorCmd'],_0x59ecfb=this['currentSymbol']();switch(_0x59ecfb){case _0x3562d5(0x141):this[_0x3562d5(0xa6e)]($dataSkills[this[_0x3562d5(0x1cd)][_0x3562d5(0x4d0)]()]);break;case _0x3562d5(0x368):this[_0x3562d5(0xa6e)]($dataSkills[this['_actor'][_0x3562d5(0xca)]()]);break;case'skill':const _0x97e698=_0x5774c9[_0x3562d5(0x7a8)],_0x1d3fcb=_0x97e698['format']($dataSystem['skillTypes'][this['currentExt']()]);this[_0x3562d5(0x6de)]['setText'](_0x1d3fcb);break;case _0x3562d5(0x7e2):this[_0x3562d5(0xa6e)]($dataSkills[this[_0x3562d5(0x538)]()]);break;case'item':this[_0x3562d5(0x6de)][_0x3562d5(0xa15)](_0x5774c9[_0x3562d5(0x767)]);break;case _0x3562d5(0x88e):this['_helpWindow'][_0x3562d5(0xa15)](_0x5774c9['HelpEscape']);break;case'autoBattle':this['_helpWindow'][_0x3562d5(0xa15)](_0x5774c9[_0x3562d5(0x47b)]);break;default:this[_0x3562d5(0x6de)][_0x3562d5(0xa15)]('');break;}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x502)]=Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)],Window_BattleStatus['prototype'][_0x4ab18a(0x9ed)]=function(_0x5ebb8d){const _0x527c63=_0x4ab18a;VisuMZ[_0x527c63(0x94c)]['Window_BattleStatus_initialize']['call'](this,_0x5ebb8d),this[_0x527c63(0xa37)](),this[_0x527c63(0x7f0)]();},Window_BattleStatus['prototype'][_0x4ab18a(0xaf0)]=function(){const _0x1c00a9=_0x4ab18a;if(this[_0x1c00a9(0x4be)])return this['_battleLayoutStyle'];return this[_0x1c00a9(0x4be)]=SceneManager['_scene'][_0x1c00a9(0xaf0)](),this[_0x1c00a9(0x4be)];},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0xa37)]=function(){const _0x429add=_0x4ab18a;this[_0x429add(0xa5c)]=this[_0x429add(0x8c6)]();const _0x1c419f=VisuMZ['BattleCore']['Settings'][_0x429add(0x377)];_0x1c419f['StatusWindowSkinHide']&&(this[_0x429add(0x43a)]=0x0);},Window_BattleStatus['prototype'][_0x4ab18a(0x8c6)]=function(){const _0x577b39=_0x4ab18a,_0x2a37a5=VisuMZ[_0x577b39(0x94c)][_0x577b39(0x3f5)][_0x577b39(0x377)];if(_0x2a37a5[_0x577b39(0x2a1)]){if('LmplB'==='LmplB')return!![];else this[_0x577b39(0x904)]=0x0,this[_0x577b39(0x892)]();}const _0x158a09=this[_0x577b39(0xaf0)]();switch(_0x158a09){case'list':case _0x577b39(0x1a7):return!![];break;case'default':case'xp':case _0x577b39(0x6b3):default:return![];break;}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x251)]=function(){const _0x412823=_0x4ab18a;if(this['isFrameVisible']()){if(_0x412823(0x122)==='jyhSt')return 0x0;else this[_0x412823(0x68a)]();}else{if('uPePa'!==_0x412823(0x72f)){const _0x54fff1=this['commandStyle'](),_0x3d3699=_0x4772f2[_0x412823(0x94c)][_0x412823(0x3f5)][_0x412823(0x965)][_0x412823(0x243)],_0x13c928=_0x54fff1==='text'?_0x5a1291[_0x412823(0x88e)]:'\x5cI[%1]%2'[_0x412823(0x278)](_0x3d3699,_0x214ec8['escape']),_0x424c60=this['isEscapeCommandEnabled']();this[_0x412823(0xa9)](_0x13c928,_0x412823(0x88e),_0x424c60);}else return 0xa;}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x5b3)]=function(){const _0xa44b54=_0x4ab18a,_0x32841d=this[_0xa44b54(0xaf0)]();switch(_0x32841d){case'list':return 0x1;break;case'xp':case _0xa44b54(0x6b3):return $gameParty[_0xa44b54(0x5ec)]()['length'];break;case _0xa44b54(0x2d9):default:return $gameParty[_0xa44b54(0x6c6)]();break;}},Window_BattleStatus['prototype']['itemHeight']=function(){const _0x1ec435=_0x4ab18a,_0x1647f8=this['battleLayoutStyle']();switch(_0x1647f8){case _0x1ec435(0x5fb):return Window_StatusBase[_0x1ec435(0x49d)][_0x1ec435(0x85)]['call'](this);break;case _0x1ec435(0x2d9):case'xp':case _0x1ec435(0x6b3):default:return this[_0x1ec435(0xac9)];break;}},Window_BattleStatus[_0x4ab18a(0x49d)]['rowSpacing']=function(){const _0x1d7bb1=_0x4ab18a,_0x38f599=this['battleLayoutStyle']();switch(_0x38f599){case'list':return Window_StatusBase[_0x1d7bb1(0x49d)][_0x1d7bb1(0x34a)][_0x1d7bb1(0x45b)](this);break;case _0x1d7bb1(0x2d9):case'xp':case _0x1d7bb1(0x6b3):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x4ab18a(0x1d1)]=function(){const _0x2b3de4=_0x4ab18a;this[_0x2b3de4(0x8c6)]()?Window_StatusBase['prototype'][_0x2b3de4(0x1d1)][_0x2b3de4(0x45b)](this):this[_0x2b3de4(0x5cf)]=0x8;},Window_BattleStatus[_0x4ab18a(0x49d)]['loadWindowskin']=function(){const _0x51482d=_0x4ab18a,_0x1b4502=VisuMZ[_0x51482d(0x94c)][_0x51482d(0x3f5)][_0x51482d(0x377)];if(_0x1b4502[_0x51482d(0x2a1)])this['windowskin']=ImageManager[_0x51482d(0xac4)](_0x1b4502['StatusWindowSkinFilename']);else{if(_0x51482d(0x58f)!=='WqvmT')Window_StatusBase[_0x51482d(0x49d)][_0x51482d(0x79b)][_0x51482d(0x45b)](this);else return 0x0;}},Window_BattleStatus['prototype'][_0x4ab18a(0x6ee)]=function(_0x18d41c){const _0x32efa0=_0x4ab18a,_0x691796=VisuMZ[_0x32efa0(0x94c)][_0x32efa0(0x3f5)][_0x32efa0(0x377)];if(_0x691796[_0x32efa0(0x185)])return;Window_StatusBase[_0x32efa0(0x49d)][_0x32efa0(0x6ee)][_0x32efa0(0x45b)](this,_0x18d41c);},Window_BattleStatus['prototype'][_0x4ab18a(0x6bf)]=function(){const _0x180668=_0x4ab18a;this[_0x180668(0x5d6)]=!![];},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)]=function(){const _0x4cb47f=_0x4ab18a;Window_StatusBase[_0x4cb47f(0x49d)][_0x4cb47f(0x43d)][_0x4cb47f(0x45b)](this),this[_0x4cb47f(0x8f9)](),this['updateEffectContainers']();if(this[_0x4cb47f(0xaf0)]()===_0x4cb47f(0x1a7))this[_0x4cb47f(0x438)]();},Window_BattleStatus['prototype'][_0x4ab18a(0x8f9)]=function(){const _0x46c2ad=_0x4ab18a;if($gameTemp[_0x46c2ad(0x25c)]())this[_0x46c2ad(0x267)](),this[_0x46c2ad(0x5d6)]=![],$gameTemp[_0x46c2ad(0x58e)]();else this[_0x46c2ad(0x5d6)]&&(this['_requestRefresh']=![],this[_0x46c2ad(0x5ea)](),this[_0x46c2ad(0x685)]());},Window_BattleStatus['prototype'][_0x4ab18a(0x384)]=function(){const _0x312674=_0x4ab18a;Window_StatusBase[_0x312674(0x49d)][_0x312674(0x384)][_0x312674(0x45b)](this);if(!$gameSystem[_0x312674(0x332)]())this[_0x312674(0x5ea)]();},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x25a)]=function(){const _0x5a28db=_0x4ab18a;if(this[_0x5a28db(0x164)]===Window_BattleStatus)return;Window_StatusBase[_0x5a28db(0x49d)][_0x5a28db(0x25a)][_0x5a28db(0x45b)](this);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x487)]=function(_0x5d935a){const _0x570495=_0x4ab18a,_0x37ab15=this[_0x570495(0xaf0)]();switch(_0x37ab15){case'xp':case _0x570495(0x6b3):break;case _0x570495(0x2d9):case'list':case'border':default:return Window_StatusBase['prototype'][_0x570495(0x487)][_0x570495(0x45b)](this,_0x5d935a);break;}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3f1)]=Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x38a)],Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x38a)]=function(_0x5f33de){const _0x3d80a6=_0x4ab18a,_0x44f93d=this[_0x3d80a6(0xaf0)]();switch(_0x44f93d){case _0x3d80a6(0x5fb):this[_0x3d80a6(0x18a)](_0x5f33de);break;case'xp':this['drawItemImageXPStyle'](_0x5f33de);break;case _0x3d80a6(0x6b3):this[_0x3d80a6(0x25f)](_0x5f33de);break;case _0x3d80a6(0x2d9):case'border':default:VisuMZ['BattleCore'][_0x3d80a6(0x3f1)][_0x3d80a6(0x45b)](this,_0x5f33de);break;}},Window_BattleStatus[_0x4ab18a(0x49d)]['drawItemStatus']=function(_0x5134f8){const _0x4979a4=_0x4ab18a,_0x219ab4=this['battleLayoutStyle']();if(!$gameSystem[_0x4979a4(0x332)]())this[_0x4979a4(0x4c8)](_0x5134f8);switch(_0x219ab4){case _0x4979a4(0x5fb):this[_0x4979a4(0x2dd)](_0x5134f8);break;case'xp':case _0x4979a4(0x6b3):case _0x4979a4(0x2d9):case'border':default:this[_0x4979a4(0x621)](_0x5134f8);break;}},Window_BattleStatus[_0x4ab18a(0x49d)]['refreshCursor']=function(){const _0x27fbec=_0x4ab18a,_0x5bba06=this['battleLayoutStyle']();if(['xp'][_0x27fbec(0xb2)](_0x5bba06)&&!$gameSystem[_0x27fbec(0x332)]()){this[_0x27fbec(0xa30)](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype'][_0x27fbec(0x311)][_0x27fbec(0x45b)](this);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x4c8)]=function(_0x1e6639){const _0x1b358e=_0x4ab18a,_0x483557=this['actor'](_0x1e6639)['battler']();if(!_0x483557)return;const _0x51efe0=this[_0x1b358e(0xaf0)](),_0x29ade3=this[_0x1b358e(0xe8)](_0x1e6639);let _0x37e1b1=Math[_0x1b358e(0x1e2)](_0x29ade3['x']+_0x29ade3['width']/0x2)+this[_0x1b358e(0x5cf)];['list'][_0x1b358e(0xb2)](_0x51efe0)&&(_0x1b358e(0xa32)==='BOHxo'?_0x1623db['prototype'][_0x1b358e(0x654)][_0x1b358e(0x45b)](this,_0x41b583):(_0x37e1b1=_0x29ade3[_0x1b358e(0x999)]/$gameParty[_0x1b358e(0x5ec)]()['length'],_0x37e1b1*=_0x1e6639,_0x37e1b1+=_0x29ade3[_0x1b358e(0x999)]/$gameParty[_0x1b358e(0x5ec)]()[_0x1b358e(0x820)]/0x2));let _0x30716d=Math['round'](this[_0x1b358e(0x7ff)](_0x1e6639,_0x483557,_0x29ade3));_0x483557[_0x1b358e(0x6ce)](_0x37e1b1,_0x30716d),this['addChildAt'](_0x483557,0x1),_0x483557[_0x1b358e(0x384)](),this[_0x1b358e(0xace)](),this[_0x1b358e(0x685)]();},Window_BattleStatus[_0x4ab18a(0x49d)]['frontviewSpriteY']=function(_0x377067,_0x309a08,_0x4a4c82){const _0x16373d=_0x4ab18a,_0x588b1c=VisuMZ[_0x16373d(0x94c)][_0x16373d(0x3f5)][_0x16373d(0x377)],_0xc6abc1=this[_0x16373d(0xaf0)]();if(_0xc6abc1==='xp'){if('KitKz'!==_0x16373d(0x14c)){const _0x26e620=this[_0x16373d(0x8b7)]['scale']['y'];_0x164749-=(_0x26e620-0x1)*this['height'];}else{const _0x42aeaf=_0x588b1c[_0x16373d(0x94a)];switch(_0x42aeaf[_0x16373d(0x8f8)]()[_0x16373d(0x3a3)]()){case _0x16373d(0x8ef):return _0x4a4c82[_0x16373d(0x428)]-_0x309a08[_0x16373d(0x422)]['height']/0x4;break;case _0x16373d(0x419):const _0x2677c8=_0x588b1c[_0x16373d(0x6a2)];return(_0x4a4c82['height']+(_0x309a08[_0x16373d(0x428)]||_0x2677c8))/0x2;break;case'top':return 0x0;case _0x16373d(0x8ff):default:return this[_0x16373d(0x93a)](_0x4a4c82);break;}}}else{if(_0xc6abc1==='portrait'){}}return _0x309a08[_0x16373d(0x428)];},Window_BattleStatus['prototype'][_0x4ab18a(0x18a)]=function(_0x1d123c){const _0x23286f=_0x4ab18a;if(!VisuMZ[_0x23286f(0x94c)][_0x23286f(0x3f5)][_0x23286f(0x377)][_0x23286f(0x1c3)])return;const _0x394616=this[_0x23286f(0x475)](_0x1d123c),_0x125951=this[_0x23286f(0xe8)](_0x1d123c);_0x125951[_0x23286f(0x999)]=ImageManager[_0x23286f(0x9a0)],_0x125951[_0x23286f(0x428)]-=0x2,this[_0x23286f(0x749)](_0x394616,_0x125951['x']+0x1,_0x125951['y']+0x1,_0x125951[_0x23286f(0x999)],_0x125951[_0x23286f(0x428)]);},Window_BattleStatus['prototype'][_0x4ab18a(0x2dd)]=function(_0x5dbe0c){const _0x193a69=_0x4ab18a,_0x2d6bdf=VisuMZ[_0x193a69(0x94c)][_0x193a69(0x3f5)]['BattleLayout'],_0x523de9=$dataSystem[_0x193a69(0x631)]?0x4:0x3,_0x1d2ffe=_0x523de9*0x80+(_0x523de9-0x1)*0x8+0x4,_0xc1b107=this['actor'](_0x5dbe0c),_0x166ec4=this[_0x193a69(0xe8)](_0x5dbe0c);let _0x755946=_0x166ec4['x']+this[_0x193a69(0x5cf)];if(_0x2d6bdf[_0x193a69(0x1c3)]){if(_0x193a69(0x706)===_0x193a69(0x51b)){if(_0x3ecb84[_0x193a69(0x520)]>_0x488fa5)_0x2e5edb+=_0x221173[_0x193a69(0x999)]/0x2+_0x2e664d;if(_0x4dfbf5[_0x193a69(0x520)]<_0x162654)_0x1a6f57-=_0x11e287['width']/0x2+_0x2da6e7;}else _0x755946=_0x166ec4['x']+ImageManager[_0x193a69(0x9a0)]+0x8;}else _0x755946+=ImageManager['iconWidth'];const _0x30a0ac=Math[_0x193a69(0x1e2)](Math[_0x193a69(0x8f1)](_0x166ec4['x']+_0x166ec4[_0x193a69(0x999)]-_0x1d2ffe,_0x755946)),_0x21a2b2=Math[_0x193a69(0x1e2)](_0x166ec4['y']+(_0x166ec4[_0x193a69(0x428)]-Sprite_Name[_0x193a69(0x49d)][_0x193a69(0x7ec)]())/0x2),_0x1bbb47=Math[_0x193a69(0x1e2)](_0x30a0ac-ImageManager[_0x193a69(0x718)]/0x2-0x4),_0x483ab1=Math[_0x193a69(0x1e2)](_0x166ec4['y']+(_0x166ec4[_0x193a69(0x428)]-ImageManager[_0x193a69(0x485)])/0x2+ImageManager['iconHeight']/0x2);let _0x3de6ff=_0x30a0ac+0x88;const _0x2ba4af=_0x21a2b2;this['placeTimeGauge'](_0xc1b107,_0x30a0ac-0x4+(_0x2d6bdf[_0x193a69(0x3e4)]||0x0),_0x21a2b2+(_0x2d6bdf[_0x193a69(0x756)]||0x0)),this['placeActorName'](_0xc1b107,_0x30a0ac+(_0x2d6bdf['NameOffsetX']||0x0),_0x21a2b2+(_0x2d6bdf[_0x193a69(0x320)]||0x0)),this['placeStateIcon'](_0xc1b107,_0x1bbb47+(_0x2d6bdf[_0x193a69(0x382)]||0x0),_0x483ab1+(_0x2d6bdf[_0x193a69(0xab5)]||0x0)),this['placeGauge'](_0xc1b107,'hp',_0x3de6ff+0x88*0x0+(_0x2d6bdf[_0x193a69(0x165)]||0x0),_0x2ba4af+(_0x2d6bdf[_0x193a69(0x708)]||0x0)),this[_0x193a69(0x4ac)](_0xc1b107,'mp',_0x3de6ff+0x88*0x1+(_0x2d6bdf['MpGaugeOffsetX']||0x0),_0x2ba4af+(_0x2d6bdf[_0x193a69(0x4e3)]||0x0)),$dataSystem[_0x193a69(0x631)]&&this[_0x193a69(0x4ac)](_0xc1b107,'tp',_0x3de6ff+0x88*0x2+(_0x2d6bdf[_0x193a69(0x37f)]||0x0),_0x2ba4af+(_0x2d6bdf[_0x193a69(0xaa9)]||0x0));},Window_BattleStatus[_0x4ab18a(0x49d)]['drawItemImageXPStyle']=function(_0x4781cd){const _0x389ac8=_0x4ab18a;if(!$gameSystem['isSideView']())return;VisuMZ[_0x389ac8(0x94c)][_0x389ac8(0x3f1)][_0x389ac8(0x45b)](this,_0x4781cd);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x621)]=function(_0x5c0706){const _0x13b290=_0x4ab18a,_0x15747a=VisuMZ[_0x13b290(0x94c)][_0x13b290(0x3f5)][_0x13b290(0x377)],_0x4fad60=this['actor'](_0x5c0706),_0x34b25f=this[_0x13b290(0xe8)](_0x5c0706),_0x3c7b72=Math[_0x13b290(0x1e2)](_0x34b25f['x']+(_0x34b25f['width']-0x80)/0x2),_0x2c04e7=this['nameY'](_0x34b25f);let _0x59b086=_0x3c7b72-ImageManager[_0x13b290(0x718)]/0x2-0x4,_0x49b431=_0x2c04e7+ImageManager['iconHeight']/0x2;_0x59b086-ImageManager[_0x13b290(0x718)]/0x2<_0x34b25f['x']&&(_0x59b086=_0x3c7b72+ImageManager['iconWidth']/0x2-0x4,_0x49b431=_0x2c04e7-ImageManager[_0x13b290(0x485)]/0x2);const _0x4a320f=_0x3c7b72,_0x37bddf=this['basicGaugesY'](_0x34b25f);this[_0x13b290(0xa0c)](_0x4fad60,_0x3c7b72+(_0x15747a['TpbGaugeOffsetX']||0x0),_0x2c04e7+(_0x15747a[_0x13b290(0x756)]||0x0)),this[_0x13b290(0x8ed)](_0x4fad60,_0x3c7b72+(_0x15747a[_0x13b290(0x59c)]||0x0),_0x2c04e7+(_0x15747a[_0x13b290(0x320)]||0x0)),this['placeStateIcon'](_0x4fad60,_0x59b086+(_0x15747a[_0x13b290(0x382)]||0x0),_0x49b431+(_0x15747a['StateIconOffsetY']||0x0)),this[_0x13b290(0x4ac)](_0x4fad60,'hp',_0x4a320f+(_0x15747a[_0x13b290(0x165)]||0x0),_0x37bddf+(_0x15747a[_0x13b290(0x708)]||0x0)),this[_0x13b290(0x4ac)](_0x4fad60,'mp',_0x4a320f+(_0x15747a[_0x13b290(0x237)]||0x0),_0x37bddf+this['gaugeLineHeight']()+(_0x15747a[_0x13b290(0x4e3)]||0x0)),$dataSystem[_0x13b290(0x631)]&&this[_0x13b290(0x4ac)](_0x4fad60,'tp',_0x4a320f+(_0x15747a[_0x13b290(0x37f)]||0x0),_0x37bddf+this[_0x13b290(0x16e)]()*0x2+(_0x15747a[_0x13b290(0xaa9)]||0x0));},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x76e)]=function(_0x1ce368){const _0x67f543=_0x4ab18a;if(!VisuMZ[_0x67f543(0x94c)][_0x67f543(0x3f5)][_0x67f543(0x377)]['ShowPortraits'])return![];if(_0x1ce368['getBattlePortrait']())return!![];return Imported[_0x67f543(0x4f3)]&&_0x1ce368[_0x67f543(0xacd)]();},Game_Actor[_0x4ab18a(0x49d)][_0x4ab18a(0x496)]=function(){const _0x40bbeb=_0x4ab18a;if(this[_0x40bbeb(0x475)]()[_0x40bbeb(0x7d0)][_0x40bbeb(0x378)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x40bbeb(0x7d0)][_0x40bbeb(0x378)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4ab18a(0x49d)]['getBattlePortraitOffsetY']=function(){const _0x5ed0f8=_0x4ab18a;if(this['actor']()[_0x5ed0f8(0x7d0)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x5ed0f8(0x475)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x25f)]=function(_0x445dbb){const _0x4e29c1=_0x4ab18a,_0x47549b=this[_0x4e29c1(0x475)](_0x445dbb);if(this[_0x4e29c1(0x76e)](_0x47549b)){const _0x312bbd=_0x4e29c1(0x5e2)[_0x4e29c1(0x278)](_0x47549b['actorId']()),_0x4106f4=this[_0x4e29c1(0x4a3)](_0x312bbd,Sprite),_0x4bc940=_0x47549b[_0x4e29c1(0x917)]();_0x4bc940!==''?_0x4106f4[_0x4e29c1(0x6db)]=ImageManager[_0x4e29c1(0x329)](_0x4bc940):_0x4106f4[_0x4e29c1(0x6db)]=ImageManager[_0x4e29c1(0x85d)];const _0x4723fb=this['itemRect'](_0x445dbb);_0x4106f4[_0x4e29c1(0x8a)]['x']=0.5,_0x4106f4[_0x4e29c1(0x8a)]['y']=0x1;let _0x4239a9=Math[_0x4e29c1(0x1e2)](_0x4723fb['x']+_0x4723fb[_0x4e29c1(0x999)]/0x2)+this[_0x4e29c1(0x5cf)];_0x4239a9+=_0x47549b[_0x4e29c1(0x496)]();let _0x24ac6a=Math[_0x4e29c1(0x1e2)](this[_0x4e29c1(0x428)]);_0x24ac6a+=_0x47549b[_0x4e29c1(0x567)](),_0x4106f4[_0x4e29c1(0x50d)](_0x4239a9,_0x24ac6a);const _0x31e211=VisuMZ[_0x4e29c1(0x94c)][_0x4e29c1(0x3f5)][_0x4e29c1(0x377)][_0x4e29c1(0x7e1)];_0x4106f4[_0x4e29c1(0x443)]['x']=_0x31e211,_0x4106f4['scale']['y']=_0x31e211,_0x4106f4[_0x4e29c1(0x384)]();}else{if(_0x4e29c1(0x5a8)!==_0x4e29c1(0x5a8))_0x227c29[_0x4e29c1(0x94c)]['Scene_Battle_createHelpWindow'][_0x4e29c1(0x45b)](this),this['createHelpWindowBattleCore']();else{const _0x10475d=this[_0x4e29c1(0x19c)](_0x445dbb);this['drawActorFace'](_0x47549b,_0x10475d['x'],_0x10475d['y'],_0x10475d[_0x4e29c1(0x999)],_0x10475d['height']);}}},Window_BattleStatus[_0x4ab18a(0x49d)]['createInnerPortrait']=function(_0x5ddc48,_0x532c69){const _0x13f28a=_0x4ab18a,_0xb97c3b=this[_0x13f28a(0x1a9)];if(_0xb97c3b[_0x5ddc48]){if(_0x13f28a(0x1f6)!==_0x13f28a(0x1f6))_0x960012[_0x13f28a(0x901)](_0x13f28a(0x72a));else return _0xb97c3b[_0x5ddc48];}else{const _0x4cb8d8=new _0x532c69();return _0xb97c3b[_0x5ddc48]=_0x4cb8d8,this[_0x13f28a(0x23b)](_0x4cb8d8),this['addChildToBack'](this['_cursorArea']),_0x4cb8d8;}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x58a)]=function(){const _0x2dfe32=_0x4ab18a;this['_createCursorArea'](),this['_createEffectsContainer'](),Window_StatusBase['prototype']['_createClientArea'][_0x2dfe32(0x45b)](this),this[_0x2dfe32(0x146)]();},Window_BattleStatus[_0x4ab18a(0x49d)]['_createCursorArea']=function(){const _0x39b192=_0x4ab18a;this[_0x39b192(0x4f1)]=new Sprite(),this['_cursorArea'][_0x39b192(0x3e8)]=[new PIXI['filters'][(_0x39b192(0x957))]()],this['_cursorArea'][_0x39b192(0x596)]=new Rectangle(),this[_0x39b192(0x4f1)][_0x39b192(0x50d)](this[_0x39b192(0x721)],this[_0x39b192(0x721)]),this[_0x39b192(0x19a)](this['_cursorArea']);},Window_BattleStatus[_0x4ab18a(0x49d)]['_createEffectsContainer']=function(){const _0x5588ab=_0x4ab18a;this[_0x5588ab(0x14e)]=new Sprite(),this[_0x5588ab(0x19a)](this[_0x5588ab(0x14e)]);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0xace)]=function(){const _0x417ae4=_0x4ab18a;this[_0x417ae4(0x14e)]&&this[_0x417ae4(0x19a)](this['_effectsContainer']);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x146)]=function(){const _0x2ad3e5=_0x4ab18a;this[_0x2ad3e5(0x2a5)]=new Sprite(),this[_0x2ad3e5(0x19a)](this[_0x2ad3e5(0x2a5)]);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x3f4)]=function(){const _0x34c736=_0x4ab18a;this[_0x34c736(0x873)]=new Sprite();for(let _0x407f70=0x0;_0x407f70<0x9;_0x407f70++){this['_cursorSprite']['addChild'](new Sprite());}this['_cursorArea'][_0x34c736(0x19a)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x4ab18a(0x50f)]=function(){const _0x37cb01=_0x4ab18a;Window_StatusBase[_0x37cb01(0x49d)]['_updateClientArea'][_0x37cb01(0x45b)](this),this[_0x37cb01(0xaad)]();},Window_BattleStatus['prototype']['_updateCursorArea']=function(){const _0x14f55f=_0x4ab18a,_0x1ff6a6=this[_0x14f55f(0x721)];this['_cursorArea'][_0x14f55f(0x50d)](_0x1ff6a6,_0x1ff6a6),this[_0x14f55f(0x4f1)]['x']=_0x1ff6a6-this[_0x14f55f(0x9de)]['x'],this[_0x14f55f(0x4f1)]['y']=_0x1ff6a6-this[_0x14f55f(0x9de)]['y'],this[_0x14f55f(0x5f3)]>0x0&&this[_0x14f55f(0xac9)]>0x0?_0x14f55f(0xa79)!==_0x14f55f(0xa79)?this[_0x14f55f(0x448)](_0x14f55f(0x2ad),_0x429423):this['_cursorArea'][_0x14f55f(0x242)]=this[_0x14f55f(0x10e)]():this[_0x14f55f(0x4f1)][_0x14f55f(0x242)]=![];},Window_BattleStatus['prototype'][_0x4ab18a(0x32c)]=function(){const _0x1f9133=_0x4ab18a;Window_StatusBase[_0x1f9133(0x49d)][_0x1f9133(0x32c)][_0x1f9133(0x45b)](this),this[_0x1f9133(0x7f6)]();},Window_BattleStatus['prototype'][_0x4ab18a(0x7f6)]=function(){const _0x53fc83=_0x4ab18a,_0x345ba5=this['_cursorArea'][_0x53fc83(0x670)][_0x53fc83(0x9a8)](new Point(0x0,0x0)),_0x3af5d2=this[_0x53fc83(0x4f1)]['filterArea'];_0x3af5d2['x']=_0x345ba5['x']+this[_0x53fc83(0x9de)]['x'],_0x3af5d2['y']=_0x345ba5['y']+this[_0x53fc83(0x9de)]['y'],_0x3af5d2[_0x53fc83(0x999)]=this[_0x53fc83(0x5f3)],_0x3af5d2['height']=this[_0x53fc83(0xac9)];},Window_BattleStatus[_0x4ab18a(0x49d)]['refreshActorPortrait']=function(_0x46d6ff){const _0x5bb8b6=_0x4ab18a;if(this[_0x5bb8b6(0xaf0)]()!==_0x5bb8b6(0x6b3))return;this[_0x5bb8b6(0x25f)](_0x46d6ff[_0x5bb8b6(0xa34)]());},Window_BattleStatus[_0x4ab18a(0x49d)]['addDamageSprite']=function(_0xd0551,_0x2ba480){const _0xdc16ec=_0x4ab18a;if(!this[_0xdc16ec(0x2a5)])return;if(!_0xd0551)return;if(!_0x2ba480)return;const _0x2ac7bd=this[_0xdc16ec(0xe8)](_0x2ba480[_0xdc16ec(0xa34)]());_0x2ac7bd['x']+=_0x2ac7bd[_0xdc16ec(0x999)]/0x2+this['padding'],_0xd0551['x']=_0x2ac7bd['x'],_0xd0551['y']=_0x2ac7bd['y'],this['_damageContainer']['addChild'](_0xd0551);},Window_BattleStatus['prototype'][_0x4ab18a(0x662)]=function(_0x465fd8){const _0x229de0=_0x4ab18a;if(!this[_0x229de0(0x2a5)])return;if(!_0x465fd8)return;this['_damageContainer'][_0x229de0(0xac7)](_0x465fd8);},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x438)]=function(){const _0x2d28e3=_0x4ab18a;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x2d28e3(0x579)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this[_0x2d28e3(0xa3b)]();},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x6d1)]=function(){const _0x113ac7=_0x4ab18a;if(this[_0x113ac7(0x164)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ['BattleCore'][_0x113ac7(0x3f5)]['BattleLayout'][_0x113ac7(0x819)];},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x296)]=function(){const _0x1a6960=_0x4ab18a;this[_0x1a6960(0x579)]=new Sprite();const _0x33a2d4=SceneManager[_0x1a6960(0xa10)],_0x362b4e=_0x33a2d4[_0x1a6960(0x16b)][_0x1a6960(0x50a)](_0x33a2d4[_0x1a6960(0x52d)]);_0x33a2d4[_0x1a6960(0xa1b)](this['_borderPortraitSprite'],_0x362b4e),this[_0x1a6960(0x579)][_0x1a6960(0x8a)]['x']=0.5,this[_0x1a6960(0x579)][_0x1a6960(0x8a)]['y']=0x1;const _0x2865c4=VisuMZ[_0x1a6960(0x94c)][_0x1a6960(0x3f5)][_0x1a6960(0x377)][_0x1a6960(0x7ef)];this[_0x1a6960(0x579)][_0x1a6960(0x443)]['x']=_0x2865c4,this['_borderPortraitSprite'][_0x1a6960(0x443)]['y']=_0x2865c4,this[_0x1a6960(0x579)]['y']=this['y']+this[_0x1a6960(0x428)],this[_0x1a6960(0x9b0)]=0x0;},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0xa2c)]=function(){const _0x264cc9=_0x4ab18a;this['_borderPortraitSprite'][_0x264cc9(0x242)]=BattleManager[_0x264cc9(0x3bb)]();const _0x2ac745=BattleManager['actor']();if(_0x2ac745===this[_0x264cc9(0x579)][_0x264cc9(0x475)])return;this[_0x264cc9(0x579)][_0x264cc9(0x475)]=_0x2ac745||this['_borderPortraitSprite'][_0x264cc9(0x475)];if(!_0x2ac745){if('fmThK'===_0x264cc9(0x371))return;else _0x277fdf=this[_0x264cc9(0x30f)]()[_0x264cc9(0x6ad)]||0x0;}else{if(_0x2ac745[_0x264cc9(0x917)]()===''){this['_borderPortraitSprite'][_0x264cc9(0x6db)]=ImageManager['_emptyBitmap'];return;}else{if('wvyIx'!=='wvyIx'){if(!this[_0x264cc9(0x14f)]())return![];return _0x473699[_0x264cc9(0x94c)][_0x264cc9(0x75d)][_0x264cc9(0x45b)](this);}else{const _0x5483b7=ImageManager[_0x264cc9(0x329)](_0x2ac745[_0x264cc9(0x917)]());_0x5483b7[_0x264cc9(0x65c)](this[_0x264cc9(0x330)][_0x264cc9(0xae2)](this,_0x5483b7));}}}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x330)]=function(_0x216d3f){const _0x3822b6=_0x4ab18a;this[_0x3822b6(0x9b0)]=0x14,this[_0x3822b6(0x579)][_0x3822b6(0x6db)]=_0x216d3f;SceneManager['_scene'][_0x3822b6(0x85f)]()?_0x3822b6(0x2ce)===_0x3822b6(0x2ce)?(this[_0x3822b6(0x579)]['x']=0x0,this[_0x3822b6(0x92c)]=Math[_0x3822b6(0x3c2)](_0x216d3f[_0x3822b6(0x999)]/0x2)):this[_0x3822b6(0x14e)]&&this[_0x3822b6(0x19a)](this[_0x3822b6(0x14e)]):(this[_0x3822b6(0x579)]['x']=this['width'],this[_0x3822b6(0x92c)]=this[_0x3822b6(0x999)]*0x3/0x4);this[_0x3822b6(0x579)]['opacity']=0x0,this[_0x3822b6(0x579)]['y']=this['y']+this[_0x3822b6(0x428)];const _0x363146=BattleManager[_0x3822b6(0x475)]();_0x363146&&(this[_0x3822b6(0x92c)]+=_0x363146[_0x3822b6(0x496)](),this['_borderPortraitSprite']['y']+=_0x363146[_0x3822b6(0x567)]());},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0xa3b)]=function(){const _0x10ff8c=_0x4ab18a;if(this[_0x10ff8c(0x9b0)]>0x0){if(_0x10ff8c(0xa44)===_0x10ff8c(0x64c))this[_0x10ff8c(0x686)][_0x10ff8c(0x448)](_0x4bc50e);else{const _0x3d211f=this[_0x10ff8c(0x9b0)],_0x5dd927=this[_0x10ff8c(0x579)];_0x5dd927['x']=(_0x5dd927['x']*(_0x3d211f-0x1)+this[_0x10ff8c(0x92c)])/_0x3d211f,_0x5dd927[_0x10ff8c(0x43a)]=(_0x5dd927[_0x10ff8c(0x43a)]*(_0x3d211f-0x1)+0xff)/_0x3d211f,this[_0x10ff8c(0x9b0)]--;}}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x1d3)]=function(){const _0x16a61c=_0x4ab18a;return;this[_0x16a61c(0x14e)]&&(this[_0x16a61c(0x14e)]['x']=this['x'],this[_0x16a61c(0x14e)]['y']=this['y']);if(this[_0x16a61c(0x2a5)]){if(_0x16a61c(0x2e9)===_0x16a61c(0x51e)){const _0x44861b=_0x13839b[_0x16a61c(0x6e6)](_0x26ae54);_0x44861b['missed']=![],_0x44861b['evaded']=![],_0x44861b[_0x16a61c(0xed)]=![],this[_0x16a61c(0x51a)][_0x16a61c(0x448)](_0x44861b);}else this[_0x16a61c(0x2a5)]['x']=this['x'],this['_damageContainer']['y']=this['y'];}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x7f0)]=function(){const _0x390548=_0x4ab18a,_0x4988fb=VisuMZ[_0x390548(0x94c)][_0x390548(0x3f5)][_0x390548(0x377)];if(_0x4988fb[_0x390548(0x36a)]){if(_0x390548(0x984)===_0x390548(0x9f5)){if(!_0x4d2d75['value'](_0x4bbbce))return!![];}else{const _0x1332e3=new Sprite();_0x1332e3['bitmap']=ImageManager['loadSystem'](_0x4988fb['StatusWindowAttachmentBack']),_0x1332e3['x']=_0x4988fb[_0x390548(0x9bd)]||0x0,_0x1332e3['y']=_0x4988fb[_0x390548(0x69d)]||0x0,this['addChildToBack'](_0x1332e3),this[_0x390548(0x728)]=_0x1332e3;}}if(_0x4988fb[_0x390548(0x45e)]){if(_0x390548(0x3d5)!==_0x390548(0x1a2)){const _0xef9c7d=new Sprite();_0xef9c7d[_0x390548(0x6db)]=ImageManager[_0x390548(0xac4)](_0x4988fb['StatusWindowAttachmentFront']),_0xef9c7d['x']=_0x4988fb['StatusWindowAttachmentFrontOffsetX']||0x0,_0xef9c7d['y']=_0x4988fb[_0x390548(0x73d)]||0x0,this[_0x390548(0x19a)](_0xef9c7d),this[_0x390548(0x534)]=_0xef9c7d;}else return this[_0x390548(0x8b7)]||this[_0x390548(0x610)]||this;}},Window_BattleStatus[_0x4ab18a(0x49d)][_0x4ab18a(0x685)]=function(){const _0xb30e37=_0x4ab18a;if(this[_0xb30e37(0x534)]){if('AVGeA'!==_0xb30e37(0x6f5))this[_0xb30e37(0x19a)](this[_0xb30e37(0x534)]);else{const _0x16b404=this[_0xb30e37(0xaf0)]();['xp',_0xb30e37(0x6b3),'border'][_0xb30e37(0xb2)](_0x16b404)&&this[_0xb30e37(0x813)][_0xb30e37(0x9ee)](),(_0x16b404===_0xb30e37(0x1a7)||this['isSkillItemWindowsMiddle']())&&(this[_0xb30e37(0x7cb)][_0xb30e37(0x9ee)](),this[_0xb30e37(0x3d2)][_0xb30e37(0x9ee)]());}}this[_0xb30e37(0x728)]&&this[_0xb30e37(0x23b)](this[_0xb30e37(0x728)]);},Window_BattleActor[_0x4ab18a(0x49d)]['isOkEnabled']=function(){const _0x54fd79=_0x4ab18a;return Window_BattleStatus[_0x54fd79(0x49d)]['isOkEnabled'][_0x54fd79(0x45b)](this)&&this[_0x54fd79(0xa02)]();},Window_BattleActor['prototype'][_0x4ab18a(0xa02)]=function(){const _0x516743=_0x4ab18a,_0x768257=BattleManager[_0x516743(0x83e)](),_0x9dd2af=this[_0x516743(0x475)](this[_0x516743(0xa34)]());if(!_0x768257)return!![];if(!_0x768257[_0x516743(0x925)]())return!![];const _0x57f0a0=_0x768257[_0x516743(0x925)]()['note'];if(_0x57f0a0['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x516743(0x292)===_0x516743(0x292)){if(_0x9dd2af===BattleManager[_0x516743(0x475)]())return![];}else this[_0x516743(0x448)](_0x516743(0x39c),this[_0x516743(0x588)](_0xf6e9f4));}return!![];},VisuMZ[_0x4ab18a(0x94c)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)],Window_BattleEnemy['prototype'][_0x4ab18a(0x9ed)]=function(_0x4fa983){const _0x1b8bff=_0x4ab18a;this[_0x1b8bff(0xac2)]=null,VisuMZ[_0x1b8bff(0x94c)][_0x1b8bff(0x98b)][_0x1b8bff(0x45b)](this,_0x4fa983);},Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x5b3)]=function(){const _0x36c73c=_0x4ab18a;return this[_0x36c73c(0x375)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x7e8)]=Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x384)],Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x384)]=function(){const _0x438840=_0x4ab18a;VisuMZ[_0x438840(0x94c)][_0x438840(0x7e8)][_0x438840(0x45b)](this),this['y']=Graphics[_0x438840(0x428)]*0xa;},Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x474)]=function(){const _0x5bf5c7=_0x4ab18a;return $gameTroop[_0x5bf5c7(0x8bd)]()[_0x5bf5c7(0x2e2)](0x0);},Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x5ea)]=function(){const _0x234f90=_0x4ab18a;this['_enemies']=this[_0x234f90(0x474)](),this[_0x234f90(0x223)](),Window_Selectable[_0x234f90(0x49d)][_0x234f90(0x5ea)][_0x234f90(0x45b)](this);},Window_BattleEnemy['prototype'][_0x4ab18a(0x223)]=function(){const _0x33ab40=_0x4ab18a;this['_enemies']['sort']((_0x4be25f,_0x3a4152)=>{const _0x4b8eae=_0x5ab4;if(_0x4be25f['battler']()[_0x4b8eae(0x520)]===_0x3a4152['battler']()[_0x4b8eae(0x520)])return _0x4be25f['battler']()[_0x4b8eae(0x5e7)]-_0x3a4152['battler']()[_0x4b8eae(0x5e7)];else{if(_0x4b8eae(0xa72)!==_0x4b8eae(0x3c3))return _0x4be25f[_0x4b8eae(0x173)]()[_0x4b8eae(0x520)]-_0x3a4152[_0x4b8eae(0x173)]()[_0x4b8eae(0x520)];else{_0x59b288[_0x4b8eae(0x49d)][_0x4b8eae(0xa23)][_0x4b8eae(0x45b)](this,_0x328cbc);if(this[_0x4b8eae(0x394)]())this[_0x4b8eae(0x885)](_0x3e9a6e);}}}),SceneManager[_0x33ab40(0x313)]()&&this[_0x33ab40(0x1dd)][_0x33ab40(0x255)]();},Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x61d)]=function(){const _0x57ed32=_0x4ab18a,_0x3e12db=VisuMZ[_0x57ed32(0x94c)][_0x57ed32(0x3f5)]['Enemy'];if(_0x3e12db[_0x57ed32(0xa36)]){if(_0x57ed32(0x27d)===_0x57ed32(0x3db)){if(this[_0x57ed32(0x8de)][_0x57ed32(0xa3d)]!==_0x31539e)return this['_cache']['svAnchorY'];return this[_0x57ed32(0x475)]()[_0x57ed32(0x7d0)][_0x57ed32(0x378)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x57ed32(0x8de)][_0x57ed32(0x217)]=_0x21b556(_0x40d4fb['$1']),this['_cache']['svAnchorY']=_0x34879e(_0x5cbfa7['$2'])):this[_0x57ed32(0x8de)]['svAnchorY']=_0x16ff44['prototype'][_0x57ed32(0x19e)][_0x57ed32(0x45b)](this),this[_0x57ed32(0x8de)][_0x57ed32(0xa3d)];}else this['autoSelectLastSelected']();}else _0x57ed32(0xa8a)!==_0x57ed32(0xa8a)?_0x1042cd[_0x57ed32(0x668)]([_0x1b16f6]):this['autoSelectPriority']();},Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x294)]=function(){const _0x23271f=_0x4ab18a;if(this[_0x23271f(0xac2)]&&this['_enemies']['includes'](this[_0x23271f(0xac2)])){const _0x38771f=this['_enemies']['indexOf'](this['_lastEnemy']);this[_0x23271f(0x786)](_0x38771f);}else{if(_0x23271f(0x457)!==_0x23271f(0x89a))this[_0x23271f(0x4c7)]();else{if(!this[_0x23271f(0x170)]())return;if(!this['_distortionSprite'])return;if(this[_0x23271f(0x90)]===_0x43d1bf)return;this[_0x23271f(0x90)]=_0x2ddb81,this['_angleDuration']=_0x281726,this['_angleWholeDuration']=_0x454482,this[_0x23271f(0x879)]=_0x38d42a||_0x23271f(0xfb),this[_0x23271f(0x276)]=_0x2c8725,this[_0x23271f(0x276)]===_0xa0afad&&(this[_0x23271f(0x276)]=!![]),_0x41306a<=0x0&&(this['_currentAngle']=_0x25c0ca,this[_0x23271f(0x276)]&&(this[_0x23271f(0x90)]=0x0,this['_currentAngle']=0x0));}}},Window_BattleEnemy['prototype'][_0x4ab18a(0x4c7)]=function(){const _0x252c2c=_0x4ab18a,_0x207a2a=VisuMZ[_0x252c2c(0x94c)][_0x252c2c(0x3f5)][_0x252c2c(0x582)];let _0x14bda3=![];$gameSystem[_0x252c2c(0x332)]()?_0x14bda3=_0x207a2a[_0x252c2c(0xa8e)]:_0x14bda3=_0x207a2a[_0x252c2c(0x3b5)],this[_0x252c2c(0x786)](_0x14bda3?this[_0x252c2c(0x375)]()-0x1:0x0);},Window_BattleEnemy[_0x4ab18a(0x49d)][_0x4ab18a(0x2b6)]=function(){const _0x5f186b=_0x4ab18a;Window_Selectable[_0x5f186b(0x49d)][_0x5f186b(0x2b6)][_0x5f186b(0x45b)](this),this['_lastEnemy']=this[_0x5f186b(0x637)]();},Window_BattleItem[_0x4ab18a(0x49d)]['includes']=function(_0x3fa341){const _0x2fdefc=_0x4ab18a;if(!_0x3fa341)return![];return _0x3fa341[_0x2fdefc(0x484)]===0x0||_0x3fa341[_0x2fdefc(0x484)]===0x1;};function Window_AutoBattleCancel(){const _0x391efc=_0x4ab18a;this[_0x391efc(0x9ed)](...arguments);}Window_AutoBattleCancel[_0x4ab18a(0x49d)]=Object[_0x4ab18a(0x74c)](Window_Base['prototype']),Window_AutoBattleCancel[_0x4ab18a(0x49d)][_0x4ab18a(0x164)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4ab18a(0x49d)]['initialize']=function(_0x5648b4){const _0x436645=_0x4ab18a;Window_Base[_0x436645(0x49d)][_0x436645(0x9ed)][_0x436645(0x45b)](this,_0x5648b4),this[_0x436645(0x8d6)](this[_0x436645(0x807)]()),this[_0x436645(0x5ea)]();},Window_AutoBattleCancel[_0x4ab18a(0x49d)]['bgType']=function(){const _0x3a50a5=_0x4ab18a;return VisuMZ['BattleCore'][_0x3a50a5(0x3f5)][_0x3a50a5(0x581)][_0x3a50a5(0xa71)];},Window_AutoBattleCancel['prototype'][_0x4ab18a(0x5ea)]=function(){const _0x2895c5=_0x4ab18a;this[_0x2895c5(0x46a)]['clear']();const _0x485c0b=VisuMZ[_0x2895c5(0x94c)][_0x2895c5(0x3f5)][_0x2895c5(0x581)][_0x2895c5(0x1fe)],_0x244a7a=_0x485c0b[_0x2895c5(0x278)](this['okButtonText'](),this[_0x2895c5(0x14d)]()),_0x3e9dc9=this[_0x2895c5(0x3a1)](_0x244a7a)[_0x2895c5(0x999)],_0x52568e=Math['floor']((this[_0x2895c5(0x5f3)]-_0x3e9dc9)/0x2);this['drawTextEx'](_0x244a7a,_0x52568e,0x0,_0x3e9dc9);},Window_AutoBattleCancel[_0x4ab18a(0x49d)][_0x4ab18a(0x828)]=function(){const _0x287cb7=_0x4ab18a;return Imported[_0x287cb7(0x1fc)]?TextManager[_0x287cb7(0xa43)]('ok'):VisuMZ[_0x287cb7(0x94c)][_0x287cb7(0x3f5)][_0x287cb7(0x581)][_0x287cb7(0x3d3)];},Window_AutoBattleCancel['prototype']['cancelButtonText']=function(){const _0x3ef403=_0x4ab18a;return Imported[_0x3ef403(0x1fc)]?TextManager['getInputButtonString'](_0x3ef403(0x506)):VisuMZ[_0x3ef403(0x94c)][_0x3ef403(0x3f5)]['AutoBattle'][_0x3ef403(0x48e)];},Window_AutoBattleCancel[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)]=function(){const _0x5dd6d7=_0x4ab18a;Window_Base[_0x5dd6d7(0x49d)][_0x5dd6d7(0x43d)]['call'](this),this[_0x5dd6d7(0x8f3)](),this[_0x5dd6d7(0xaac)]();},Window_AutoBattleCancel['prototype'][_0x4ab18a(0x8f3)]=function(){const _0x1bc13f=_0x4ab18a;this[_0x1bc13f(0x242)]=BattleManager[_0x1bc13f(0x5cc)];},Window_AutoBattleCancel[_0x4ab18a(0x49d)]['updateCancel']=function(){const _0x1e820a=_0x4ab18a;if(!BattleManager['_autoBattle'])return;(Input[_0x1e820a(0x80e)]('ok')||Input[_0x1e820a(0x80e)](_0x1e820a(0x506))||TouchInput[_0x1e820a(0x342)]()||TouchInput[_0x1e820a(0x565)]())&&(_0x1e820a(0x7d8)!==_0x1e820a(0x7d8)?(this[_0x1e820a(0xa48)]=_0x1e906f,this['_mainSprite'][_0x1e820a(0x6db)]=_0x558366[_0x1e820a(0x442)](_0x587e09)):(SoundManager[_0x1e820a(0x99a)](),BattleManager[_0x1e820a(0x5cc)]=![],Input[_0x1e820a(0x7e0)](),TouchInput['clear']()));};function _0x5ab4(_0x4441ea,_0x4e082e){const _0x5edba2=_0x5edb();return _0x5ab4=function(_0x5ab4d8,_0x10d086){_0x5ab4d8=_0x5ab4d8-0x84;let _0x4cb398=_0x5edba2[_0x5ab4d8];return _0x4cb398;},_0x5ab4(_0x4441ea,_0x4e082e);}function Window_EnemyName(){const _0x243a16=_0x4ab18a;this[_0x243a16(0x9ed)](...arguments);}Window_EnemyName[_0x4ab18a(0x49d)]=Object[_0x4ab18a(0x74c)](Window_StatusBase[_0x4ab18a(0x49d)]),Window_EnemyName[_0x4ab18a(0x49d)]['constructor']=Window_EnemyName,Window_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x9ed)]=function(_0x323d74){const _0x2f0101=_0x4ab18a;this[_0x2f0101(0xba)]=_0x323d74,this[_0x2f0101(0x4f4)]='';const _0xdef31b=new Rectangle(0x0,0x0,Graphics[_0x2f0101(0x958)],this[_0x2f0101(0x6fe)]()*0x4);Window_StatusBase[_0x2f0101(0x49d)][_0x2f0101(0x9ed)]['call'](this,_0xdef31b),this[_0x2f0101(0x8d6)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype'][_0x4ab18a(0x1d1)]=function(){this['padding']=0x0;},Window_EnemyName['prototype'][_0x4ab18a(0x637)]=function(){const _0x1c9ef3=_0x4ab18a;return $gameTroop[_0x1c9ef3(0x533)]()[this[_0x1c9ef3(0xba)]];},Window_EnemyName['prototype'][_0x4ab18a(0x43d)]=function(){const _0xaf8853=_0x4ab18a;Window_StatusBase[_0xaf8853(0x49d)][_0xaf8853(0x43d)][_0xaf8853(0x45b)](this),this[_0xaf8853(0x637)]()&&this[_0xaf8853(0x637)]()[_0xaf8853(0x8ff)]()!==this[_0xaf8853(0x4f4)]&&(this['_text']=this[_0xaf8853(0x637)]()[_0xaf8853(0x8ff)](),this[_0xaf8853(0x5ea)]()),this[_0xaf8853(0x6f8)](),this['updatePosition']();},Window_EnemyName[_0x4ab18a(0x49d)][_0x4ab18a(0x6f8)]=function(){const _0x105a99=_0x4ab18a;if(!this['enemy']()){if(_0x105a99(0x143)!==_0x105a99(0x143)){const _0x11dd22=_0x2e8ec7(_0x3f19f0['$1'])[_0x105a99(0x9e7)](/[\r\n]+/)[_0x105a99(0x8d3)]('');_0x239e3e[_0x105a99(0x8ff)]=_0x130822['processRandomizedData'](_0x11dd22);}else{if(this[_0x105a99(0x617)]>0x0)this[_0x105a99(0x617)]-=0x10;}}else{if(this[_0x105a99(0x637)]()['isDead']()){if('ZFvYH'===_0x105a99(0x3fa)){if(this[_0x105a99(0x617)]>0x0)this[_0x105a99(0x617)]-=0x10;}else return this[_0x105a99(0xf2)](_0x449ca1);}else{if(SceneManager[_0x105a99(0xa10)][_0x105a99(0x465)]&&SceneManager[_0x105a99(0xa10)][_0x105a99(0x465)][_0x105a99(0x190)]&&SceneManager[_0x105a99(0xa10)][_0x105a99(0x465)][_0x105a99(0x1dd)][_0x105a99(0xb2)](this[_0x105a99(0x637)]())){if(this[_0x105a99(0x617)]<0xff)this[_0x105a99(0x617)]+=0x10;}else this[_0x105a99(0x617)]>0x0&&(this[_0x105a99(0x617)]-=0x10);}}},Window_EnemyName['prototype']['updatePosition']=function(){const _0x2b1b6e=_0x4ab18a;if(!this[_0x2b1b6e(0x637)]())return;if(SceneManager['isBattleFlipped']()){if('yrSRF'!=='yrSRF')return _0x3a889b[_0x2b1b6e(0x94c)][_0x2b1b6e(0x507)][_0x2b1b6e(0x45b)](this);else this['x']=Graphics[_0x2b1b6e(0x958)]-this[_0x2b1b6e(0x637)]()[_0x2b1b6e(0x173)]()[_0x2b1b6e(0x520)];}else this['x']=this['enemy']()[_0x2b1b6e(0x173)]()[_0x2b1b6e(0x520)];this['x']-=Math[_0x2b1b6e(0x1e2)](this[_0x2b1b6e(0x999)]/0x2),this['y']=this[_0x2b1b6e(0x637)]()['battler']()[_0x2b1b6e(0x5e7)]-Math[_0x2b1b6e(0x1e2)](this['lineHeight']()*1.5);const _0x2f0e53=VisuMZ[_0x2b1b6e(0x94c)][_0x2b1b6e(0x3f5)][_0x2b1b6e(0x582)];this['x']+=_0x2f0e53[_0x2b1b6e(0x59c)]||0x0,this['y']+=_0x2f0e53['NameOffsetY']||0x0;},Window_EnemyName['prototype'][_0x4ab18a(0x834)]=function(){const _0x1cffe2=_0x4ab18a;Window_Base[_0x1cffe2(0x49d)][_0x1cffe2(0x834)][_0x1cffe2(0x45b)](this),this[_0x1cffe2(0x46a)]['fontSize']=VisuMZ[_0x1cffe2(0x94c)][_0x1cffe2(0x3f5)][_0x1cffe2(0x582)][_0x1cffe2(0x783)];},Window_EnemyName['prototype'][_0x4ab18a(0x5ea)]=function(){const _0x57cb6d=_0x4ab18a;Window_StatusBase[_0x57cb6d(0x49d)]['refresh'][_0x57cb6d(0x45b)](this),this[_0x57cb6d(0x46a)]['clear']();if(!this[_0x57cb6d(0x637)]())return;this[_0x57cb6d(0x482)]();},Window_EnemyName['prototype'][_0x4ab18a(0x482)]=function(){const _0x344b15=_0x4ab18a;this['_text']=this[_0x344b15(0x637)]()[_0x344b15(0x8ff)]();const _0x3d0756=this[_0x344b15(0x3a1)](this[_0x344b15(0x4f4)])[_0x344b15(0x999)],_0x1f9c3f=Math[_0x344b15(0x1e2)]((this[_0x344b15(0x5f3)]-_0x3d0756)/0x2);this[_0x344b15(0x82c)](this[_0x344b15(0x4f4)],_0x1f9c3f,0x0,_0x3d0756+0x8);},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x1b2)]=function(){const _0x451bd1=_0x4ab18a;return VisuMZ['BattleCore'][_0x451bd1(0x3f5)][_0x451bd1(0x719)][_0x451bd1(0x874)];},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x6c4)]=function(){const _0xfbb78a=_0x4ab18a;return VisuMZ[_0xfbb78a(0x94c)]['Settings'][_0xfbb78a(0x719)]['MessageWait'];},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x590)]=function(){const _0x42bd58=_0x4ab18a;return VisuMZ['BattleCore'][_0x42bd58(0x3f5)]['BattleLog'][_0x42bd58(0x66f)];},Window_BattleLog[_0x4ab18a(0x49d)]['isFastForward']=function(){return![];},Window_BattleLog[_0x4ab18a(0x49d)]['actionEffect']=function(_0x4ac562,_0x86c509){const _0x343303=_0x4ab18a;this[_0x343303(0x9ce)]('actionSplicePoint'),BattleManager[_0x343303(0x91f)](_0x4ac562,_0x86c509),this[_0x343303(0x61b)]();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x300)]=function(){const _0x47f79a=_0x4ab18a;this[_0x47f79a(0x61b)]();},Window_BattleLog[_0x4ab18a(0x49d)]['push']=function(_0x144a4d){const _0x464cec=_0x4ab18a,_0x4080f0=Array['prototype'][_0x464cec(0x2e2)][_0x464cec(0x45b)](arguments,0x1),_0xe0f997={'name':_0x144a4d,'params':_0x4080f0},_0x295dbd=this[_0x464cec(0x686)][_0x464cec(0x71a)](_0x4a187a=>_0x4a187a[_0x464cec(0x8ff)])['indexOf'](_0x464cec(0x300));_0x295dbd>=0x0?this[_0x464cec(0x686)][_0x464cec(0x6e3)](_0x295dbd,0x0,_0xe0f997):this[_0x464cec(0x686)]['push'](_0xe0f997);},Window_BattleLog['prototype'][_0x4ab18a(0x9ce)]=function(_0x23020d){const _0x1f3df3=_0x4ab18a,_0x1ab651=Array[_0x1f3df3(0x49d)]['slice']['call'](arguments,0x1);this[_0x1f3df3(0x686)][_0x1f3df3(0x9ce)]({'name':_0x23020d,'params':_0x1ab651});},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x1c2)]=function(){const _0x4d6f0d=_0x4ab18a;if(!$gameTemp[_0x4d6f0d(0x31a)]())return;console['log'](this['_methods'][_0x4d6f0d(0x71a)](_0x54f143=>_0x54f143['name'])[_0x4d6f0d(0x9bf)]('\x0a'));},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x8ca)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x5ea)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x5ea)]=function(){const _0x55384c=_0x4ab18a;this[_0x55384c(0x5d6)]=!![];},VisuMZ['BattleCore']['Window_BattleLog_update']=Window_BattleLog['prototype'][_0x4ab18a(0x43d)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x43d)]=function(){const _0x3442c3=_0x4ab18a;VisuMZ[_0x3442c3(0x94c)][_0x3442c3(0x732)][_0x3442c3(0x45b)](this);if(this[_0x3442c3(0x5d6)])this['processRefresh']();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x96d)]=function(){const _0x91c256=_0x4ab18a;this[_0x91c256(0x5d6)]=![],VisuMZ[_0x91c256(0x94c)][_0x91c256(0x8ca)][_0x91c256(0x45b)](this);},Window_BattleLog[_0x4ab18a(0x49d)]['drawLineText']=function(_0x4f4979){const _0x3a6be8=_0x4ab18a;let _0x19c57a=VisuMZ['BattleCore']['Settings']['BattleLog'][_0x3a6be8(0x161)][_0x3a6be8(0x8f8)]()[_0x3a6be8(0x3a3)](),_0x300bdd=this[_0x3a6be8(0x4e6)][_0x4f4979];if(_0x300bdd[_0x3a6be8(0x378)](/<LEFT>/i))_0x19c57a=_0x3a6be8(0x657);else{if(_0x300bdd[_0x3a6be8(0x378)](/<CENTER>/i))_0x19c57a=_0x3a6be8(0x419);else _0x300bdd['match'](/<RIGHT>/i)&&(_0x19c57a='right');}_0x300bdd=_0x300bdd[_0x3a6be8(0x277)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x300bdd=_0x300bdd[_0x3a6be8(0x277)](/\\I\[0\]/gi,'');const _0x14b8d9=this[_0x3a6be8(0x812)](_0x4f4979);this[_0x3a6be8(0x46a)][_0x3a6be8(0x24f)](_0x14b8d9['x'],_0x14b8d9['y'],_0x14b8d9['width'],_0x14b8d9[_0x3a6be8(0x428)]);const _0xc06444=this['textSizeEx'](_0x300bdd)['width'];let _0x2249d7=_0x14b8d9['x'];if(_0x19c57a==='center'){if(_0x3a6be8(0x992)===_0x3a6be8(0x62b))return _0x424d46[_0x3a6be8(0x8ff)];else _0x2249d7+=(_0x14b8d9[_0x3a6be8(0x999)]-_0xc06444)/0x2;}else{if(_0x19c57a===_0x3a6be8(0x23c)){if(_0x3a6be8(0x28f)!==_0x3a6be8(0x67f))_0x2249d7+=_0x14b8d9['width']-_0xc06444;else return _0xd77068[_0x3a6be8(0x94c)]['Sprite_Battleback_adjustPosition']['call'](this);}}this[_0x3a6be8(0x82c)](_0x300bdd,_0x2249d7,_0x14b8d9['y'],_0xc06444+0x8);},Window_BattleLog[_0x4ab18a(0x49d)]['addText']=function(_0x21c600){const _0x2efc69=_0x4ab18a;this['_lines'][_0x2efc69(0x448)](_0x21c600),this[_0x2efc69(0x5ea)](),this['callNextMethod']();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x97)]=function(){const _0x32ac77=_0x4ab18a;let _0x497a94=![];switch(this[_0x32ac77(0x2d7)]){case'effect':_0x497a94=this[_0x32ac77(0x6f4)]['isEffecting']();break;case'movement':_0x497a94=this['_spriteset'][_0x32ac77(0xae5)]();break;case _0x32ac77(0x740):_0x497a94=this[_0x32ac77(0x6f4)][_0x32ac77(0x63f)]();break;case _0x32ac77(0x9ac):_0x497a94=this['_spriteset'][_0x32ac77(0x1cf)]();break;case _0x32ac77(0x5d0):_0x497a94=this[_0x32ac77(0x6f4)][_0x32ac77(0x86e)]();break;case'opacity':_0x497a94=this['_spriteset'][_0x32ac77(0x987)]();break;}if(!_0x497a94){if(_0x32ac77(0x73a)!=='MuYWo')return!![];else this['_waitMode']='';}return _0x497a94;},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x70a)]=function(){const _0x221a12=_0x4ab18a;this['setWaitMode'](_0x221a12(0x740));},Window_BattleLog['prototype'][_0x4ab18a(0x445)]=function(){const _0x534590=_0x4ab18a;this['setWaitMode'](_0x534590(0x9ac));},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa1)]=function(){const _0x24e03e=_0x4ab18a;this[_0x24e03e(0x37d)](_0x24e03e(0x5d0));},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x7be)]=function(){this['setWaitMode']('opacity');},Window_BattleLog['prototype'][_0x4ab18a(0xd7)]=function(){const _0xac17c8=_0x4ab18a,_0x3ea315=VisuMZ[_0xac17c8(0x94c)][_0xac17c8(0x3f5)]['BattleLog'];if(!_0x3ea315[_0xac17c8(0x9a7)])return;this['push'](_0xac17c8(0x39c),_0x3ea315['StartTurnMsg']['format']($gameTroop[_0xac17c8(0x326)]())),this[_0xac17c8(0x448)]('waitCount',_0x3ea315[_0xac17c8(0x492)]),this['push'](_0xac17c8(0x7e0));},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x553)]=function(_0xdea3c2,_0x14cbf9,_0x1d3c19){const _0x13b879=_0x4ab18a;if(this[_0x13b879(0x3e5)](_0x14cbf9))BattleManager[_0x13b879(0x18d)]();else{if(_0x13b879(0x67b)!==_0x13b879(0x2a9))this[_0x13b879(0x328)](_0xdea3c2,_0x14cbf9,_0x1d3c19);else{if(!_0x4dc9d5['isSceneBattle']())return;if(!_0x523612[_0x13b879(0x847)])return;const _0x37eed8=_0x2ef813[_0x13b879(0x605)];if(!_0x37eed8)return;_0x37eed8['_battleCoreNoElement']=!![];}}},Window_BattleLog[_0x4ab18a(0x49d)]['isCustomActionSequence']=function(_0x2a3929){const _0x8b687=_0x4ab18a;if(!SceneManager[_0x8b687(0xae)]())return![];if(!_0x2a3929)return![];if(!_0x2a3929[_0x8b687(0x925)]())return![];if(_0x2a3929['item']()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x8b687(0x430)](_0x2a3929['item']()))return!![];return![];},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x328)]=function(_0x358019,_0x3994c7,_0x35f5d4){const _0x29ee85=_0x4ab18a,_0x42ad76=_0x3994c7['item']();this[_0x29ee85(0xf3)](_0x358019,_0x3994c7,_0x35f5d4),this[_0x29ee85(0x552)](_0x358019,_0x3994c7,_0x35f5d4),this['finishActionSet'](_0x358019,_0x3994c7,_0x35f5d4);},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x80d)]=function(_0xed2cfa,_0x589ac0){const _0x435945=_0x4ab18a,_0x201ddf=VisuMZ['BattleCore'][_0x435945(0x3f5)]['BattleLog'];_0x201ddf[_0x435945(0x900)]&&this[_0x435945(0x448)](_0x435945(0x39c),_0x435945(0x449)['format'](DataManager[_0x435945(0x77f)](_0x589ac0)));if(DataManager[_0x435945(0x5c4)](_0x589ac0)){if(_0x435945(0x3ae)===_0x435945(0x3ae)){if(_0x201ddf[_0x435945(0x62a)])this[_0x435945(0x8dd)](_0x589ac0[_0x435945(0x8fc)],_0xed2cfa,_0x589ac0);if(_0x201ddf[_0x435945(0xa50)])this[_0x435945(0x8dd)](_0x589ac0[_0x435945(0x597)],_0xed2cfa,_0x589ac0);}else this[_0x435945(0x448)](_0x435945(0xad),_0x55c969);}else{if(_0x435945(0x2d0)!=='XypfJ'){if(_0x201ddf['ActionItemMsg'])this[_0x435945(0x8dd)](TextManager[_0x435945(0x1bb)],_0xed2cfa,_0x589ac0);}else this[_0x435945(0x5d6)]=!![];}},Window_BattleLog[_0x4ab18a(0x49d)]['setupActionSet']=function(_0x2f2dfd,_0x305154,_0x41119b){const _0x16fdf3=_0x4ab18a,_0x26b87b=_0x305154[_0x16fdf3(0x925)]();this[_0x16fdf3(0x80d)](_0x2f2dfd,_0x26b87b),this[_0x16fdf3(0x448)](_0x16fdf3(0x252),_0x2f2dfd,_0x41119b,!![]),this[_0x16fdf3(0x448)](_0x16fdf3(0x21d),_0x2f2dfd,_0x305154),this[_0x16fdf3(0x448)](_0x16fdf3(0x259)),this[_0x16fdf3(0x448)](_0x16fdf3(0xa08),_0x2f2dfd,_0x305154),this['push']('waitForAnimation');},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x552)]=function(_0x3985ac,_0x8fb080,_0x39a9d5){const _0x3fbc52=_0x4ab18a;if(this[_0x3fbc52(0x93c)](_0x8fb080))this['autoMeleeSingleTargetActionSet'](_0x3985ac,_0x8fb080,_0x39a9d5);else{if(this[_0x3fbc52(0x30b)](_0x8fb080))this['autoMeleeMultiTargetActionSet'](_0x3985ac,_0x8fb080,_0x39a9d5);else _0x8fb080[_0x3fbc52(0x970)]()?'orGql'!==_0x3fbc52(0xa8)?(_0x5bbc9f=_0x186c6b(_0x52fb6e['$1']),_0x26842b=_0x552e68(_0xdf6fc5['$2'])):this['targetActionSet'](_0x3985ac,_0x8fb080,_0x39a9d5):this[_0x3fbc52(0x58c)](_0x3985ac,_0x8fb080,_0x39a9d5);}},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x93c)]=function(_0x2ee9b4){const _0x191674=_0x4ab18a;if(!_0x2ee9b4[_0x191674(0x82d)]())return![];if(!_0x2ee9b4[_0x191674(0x547)]())return![];if(!_0x2ee9b4[_0x191674(0x990)]())return![];return VisuMZ[_0x191674(0x94c)][_0x191674(0x3f5)]['ActionSequence']['AutoMeleeSolo'];},Window_BattleLog[_0x4ab18a(0x49d)]['autoMeleeSingleTargetActionSet']=function(_0x10fe49,_0x3c2b5f,_0x3bbdee){const _0x90e577=_0x4ab18a,_0x48a185=_0x10fe49[_0x90e577(0x9dd)]()[_0x90e577(0x626)]<0x2,_0xf1d85e=0x14,_0x4e4c06=0x30;_0x48a185&&(this['push'](_0x90e577(0x5a3),[_0x10fe49],_0x4e4c06,_0xf1d85e),this[_0x90e577(0x448)]('performMoveToTargets',_0x10fe49,_0x3bbdee,_0x90e577(0x85e),_0xf1d85e,!![],'Linear',!![]),this[_0x90e577(0x448)](_0x90e577(0x27c),[_0x10fe49],_0x90e577(0x38f)),this['push']('waitForMovement'));let _0x5760c5=_0x3c2b5f['isAttack']()?this[_0x90e577(0x15e)](_0x10fe49):0x1;for(let _0x26eacb=0x0;_0x26eacb<_0x5760c5;_0x26eacb++){if(_0x90e577(0x4c0)!==_0x90e577(0xa26)){if(_0x3c2b5f[_0x90e577(0x703)]()&&_0x10fe49[_0x90e577(0x526)]()){if(_0x90e577(0x62e)===_0x90e577(0x62e))this[_0x90e577(0x448)](_0x90e577(0x680),_0x10fe49,_0x26eacb);else{if(!_0x482ce6[_0x90e577(0x94c)][_0x90e577(0x3f5)][_0x90e577(0x56a)]['PrioritySortActive'])return;const _0x197956=_0x260343[_0x90e577(0xf7)];if(_0x197956){if(_0x197956[_0x90e577(0x526)]()&&!_0x4b46aa[_0x90e577(0x332)]())return;const _0x29cd25=_0x197956[_0x90e577(0x173)]();if(_0x29cd25&&_0x197956[_0x90e577(0x526)]())this[_0x90e577(0x5ff)][_0x90e577(0x19a)](_0x29cd25);}}}_0x3c2b5f[_0x90e577(0x925)]()[_0x90e577(0xa0a)]<0x0?_0x90e577(0x182)===_0x90e577(0x182)?this['targetActionSet'](_0x10fe49,_0x3c2b5f,_0x3bbdee):this[_0x90e577(0x422)][_0x90e577(0x849)](0x0,0x0,0x0,0x0):this[_0x90e577(0x58c)](_0x10fe49,_0x3c2b5f,_0x3bbdee);}else{if(_0x4aa476===_0x42f27f[_0x90e577(0x2cc)]()){let _0x246a4e=_0x180e8d[_0x90e577(0x9d5)];_0x246a4e*=_0x27a808[_0x90e577(0xaa2)](_0x50471a),_0x246a4e*=this[_0x90e577(0x3d1)]()[_0x90e577(0xa35)](_0x126456),_0x246a4e*=this[_0x90e577(0x481)](_0x423bb6),_0x267ee8[_0x90e577(0xeb)]()<_0x246a4e&&(_0xd9b18b['_deathStateApplied']=!![],this['makeSuccess'](_0x5caa9e));}}}_0x3c2b5f[_0x90e577(0x703)]()&&_0x10fe49[_0x90e577(0x526)]()&&this['push'](_0x90e577(0x2ad),_0x10fe49);this[_0x90e577(0x448)](_0x90e577(0x252),_0x10fe49,_0x3bbdee,![]);if(_0x48a185){if(_0x90e577(0x903)===_0x90e577(0x76d)){const _0x155f61=this[_0x90e577(0x3ba)];_0x155f61[_0x90e577(0x46a)][_0x90e577(0x7e0)]();const _0x58bc3c=this['commandStyleCheck'](this[_0x90e577(0xa34)]());if(_0x58bc3c===_0x90e577(0xa2b)&&this['maxItems']()>0x0){const _0x21bb25=this['itemLineRect'](this['index']());let _0x4cd2b5=this['commandName'](this[_0x90e577(0xa34)]());_0x4cd2b5=_0x4cd2b5[_0x90e577(0x277)](/\\I\[(\d+)\]/gi,''),_0x155f61[_0x90e577(0x834)](),this['commandNameWindowDrawBackground'](_0x4cd2b5,_0x21bb25),this[_0x90e577(0x128)](_0x4cd2b5,_0x21bb25),this['commandNameWindowCenter'](_0x4cd2b5,_0x21bb25);}}else{const _0x203d45=_0x10fe49[_0x90e577(0x173)]();this[_0x90e577(0x448)]('performJump',[_0x10fe49],_0x4e4c06,_0xf1d85e),this['push'](_0x90e577(0x256),_0x10fe49,_0x203d45['_homeX'],_0x203d45['_homeY'],_0xf1d85e,![],'Linear'),this['push'](_0x90e577(0x27c),[_0x10fe49],_0x90e577(0x91b)),this[_0x90e577(0x448)](_0x90e577(0x259)),this[_0x90e577(0x448)](_0x90e577(0x27c),[_0x10fe49],_0x90e577(0x38f));}}},Window_BattleLog['prototype'][_0x4ab18a(0x30b)]=function(_0x47377e){const _0xa0c10c=_0x4ab18a;if(!_0x47377e[_0xa0c10c(0x82d)]())return![];if(!_0x47377e[_0xa0c10c(0x5dc)]())return![];if(!_0x47377e[_0xa0c10c(0x990)]())return![];return VisuMZ['BattleCore']['Settings'][_0xa0c10c(0x9d2)][_0xa0c10c(0xacb)];},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x6e9)]=function(_0x255eaf,_0x56f267,_0x43e77b){const _0x44352a=_0x4ab18a,_0x558a48=_0x255eaf['getAttackMotion']()[_0x44352a(0x626)]<0x2,_0x1497d2=0x14,_0x197045=0x30;_0x558a48&&(_0x44352a(0x5d8)!==_0x44352a(0x1b6)?(this[_0x44352a(0x448)](_0x44352a(0x5a3),[_0x255eaf],_0x197045,_0x1497d2),this[_0x44352a(0x448)](_0x44352a(0x1de),_0x255eaf,_0x43e77b,'front\x20center',_0x1497d2,!![],_0x44352a(0xfb),!![]),this[_0x44352a(0x448)](_0x44352a(0x27c),[_0x255eaf],_0x44352a(0x38f)),this[_0x44352a(0x448)](_0x44352a(0x259))):_0x5cca19[_0x44352a(0x94c)][_0x44352a(0x663)][_0x44352a(0x45b)](this,_0x18a758,_0x5622b0,_0x5961f0));let _0x134e4a=_0x56f267['isAttack']()?this[_0x44352a(0x15e)](_0x255eaf):0x1;for(let _0x57b7f0=0x0;_0x57b7f0<_0x134e4a;_0x57b7f0++){if('CQTmS'==='TbQHb')return'icon';else{if(_0x56f267[_0x44352a(0x703)]()&&_0x255eaf[_0x44352a(0x526)]()){if(_0x44352a(0x9ae)!==_0x44352a(0x6fa))this['push'](_0x44352a(0x680),_0x255eaf,_0x57b7f0);else return![];}this[_0x44352a(0x58c)](_0x255eaf,_0x56f267,_0x43e77b);}}_0x56f267[_0x44352a(0x703)]()&&_0x255eaf['isActor']()&&('oOtyD'===_0x44352a(0xb3)?this[_0x44352a(0x448)](_0x44352a(0x2ad),_0x255eaf):_0x3cdd83+=_0x34f358(_0x599c62['$2']));this[_0x44352a(0x448)]('applyImmortal',_0x255eaf,_0x43e77b,![]);if(_0x558a48){const _0x2b26f8=_0x255eaf[_0x44352a(0x173)]();this[_0x44352a(0x448)](_0x44352a(0x5a3),[_0x255eaf],_0x197045,_0x1497d2),this[_0x44352a(0x448)](_0x44352a(0x256),_0x255eaf,_0x2b26f8[_0x44352a(0x9f)],_0x2b26f8[_0x44352a(0x665)],_0x1497d2,![],'Linear'),this[_0x44352a(0x448)]('requestMotion',[_0x255eaf],_0x44352a(0x91b)),this[_0x44352a(0x448)]('waitForMovement'),this['push']('requestMotion',[_0x255eaf],_0x44352a(0x38f));}},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa87)]=function(_0xe46104,_0x2776fa,_0x40eba2){const _0x3d282a=_0x4ab18a,_0x49c54f=_0x2776fa[_0x3d282a(0x925)]();for(const _0xb13144 of _0x40eba2){if(_0x3d282a(0x57a)==='kxHOd'){if(!_0xb13144)continue;this[_0x3d282a(0x448)]('performAction',_0xe46104,_0x2776fa),this[_0x3d282a(0x448)](_0x3d282a(0x770),Sprite_Battler[_0x3d282a(0x355)]),this[_0x3d282a(0x448)]('showAnimation',_0xe46104,[_0xb13144],_0x49c54f[_0x3d282a(0xa0a)]),this[_0x3d282a(0x448)](_0x3d282a(0x770),0x18),this[_0x3d282a(0x448)](_0x3d282a(0x7c7),_0xe46104,_0xb13144);}else return _0x5ccfbe['friendsUnit']()[_0x3d282a(0x8bd)]();}},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x58c)]=function(_0x5ef0ff,_0x1d07a3,_0x1767b5){const _0xf5d19b=_0x4ab18a,_0x5401ec=_0x1d07a3[_0xf5d19b(0x925)]();this[_0xf5d19b(0x448)](_0xf5d19b(0xa23),_0x5ef0ff,_0x1d07a3),this[_0xf5d19b(0x448)](_0xf5d19b(0x770),Sprite_Battler[_0xf5d19b(0x355)]),this[_0xf5d19b(0x448)]('showAnimation',_0x5ef0ff,_0x1767b5[_0xf5d19b(0x848)](),_0x5401ec[_0xf5d19b(0xa0a)]),this[_0xf5d19b(0x448)]('waitForAnimation');for(const _0x1934c9 of _0x1767b5){if(!_0x1934c9)continue;this[_0xf5d19b(0x448)]('actionEffect',_0x5ef0ff,_0x1934c9);}},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x33f)]=function(_0x59885c,_0x3e5efa,_0x144b23){const _0x1c21a1=_0x4ab18a,_0xa71855=_0x3e5efa[_0x1c21a1(0x925)]();this[_0x1c21a1(0x448)]('applyImmortal',_0x59885c,_0x144b23,![]),this['push'](_0x1c21a1(0x4e8)),this[_0x1c21a1(0x448)]('waitForEffect'),this[_0x1c21a1(0x448)](_0x1c21a1(0x7e0)),this[_0x1c21a1(0x448)]('performActionEnd',_0x59885c),this[_0x1c21a1(0x448)](_0x1c21a1(0x259));},Window_BattleLog[_0x4ab18a(0x49d)]['endAction']=function(_0x38df9f){},VisuMZ['BattleCore'][_0x4ab18a(0x4ff)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x460)],Window_BattleLog['prototype'][_0x4ab18a(0x460)]=function(_0x40d2a4){const _0x5a62cd=_0x4ab18a;if(!VisuMZ[_0x5a62cd(0x94c)][_0x5a62cd(0x3f5)]['BattleLog'][_0x5a62cd(0x155)])return;VisuMZ[_0x5a62cd(0x94c)][_0x5a62cd(0x4ff)]['call'](this,_0x40d2a4);},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x8d8)]=function(_0x1fd251){const _0x1603c5=_0x4ab18a;this[_0x1603c5(0x448)](_0x1603c5(0x7cc),_0x1fd251);VisuMZ[_0x1603c5(0x94c)][_0x1603c5(0x3f5)]['ActionSequence']['CounterPlayback']&&this['push'](_0x1603c5(0x43e),_0x1fd251,[BattleManager[_0x1603c5(0xf7)]],-0x1);if(!VisuMZ['BattleCore'][_0x1603c5(0x3f5)][_0x1603c5(0x719)][_0x1603c5(0x809)])return;this[_0x1603c5(0x448)](_0x1603c5(0x39c),TextManager['counterAttack'][_0x1603c5(0x278)](_0x1fd251[_0x1603c5(0x8ff)]()));},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x1ea)]=function(_0x1980fb){const _0x2cb90c=_0x4ab18a;this['push']('performReflection',_0x1980fb);if(!VisuMZ['BattleCore']['Settings'][_0x2cb90c(0x719)]['ShowReflect'])return;this[_0x2cb90c(0x448)](_0x2cb90c(0x39c),TextManager[_0x2cb90c(0x4ce)][_0x2cb90c(0x278)](_0x1980fb[_0x2cb90c(0x8ff)]()));},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x947)]=function(_0x361e4e,_0x981b2c){const _0x3f36b5=_0x4ab18a;if(VisuMZ[_0x3f36b5(0x94c)][_0x3f36b5(0x3f5)][_0x3f36b5(0x9d2)][_0x3f36b5(0x16d)]){const _0x5951c5=_0x981b2c[_0x3f36b5(0x925)]();this[_0x3f36b5(0x448)](_0x3f36b5(0x43e),_0x361e4e,[_0x361e4e],_0x5951c5['animationId']);}},Window_BattleLog['prototype'][_0x4ab18a(0x93b)]=function(_0x458727,_0xea68c9){const _0x42cc1f=_0x4ab18a;this[_0x42cc1f(0x448)]('performSubstitute',_0x458727,_0xea68c9);if(!VisuMZ[_0x42cc1f(0x94c)][_0x42cc1f(0x3f5)][_0x42cc1f(0x719)]['ShowSubstitute'])return;const _0x56cb73=_0x458727[_0x42cc1f(0x8ff)](),_0x713b47=TextManager[_0x42cc1f(0x4d5)][_0x42cc1f(0x278)](_0x56cb73,_0xea68c9[_0x42cc1f(0x8ff)]());this[_0x42cc1f(0x448)](_0x42cc1f(0x39c),_0x713b47);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x694)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x5b8)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x5b8)]=function(_0x5a0202,_0x1cad9e){const _0x50a142=_0x4ab18a;VisuMZ[_0x50a142(0x94c)]['Window_BattleLog_displayActionResults'][_0x50a142(0x45b)](this,_0x5a0202,_0x1cad9e),this[_0x50a142(0x448)](_0x50a142(0x7e0));},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x598)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x78e)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x78e)]=function(_0x306333){const _0x35be34=_0x4ab18a;if(!VisuMZ[_0x35be34(0x94c)][_0x35be34(0x3f5)][_0x35be34(0x719)][_0x35be34(0x466)])return;VisuMZ['BattleCore'][_0x35be34(0x598)]['call'](this,_0x306333);},VisuMZ['BattleCore'][_0x4ab18a(0x607)]=Window_BattleLog[_0x4ab18a(0x49d)]['displayCritical'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x218)]=function(_0x544c2a){const _0x575136=_0x4ab18a;if(!VisuMZ['BattleCore'][_0x575136(0x3f5)][_0x575136(0x719)][_0x575136(0x519)])return;VisuMZ[_0x575136(0x94c)][_0x575136(0x607)][_0x575136(0x45b)](this,_0x544c2a);},VisuMZ['BattleCore'][_0x4ab18a(0xa78)]=Window_BattleLog[_0x4ab18a(0x49d)]['displayMiss'],Window_BattleLog['prototype'][_0x4ab18a(0x523)]=function(_0x289790){const _0x417808=_0x4ab18a;!VisuMZ[_0x417808(0x94c)][_0x417808(0x3f5)]['BattleLog'][_0x417808(0x9e8)]?this[_0x417808(0x448)]('performMiss',_0x289790):_0x417808(0x811)===_0x417808(0x52a)?_0x3fd20e=_0x295d13[_0x417808(0x985)]((_0xa115ca,_0x31b7a8)=>_0xa115ca*(0x1-_0x31b7a8),_0x43a39f):VisuMZ[_0x417808(0x94c)][_0x417808(0xa78)][_0x417808(0x45b)](this,_0x289790);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x3b1)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa88)],Window_BattleLog[_0x4ab18a(0x49d)]['displayEvasion']=function(_0x899e7f){const _0x2eb7d6=_0x4ab18a;if(!VisuMZ[_0x2eb7d6(0x94c)][_0x2eb7d6(0x3f5)][_0x2eb7d6(0x719)]['ShowMissEvasion']){if(_0x2eb7d6(0xa17)!==_0x2eb7d6(0x779)){if(_0x899e7f[_0x2eb7d6(0x2d4)]()[_0x2eb7d6(0x675)])this[_0x2eb7d6(0x448)](_0x2eb7d6(0xa07),_0x899e7f);else{if(_0x2eb7d6(0x5f4)===_0x2eb7d6(0x5d3)){const _0x2d0d92=_0x43fc20[_0x2eb7d6(0x40e)](_0xc92fa7['$1']);this[_0x2eb7d6(0xad1)](_0x3bf43c[_0x2d0d92]);}else this[_0x2eb7d6(0x448)](_0x2eb7d6(0x49b),_0x899e7f);}}else{const _0x7eb2a1=this[_0x2eb7d6(0x925)]()[_0x2eb7d6(0x7f8)];if(_0x7eb2a1['match'](/RANDOM/i))return![];if(_0x7eb2a1[_0x2eb7d6(0x378)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x7eb2a1[_0x2eb7d6(0x378)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0x249aa2[_0x2eb7d6(0x94c)][_0x2eb7d6(0x92)][_0x2eb7d6(0x45b)](this);}}else VisuMZ[_0x2eb7d6(0x94c)][_0x2eb7d6(0x3b1)][_0x2eb7d6(0x45b)](this,_0x899e7f);},Window_BattleLog[_0x4ab18a(0x49d)]['displayHpDamage']=function(_0x1961bd){const _0x2d6f3d=_0x4ab18a;if(_0x1961bd[_0x2d6f3d(0x2d4)]()[_0x2d6f3d(0xed)]){if(_0x2d6f3d(0x3f3)===_0x2d6f3d(0x1f4))return _0x31b256[_0x2d6f3d(0x173)]()[_0x2d6f3d(0x520)]-_0x367a3c[_0x2d6f3d(0x173)]()['_baseX'];else{if(_0x1961bd[_0x2d6f3d(0x2d4)]()[_0x2d6f3d(0x9c0)]>0x0&&!_0x1961bd[_0x2d6f3d(0x2d4)]()[_0x2d6f3d(0xa3a)]){if('EhWXC'!==_0x2d6f3d(0x5f7))this[_0x2d6f3d(0x448)](_0x2d6f3d(0x28a),_0x1961bd);else{const _0x293173=_0xc9dca4[_0x2d6f3d(0x94c)]['ConfigManager_makeData'][_0x2d6f3d(0x45b)](this);return _0x293173[_0x2d6f3d(0xaae)]=this['autoBattleAtStart'],_0x293173[_0x2d6f3d(0xa75)]=this[_0x2d6f3d(0xa75)],_0x293173['visualHpGauge']=this[_0x2d6f3d(0x8c1)],_0x293173;}}_0x1961bd[_0x2d6f3d(0x2d4)]()[_0x2d6f3d(0x9c0)]<0x0&&(_0x2d6f3d(0xa0b)===_0x2d6f3d(0x2bb)?(_0x11dcf9[_0x2d6f3d(0x94c)]['Sprite_Actor_createStateSprite'][_0x2d6f3d(0x45b)](this),_0x58199e[_0x2d6f3d(0x94c)][_0x2d6f3d(0x3f5)][_0x2d6f3d(0x7bb)]['ShowActorGauge']&&this[_0x2d6f3d(0xacf)]()):this[_0x2d6f3d(0x448)](_0x2d6f3d(0x274),_0x1961bd)),VisuMZ['BattleCore'][_0x2d6f3d(0x3f5)][_0x2d6f3d(0x719)][_0x2d6f3d(0x951)]&&this['push']('addText',this[_0x2d6f3d(0x588)](_0x1961bd));}}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x413)]=Window_BattleLog['prototype']['displayMpDamage'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x345)]=function(_0x98d583){const _0x1ec6ee=_0x4ab18a;if(!VisuMZ[_0x1ec6ee(0x94c)]['Settings'][_0x1ec6ee(0x719)][_0x1ec6ee(0x586)])return;VisuMZ[_0x1ec6ee(0x94c)][_0x1ec6ee(0x413)][_0x1ec6ee(0x45b)](this,_0x98d583);},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x7b6)]=Window_BattleLog['prototype'][_0x4ab18a(0xaa7)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xaa7)]=function(_0x25ff3f){const _0x4d2312=_0x4ab18a;if(!VisuMZ['BattleCore']['Settings']['BattleLog']['ShowTpDmg'])return;VisuMZ[_0x4d2312(0x94c)][_0x4d2312(0x7b6)][_0x4d2312(0x45b)](this,_0x25ff3f);},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x100)]=function(_0x16e51e){const _0x4ceadd=_0x4ab18a;_0x16e51e['result']()['isStatusAffected']()&&(this[_0x4ceadd(0x448)](_0x4ceadd(0xacc)),this[_0x4ceadd(0x257)](_0x16e51e),this[_0x4ceadd(0x837)](_0x16e51e),this[_0x4ceadd(0x448)](_0x4ceadd(0x4e8)));},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x8c)]=function(_0x4940ae){const _0x428e19=_0x4ab18a,_0x3be0cb=_0x4940ae['result'](),_0x1ebcda=_0x3be0cb[_0x428e19(0x244)]();for(const _0x7f017b of _0x1ebcda){if(_0x428e19(0x105)!=='Ptgka'){const _0x3b8c86=_0x4940ae[_0x428e19(0x526)]()?_0x7f017b[_0x428e19(0x8fc)]:_0x7f017b[_0x428e19(0x597)];if(_0x3b8c86&&VisuMZ[_0x428e19(0x94c)][_0x428e19(0x3f5)][_0x428e19(0x719)]['ShowAddedState']){if(_0x428e19(0x7f7)!=='TAtYf')this[_0x428e19(0x448)](_0x428e19(0x5fe)),this[_0x428e19(0x448)](_0x428e19(0x338)),this[_0x428e19(0x448)](_0x428e19(0xacc)),this[_0x428e19(0x448)]('addText',_0x3b8c86[_0x428e19(0x278)](_0x4940ae[_0x428e19(0x8ff)]())),this['push'](_0x428e19(0x1d4));else{_0x209e78=_0x9ae030||'',_0x5c34c3=_0x409fbd||'';_0x47f01a===''&&_0x380a33===''&&(_0x37e78e=this[_0x428e19(0x832)][_0x428e19(0x43b)](),_0x47992f=this['_back2Sprite']['battleback2Name']());const _0x23c47d=_0x36e549['loadBattleback1'](_0x505b7e),_0x527a81=_0x5cc908[_0x428e19(0x36e)](_0x64ecd9);_0x23c47d[_0x428e19(0x65c)](this[_0x428e19(0x751)][_0x428e19(0xae2)](this,this[_0x428e19(0x832)],this['_back2Sprite'],_0x23c47d,_0x527a81));}}_0x7f017b['id']===_0x4940ae[_0x428e19(0x2cc)]()&&(_0x428e19(0x1ee)===_0x428e19(0x1ee)?this['push'](_0x428e19(0x36d),_0x4940ae):(this['_logWindow'][_0x428e19(0x448)](_0x428e19(0x1d4)),this['_logWindow'][_0x428e19(0x448)](_0x428e19(0x7e0))));}else this[_0x428e19(0x610)][_0x428e19(0x6db)][_0x428e19(0xa6f)]!==this[_0x428e19(0x69e)][_0x428e19(0x726)]()&&(this['_mainSprite'][_0x428e19(0x6db)][_0x428e19(0xa6f)]=this['_battler'][_0x428e19(0x726)]());}},Window_BattleLog['prototype'][_0x4ab18a(0x5fe)]=function(){},Window_BattleLog['prototype'][_0x4ab18a(0x7ab)]=function(_0x1c4dbc){const _0x3cfd1b=_0x4ab18a;if(!VisuMZ[_0x3cfd1b(0x94c)][_0x3cfd1b(0x3f5)]['BattleLog']['ShowRemovedState'])return;const _0x1b69d4=_0x1c4dbc[_0x3cfd1b(0x2d4)](),_0x7f30f6=_0x1b69d4[_0x3cfd1b(0xd8)]();for(const _0x5953a2 of _0x7f30f6){_0x3cfd1b(0x4e7)===_0x3cfd1b(0x4e7)?_0x5953a2[_0x3cfd1b(0x3aa)]&&(this[_0x3cfd1b(0x448)](_0x3cfd1b(0x464)),this[_0x3cfd1b(0x448)]('popBaseLine'),this['push']('pushBaseLine'),this[_0x3cfd1b(0x448)](_0x3cfd1b(0x39c),_0x5953a2['message4'][_0x3cfd1b(0x278)](_0x1c4dbc[_0x3cfd1b(0x8ff)]())),this['push'](_0x3cfd1b(0x1d4))):this[_0x3cfd1b(0x6e9)](_0x29e598,_0x334616,_0x1b0513);}},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x464)]=function(){},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x837)]=function(_0x18c76d){const _0x19898b=_0x4ab18a,_0x39ffd3=VisuMZ[_0x19898b(0x94c)]['Settings'][_0x19898b(0x719)],_0x4af357=_0x18c76d['result']();if(_0x39ffd3[_0x19898b(0x113)])this[_0x19898b(0x7eb)](_0x18c76d,_0x4af357[_0x19898b(0x1e0)],TextManager['buffAdd']);if(_0x39ffd3[_0x19898b(0x6a9)])this[_0x19898b(0x7eb)](_0x18c76d,_0x4af357[_0x19898b(0x5b9)],TextManager[_0x19898b(0xa5)]);if(_0x39ffd3['ShowRemovedBuff'])this['displayBuffs'](_0x18c76d,_0x4af357[_0x19898b(0x876)],TextManager[_0x19898b(0x3c9)]);},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x7eb)]=function(_0x4d62c1,_0x15ed1e,_0x4a0e9e){const _0x7a9767=_0x4ab18a;for(const _0x132246 of _0x15ed1e){const _0x4f39b8=_0x4a0e9e[_0x7a9767(0x278)](_0x4d62c1[_0x7a9767(0x8ff)](),TextManager[_0x7a9767(0x983)](_0x132246));this[_0x7a9767(0x448)]('popBaseLine'),this['push'](_0x7a9767(0xacc)),this[_0x7a9767(0x448)]('addText',_0x4f39b8),this[_0x7a9767(0x448)](_0x7a9767(0x1d4));}},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x97a)]=Window_BattleLog[_0x4ab18a(0x49d)]['clear'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x7e0)]=function(){const _0x45cfe6=_0x4ab18a;VisuMZ['BattleCore'][_0x45cfe6(0x97a)][_0x45cfe6(0x45b)](this),this[_0x45cfe6(0x61b)]();},VisuMZ['BattleCore'][_0x4ab18a(0x1c5)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xacc)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xacc)]=function(){const _0x4cb4be=_0x4ab18a;VisuMZ[_0x4cb4be(0x94c)][_0x4cb4be(0x1c5)][_0x4cb4be(0x45b)](this),this[_0x4cb4be(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x6ea)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x338)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x3df6a6=_0x4ab18a;VisuMZ[_0x3df6a6(0x94c)][_0x3df6a6(0x6ea)][_0x3df6a6(0x45b)](this),this[_0x3df6a6(0x96d)](),this['callNextMethod']();},VisuMZ[_0x4ab18a(0x94c)]['Window_BattleLog_popupDamage']=Window_BattleLog['prototype']['popupDamage'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x87a)]=function(_0x548462){const _0x609f48=_0x4ab18a;VisuMZ[_0x609f48(0x94c)][_0x609f48(0x24c)]['call'](this,_0x548462),this[_0x609f48(0x61b)]();},Window_BattleLog[_0x4ab18a(0x49d)]['waitForNewLine']=function(){const _0x3f63c3=_0x4ab18a;let _0x5f1abf=0x0;this[_0x3f63c3(0x104)][_0x3f63c3(0x820)]>0x0&&(_0x3f63c3(0x8ce)==='BURyv'?_0x5f1abf=this[_0x3f63c3(0x104)][this[_0x3f63c3(0x104)][_0x3f63c3(0x820)]-0x1]:this[_0x3f63c3(0x1b7)]()),this[_0x3f63c3(0x4e6)][_0x3f63c3(0x820)]>_0x5f1abf?this['wait']():this['callNextMethod']();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x157)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x21d)],Window_BattleLog[_0x4ab18a(0x49d)]['performActionStart']=function(_0x59d4de,_0x2e0939){const _0x20f5ad=_0x4ab18a;VisuMZ[_0x20f5ad(0x94c)][_0x20f5ad(0x157)][_0x20f5ad(0x45b)](this,_0x59d4de,_0x2e0939),this[_0x20f5ad(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x11a)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa23)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa23)]=function(_0x2d0f2c,_0x328ea4){const _0x42fa42=_0x4ab18a;VisuMZ[_0x42fa42(0x94c)]['Window_BattleLog_performAction'][_0x42fa42(0x45b)](this,_0x2d0f2c,_0x328ea4),this[_0x42fa42(0x61b)]();},VisuMZ['BattleCore']['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x325)],Window_BattleLog[_0x4ab18a(0x49d)]['performActionEnd']=function(_0x55df92){const _0x34ed76=_0x4ab18a;VisuMZ[_0x34ed76(0x94c)][_0x34ed76(0xa83)][_0x34ed76(0x45b)](this,_0x55df92);for(const _0x3cc882 of BattleManager[_0x34ed76(0xe6)]()){if(_0x34ed76(0x2b1)==='GkoVc'){if(!_0x3cc882)continue;if(_0x3cc882[_0x34ed76(0x9b4)]())continue;_0x3cc882['performActionEndMembers']();}else{const _0x525a6f=_0x4d2e9a(_0x19da59['$1']);_0x525a6f<_0x3cfb18?(_0x124c2e(_0x34ed76(0x4a5)['format'](_0x580b53,_0x525a6f,_0x592a8f)),_0x4e9e10[_0x34ed76(0x7f4)]()):_0x1964cc=_0x594afc[_0x34ed76(0x877)](_0x525a6f,_0x428e29);}}this['callNextMethod']();},VisuMZ['BattleCore'][_0x4ab18a(0xac8)]=Window_BattleLog['prototype']['performDamage'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x28a)]=function(_0x178bb8){const _0x396e12=_0x4ab18a;VisuMZ[_0x396e12(0x94c)][_0x396e12(0xac8)][_0x396e12(0x45b)](this,_0x178bb8),this[_0x396e12(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x8f)]=Window_BattleLog[_0x4ab18a(0x49d)]['performMiss'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xad)]=function(_0x1b6d7e){const _0x27d628=_0x4ab18a;VisuMZ['BattleCore'][_0x27d628(0x8f)]['call'](this,_0x1b6d7e),this[_0x27d628(0x61b)]();},VisuMZ['BattleCore'][_0x4ab18a(0x92b)]=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x274)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x274)]=function(_0x145078){const _0x3e996c=_0x4ab18a;VisuMZ[_0x3e996c(0x94c)][_0x3e996c(0x92b)]['call'](this,_0x145078),this[_0x3e996c(0x61b)]();},VisuMZ['BattleCore']['Window_BattleLog_performEvasion']=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa07)],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa07)]=function(_0x49a5e2){const _0x517bfd=_0x4ab18a;VisuMZ[_0x517bfd(0x94c)]['Window_BattleLog_performEvasion'][_0x517bfd(0x45b)](this,_0x49a5e2),this[_0x517bfd(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x49b)],Window_BattleLog['prototype']['performMagicEvasion']=function(_0x5d2ae9){const _0x4c2b3d=_0x4ab18a;VisuMZ[_0x4c2b3d(0x94c)]['Window_BattleLog_performMagicEvasion'][_0x4c2b3d(0x45b)](this,_0x5d2ae9),this[_0x4c2b3d(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)]['Window_BattleLog_performCounter']=Window_BattleLog['prototype']['performCounter'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x7cc)]=function(_0x1a7a76){const _0x589b18=_0x4ab18a;VisuMZ[_0x589b18(0x94c)][_0x589b18(0xa65)]['call'](this,_0x1a7a76),this[_0x589b18(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x94e)]=Window_BattleLog[_0x4ab18a(0x49d)]['performReflection'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0xa76)]=function(_0x4d29db){const _0x2c01f2=_0x4ab18a;VisuMZ['BattleCore'][_0x2c01f2(0x94e)][_0x2c01f2(0x45b)](this,_0x4d29db),this[_0x2c01f2(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)][_0x4ab18a(0x91c)]=Window_BattleLog[_0x4ab18a(0x49d)]['performSubstitute'],Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x254)]=function(_0x2a8c05,_0x4a944e){const _0x432642=_0x4ab18a;VisuMZ[_0x432642(0x94c)][_0x432642(0x91c)][_0x432642(0x45b)](this,_0x2a8c05,_0x4a944e),this[_0x432642(0x61b)]();},VisuMZ[_0x4ab18a(0x94c)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x36d)],Window_BattleLog[_0x4ab18a(0x49d)]['performCollapse']=function(_0x7fcebd){const _0x8962e8=_0x4ab18a;VisuMZ[_0x8962e8(0x94c)][_0x8962e8(0x440)][_0x8962e8(0x45b)](this,_0x7fcebd),this[_0x8962e8(0x61b)]();},Window_BattleLog['prototype'][_0x4ab18a(0xa08)]=function(_0x21df1f,_0x497029){const _0x3692cb=_0x4ab18a;_0x21df1f[_0x3692cb(0xa08)](_0x497029),this['callNextMethod']();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x649)]=function(_0x199c7c,_0x218e9d){const _0x4096e8=_0x4ab18a,_0x4a27a6=_0x199c7c['attackAnimationId1']();_0x4a27a6<=0x0?SoundManager[_0x4096e8(0xa74)]():this['showNormalAnimation'](_0x218e9d,_0x4a27a6);},Window_BattleLog[_0x4ab18a(0x49d)]['applyImmortal']=function(_0x365c19,_0x2a8394,_0x1c8c86){const _0x18d9ec=_0x4ab18a,_0x15c192=[_0x365c19][_0x18d9ec(0x11d)](_0x2a8394);for(const _0x4fb9e4 of _0x15c192){if(_0x18d9ec(0x305)!==_0x18d9ec(0x305)){if(!this[_0x18d9ec(0x637)]())return;_0x526daf[_0x18d9ec(0x313)]()?this['x']=_0x3f717e[_0x18d9ec(0x958)]-this[_0x18d9ec(0x637)]()[_0x18d9ec(0x173)]()[_0x18d9ec(0x520)]:this['x']=this[_0x18d9ec(0x637)]()[_0x18d9ec(0x173)]()[_0x18d9ec(0x520)];this['x']-=_0x16ac58[_0x18d9ec(0x1e2)](this[_0x18d9ec(0x999)]/0x2),this['y']=this[_0x18d9ec(0x637)]()[_0x18d9ec(0x173)]()[_0x18d9ec(0x5e7)]-_0xefd393['round'](this[_0x18d9ec(0x6fe)]()*1.5);const _0x595347=_0x32deea[_0x18d9ec(0x94c)][_0x18d9ec(0x3f5)][_0x18d9ec(0x582)];this['x']+=_0x595347[_0x18d9ec(0x59c)]||0x0,this['y']+=_0x595347[_0x18d9ec(0x320)]||0x0;}else{if(!_0x4fb9e4)continue;_0x4fb9e4[_0x18d9ec(0x357)](_0x1c8c86);}}this['callNextMethod']();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x770)]=function(_0x127cd9){this['_waitCount']=_0x127cd9;},Window_BattleLog[_0x4ab18a(0x49d)]['requestMotion']=function(_0x351e15,_0x13842b){const _0x203bb4=_0x4ab18a;for(const _0x6e1d90 of _0x351e15){if(_0x203bb4(0x81b)===_0x203bb4(0x81b)){if(!_0x6e1d90)continue;_0x6e1d90[_0x203bb4(0x27c)](_0x13842b);}else{if(this[_0x203bb4(0x776)]())return _0x1577d2;return _0xcae8c4=this['applySoftDamageCap'](_0x1fbe73),_0x210b7f=this[_0x203bb4(0x493)](_0x540a33),_0x2935e7;}}this[_0x203bb4(0x61b)]();},Window_BattleLog[_0x4ab18a(0x49d)]['performMoveToPoint']=function(_0x347dc6,_0x3dca6f,_0x4ff02a,_0x910467,_0x19060f,_0x18b3ad){const _0x4994f2=_0x4ab18a;_0x347dc6[_0x4994f2(0x7c6)](_0x3dca6f,_0x4ff02a,_0x910467,_0x19060f,_0x18b3ad,-0x1),this['callNextMethod']();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x1de)]=function(_0x3ddee0,_0x5ecbee,_0x1e1359,_0x455db8,_0x4c27f0,_0x50686f,_0x392f3a){const _0x5de5b1=_0x4ab18a,_0x186230=Math['min'](..._0x5ecbee[_0x5de5b1(0x71a)](_0x3b70fb=>_0x3b70fb[_0x5de5b1(0x173)]()[_0x5de5b1(0x520)]-_0x3b70fb[_0x5de5b1(0x173)]()['mainSpriteWidth']()/0x2)),_0x332231=Math[_0x5de5b1(0x877)](..._0x5ecbee[_0x5de5b1(0x71a)](_0x1be434=>_0x1be434[_0x5de5b1(0x173)]()[_0x5de5b1(0x520)]+_0x1be434[_0x5de5b1(0x173)]()[_0x5de5b1(0x2e5)]()/0x2)),_0x76c3c8=Math['min'](..._0x5ecbee[_0x5de5b1(0x71a)](_0x33e4e6=>_0x33e4e6[_0x5de5b1(0x173)]()[_0x5de5b1(0x5e7)]-_0x33e4e6[_0x5de5b1(0x173)]()['mainSpriteHeight']())),_0x5a14f8=Math[_0x5de5b1(0x877)](..._0x5ecbee[_0x5de5b1(0x71a)](_0x46fc3e=>_0x46fc3e[_0x5de5b1(0x173)]()[_0x5de5b1(0x5e7)])),_0x43f724=_0x5ecbee[_0x5de5b1(0xa47)](_0xc27e78=>_0xc27e78[_0x5de5b1(0x526)]())[_0x5de5b1(0x820)],_0x479e8e=_0x5ecbee[_0x5de5b1(0xa47)](_0x2e6d19=>_0x2e6d19[_0x5de5b1(0x6dd)]())['length'];let _0x36bc69=0x0,_0xf412fc=0x0;if(_0x1e1359[_0x5de5b1(0x378)](/front/i))_0x36bc69=_0x43f724>=_0x479e8e?_0x186230:_0x332231;else{if(_0x1e1359[_0x5de5b1(0x378)](/middle/i))_0x36bc69=(_0x186230+_0x332231)/0x2,_0x392f3a=-0x1;else _0x1e1359[_0x5de5b1(0x378)](/back/i)&&(_0x36bc69=_0x43f724>=_0x479e8e?_0x332231:_0x186230);}if(_0x1e1359[_0x5de5b1(0x378)](/head/i))_0xf412fc=_0x76c3c8;else{if(_0x1e1359[_0x5de5b1(0x378)](/center/i))_0xf412fc=(_0x76c3c8+_0x5a14f8)/0x2;else _0x1e1359[_0x5de5b1(0x378)](/base/i)&&('vfmYK'==='nqnoB'?_0x162119['_spriteset'][_0x5de5b1(0x204)]():_0xf412fc=_0x5a14f8);}_0x3ddee0[_0x5de5b1(0x7c6)](_0x36bc69,_0xf412fc,_0x455db8,_0x4c27f0,_0x50686f,_0x392f3a),this[_0x5de5b1(0x61b)]();},Window_BattleLog[_0x4ab18a(0x49d)][_0x4ab18a(0x5a3)]=function(_0x43eaac,_0x4e2512,_0x122596){const _0xb0d3ba=_0x4ab18a;for(const _0x3fd406 of _0x43eaac){if(!_0x3fd406)continue;_0x3fd406[_0xb0d3ba(0x64d)](_0x4e2512,_0x122596);}this[_0xb0d3ba(0x61b)]();};