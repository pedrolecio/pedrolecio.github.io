/** ============================================================================
 *
 *  Luna_MouseSystem.js
 * 
 *  Build Date: 10/28/2020
 * 
 *  Made with LunaTea -- Haxe
 *
 * =============================================================================
*/
// Generated by Haxe 4.1.3
/*:
 * @plugindesc Allows you to use custom mouse cursor images and to change them during specific actions.
 * <Luna_MouseSystem>
 *
 * @target MZ MV
 * @author LunaTechs | inc0der
 * @url https://lunatechs.dev/plugins/luna-mouse-system/
 * 
 * @param cursors
 * @test Cursors
 * @desc A list of default cursors
 * @type struct<CursorData>[]
 * @default []
 * 
 * @param hoverEvents
 * @test Hover Events
 * @desc A list of events and their default cursors
 * @type struct<EventCursorData>[]
 * @default []
 * 
 * @param hoverEventCommands
 * @test Hover Event Commands
 * @desc A list of command and the default cursors to use when an event has a command.
 * @type struct<EventCommandData>
 * @default 
 * 
 * @command changeCursor
 * @text Change Cursor
 * @desc Changes the current cursor
 * 
 * @arg filename
 * @text Cursor Filename
 * @desc The filename of the cursor you want to change to.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 * 
 * @command hideCursor
 * @text Hide Cursor
 * @desc Hides the cursor from view.
 * @type Bool
 * @default true
 * 
 * @arg showDefault
 * @desc Show the default MZ/MV mouse cursor after hiding your custom cursor?
 * @type boolean
 * @default true
 * @on Show default cursor
 * @off Hide default cursor
 * 
 * @command showCursor
 * @text Show Cursor
 * @desc Brings cursor back to view
 * @type Bool
 * @default true
 * 
@help
==== Summary  ====
This plugin allows you to use custom cursor images with a highly customizable
hover event system.

=== Hover Events ===
Hover events are events that automatically change the cursors image to one
which better represents what the event contains.

The cursor will change with the following event commands and may be customized
in the plugins parameters.

  - Show Text
  - Change Gold
  - Change Item
  - Change Equip
  - Transfer
  - Battle
  - Shop
  - Save

==== Plugin Commands ====
The plugin command information is for MV but still contains valuable
information for MZ as well. 

For MZ, the commands and what they do are explained in the new plugin command
manager!

Main Command: LunaMouse 
  as shorter alternatives you may use lms or lmouse

-----------------------
LunaMouse show
-----------------------
show - Keyword for showing the cursor if not already visible

-----------------------
LunaMouse hide [showDefaultCursor]
-----------------------
show - Keyword for showing the cursor if not already visible

showDefaultCursor - Set to true to bring back the default mouse cursor

-----------------------
LunaMouse change [cursorName]
-----------------------
show - Keyword for showing the cursor if not already visible

cursorName - Set to the name of the cursor image file previously set in the 
             parameters

=== Contact us ===
[Website] : https://lunatechs.dev
[Twitter] : https://twitter.com/LunaTechsDev
[Github]  : https://github.com/LunaTechsDev
[Patreon] : https://patreon.com/LunaTechsDev

 
=== License ===
This plugin is released under MIT license.
https://mit-license.org/

Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
 */

/*~struct~CursorData:
 * @param filename
 * @text Cursor Image
 * @desc The image to use as the default cursor
 * @type file
 * @dir img/system
 * @default GameCursor.png
 */

/*~struct~EventCursorData:
 * @param eventName
 * @text Event Name
 * @desc The event name this cursor data applies to
 * @type text
 * @default
 *
 * @param filename
 * @text Hover Image Filename
 * @desc The image to use as the hover image
 * @type file
 * @dir img/system
 * @default GameCursor.png
 */

/*~struct~EventCommandData:
 * @param showText
 * @text Show Text
 * @desc The cursor image to use when hovering over an event with the show text command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param changeEquip
 * @text Change Equip
 * @desc The cursor image to use when hovering over an event with the change equip command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param changeItem
 * @text Change Item
 * @desc The cursor image to use when hovering over an event with the change item command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param changeGold
 * @text Change Gold
 * @desc The cursor image to use when hovering over an event with the change gold command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param transfer
 * @text Transfer
 * @desc The cursor image to use when hovering over an event with the transfer command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param vehicle
 * @text On/Off Vehicle
 * @desc The cursor image to use when hovering over an event with the on/off vehicle command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param battle
 * @text Battle Porcessing
 * @desc The cursor image to use when hovering over an event with the battle processing command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param shop
 * @text Shop Processing
 * @desc The cursor image to use when hovering over an event with the shop processing command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 *
 * @param save
 * @text Save
 * @desc The cursor image to use when hovering over an event with the save command.
 * @type file
 * @dir img/system
 * @default GameCursor.png
 */

(function ($hx_exports, $global) {
  "use strict";
  var $estr = function () {
      return js_Boot.__string_rec(this, "");
    },
    $hxEnums = $hxEnums || {};
  class HxOverrides {
    static cca(s, index) {
      let x = s.charCodeAt(index);
      if (x != x) {
        return undefined;
      }
      return x;
    }
    static substr(s, pos, len) {
      if (len == null) {
        len = s.length;
      } else if (len < 0) {
        if (pos == 0) {
          len = s.length + len;
        } else {
          return "";
        }
      }
      return s.substr(pos, len);
    }
    static now() {
      return Date.now();
    }
  }

  HxOverrides.__name__ = true;
  class Lambda {
    static find(it, f) {
      let v = $getIterator(it);
      while (v.hasNext()) {
        let v1 = v.next();
        if (f(v1)) {
          return v1;
        }
      }
      return null;
    }
  }

  Lambda.__name__ = true;
  class Main {
    static main() {
      let rawParams = Lambda.find($plugins, function (p) {
        return p.description.indexOf("<Luna_MouseSystem>") != -1;
      }).parameters;
      Main.params = utils_Parse.parseParameters(rawParams);

      //=============================================================================
      // DataManager
      //=============================================================================
      let _TouchInput_mouseX = TouchInput.mouseX;
      TouchInput.mouseX = null;
      let _TouchInput_mouseY = TouchInput.mouseY;
      TouchInput.mouseY = null;
      let _TouchInput__mouseMoveListeners = TouchInput._mouseMoveListeners;
      TouchInput._mouseMoveListeners = null;
      let _TouchInput_initialize = TouchInput.initialize;
      TouchInput.initialize = function () {
        _TouchInput_initialize.call(this);
        this._mouseMoveListeners = [];
        this.mouseX = 0;
        this.mouseY = 0;
      };
      let _TouchInput__onMouseMove = TouchInput._onMouseMove;
      TouchInput._onMouseMove = function (event) {
        _TouchInput__onMouseMove.call(this, event);
        if (this._mouseMoveListeners.length > 0) {
          let _g = 0;
          let _g1 = this._mouseMoveListeners;
          while (_g < _g1.length) {
            let listener = _g1[_g];
            ++_g;
            listener(event);
          }
          this.mouseX = event.clientX;
          this.mouseY = event.clientY;
        }
      };
      let _TouchInput_addMouseMoveListener = TouchInput.addMouseMoveListener;
      TouchInput.addMouseMoveListener = function (listener) {
        if (listener != null) {
          this._mouseMoveListeners.push(listener);
        } else {
          throw new Error(
            "Cursor move event listener must be of type function"
          );
        }
      };
      let _TouchInput_removeMouseMoveListener =
        TouchInput.removeMouseMoveListener;
      TouchInput.removeMouseMoveListener = function (listener) {
        if (listener != null) {
          let listenerToRemove = Lambda.find(
            this._mouseMoveListeners,
            function (l) {
              return l == listener;
            }
          );
          if (listenerToRemove) {
            let index = this._mouseMoveListeners.indexOf(listenerToRemove);
            this._mouseMoveListeners.splice(index, 1);
          }
        } else {
          throw new Error(
            "Cursor move event listener must be of type function"
          );
        }
      };
      let _Stage__cursorListener = Stage.prototype._cursorListener;
      Stage.prototype._cursorListener = null;
      let _Stage__cursor = Stage.prototype._cursor;
      Stage.prototype._cursor = null;
      let _Stage_initialize = Stage.prototype.initialize;
      Stage.prototype.initialize = function () {
        _Stage_initialize.call(this);
        this._cursorListener = $bind(this, this._mouseMoveListener);
        TouchInput.addMouseMoveListener(this._cursorListener);
        this.updateCursors();
        document.body.style.cursor = "none";
      };
      let _Stage_createMouseCursor = Stage.prototype.createMouseCursor;
      Stage.prototype.createMouseCursor = function (filename) {
        let cursors = Main.params.cursors;
        let bitmap = ImageManager.loadSystem(filename);
        let data = { name: filename, url: bitmap.url, hoverName: "" };
        core_CursorLoader.activeData = data;
        this._cursor = new sprites_CursorSprite(bitmap, data);
        this.addChild(this._cursor);
      };
      let _Stage_updateCursors = Stage.prototype.updateCursors;
      Stage.prototype.updateCursors = function () {
        let cursors = Main.params.cursors;
        if (
          DataManager.isDatabaseLoaded() &&
          $gameSystem.activeCursor != null
        ) {
          if ($gameSystem.activeCursor != core_CursorLoader.activeData) {
            core_CursorLoader.activeData = $gameSystem.activeCursor;
          }
        }
        if (core_CursorLoader.hasActiveData()) {
          this.createMouseCursor(core_CursorLoader.activeData.name);
        } else {
          this.createMouseCursor(Main.params.cursors[0].filename);
        }
        let _g = 0;
        while (_g < cursors.length) {
          let cursor = cursors[_g];
          ++_g;
          core_CursorLoader.addCursor({
            name: cursor.filename,
            url: "img/system/" + Std.string(cursor.filename) + ".png",
            hoverName: "",
          });
        }
        let _g1 = 0;
        let _g2 = Reflect.fields(Main.params.hoverEventCommands);
        while (_g1 < _g2.length) {
          let cursor = _g2[_g1];
          ++_g1;
          let filename = Reflect.getProperty(
            Main.params.hoverEventCommands,
            cursor
          );
          core_CursorLoader.addCursor({
            name: filename,
            url: "img/system/" + filename + ".png",
            hoverName: filename,
          });
        }
      };
      let _Stage__mouseMoveListener = Stage.prototype._mouseMoveListener;
      Stage.prototype._mouseMoveListener = function (event) {
        if (this._cursor != null) {
          this._cursor.x = event.clientX;
          this._cursor.y = event.clientY;
        }
      };
      let _Game_System_initialize = Game_System.prototype.initialize;
      Game_System.prototype.initialize = function () {
        this.activeCursor = core_CursorLoader.activeData;
        _Game_System_initialize.call(this);
      };
      let _Scene_Base_initialize = Scene_Base.prototype.initialize;
      Scene_Base.prototype.initialize = function () {
        _Scene_Base_initialize.call(this);
        if (this._cursor) {
          this._cursor.x = TouchInput.mouseX;
          this._cursor.y = TouchInput.mouseY;
        }
        core_CursorLoader.on("cursor-change", $bind(this, this.onCursorChange));
        core_CursorLoader.on(
          "cursor-hover-change",
          $bind(this, this.onCursorHoverChange)
        );
      };
      let _Scene_Base_onCursorChange = Scene_Base.prototype.onCursorChange;
      Scene_Base.prototype.onCursorChange = function (data) {
        this._cursor.cursorData = data;
        $gameSystem.activeCursor = data;
      };
      let _Scene_Base_onCursorHoverChange =
        Scene_Base.prototype.onCursorHoverChange;
      Scene_Base.prototype.onCursorHoverChange = function (hoverName) {
        this._cursor.cursorData.hoverName = hoverName;
      };
      let _Scene_Base_updateChildren = Scene_Base.prototype.updateChildren;
      Scene_Base.prototype.updateChildren = function () {
        _Scene_Base_updateChildren.call(this);
        if (this.children.indexOf(this._cursor) != this.children.length - 1) {
          this.removeChild(this._cursor);
          this.addChild(this._cursor);
        }
      };
      let _Scene_Base_terminate = Scene_Base.prototype.terminate;
      Scene_Base.prototype.terminate = function () {
        if (this._cursorListener) {
          TouchInput.removeMouseMoveListener(this._cursorListener);
        }
      };
      let _Scene_Map_isEventTouched = Scene_Map.prototype.isEventTouched;
      Scene_Map.prototype.isEventTouched = function (event) {
        let mx = TouchInput.mouseX;
        let my = TouchInput.mouseY;
        let rect_x = event.screenX() - 24;
        let rect_width = 48;
        let rect_height = 48;
        let rect_y = event.screenY() - 48;
        if (mx > rect_x && mx < rect_x + rect_width && my > rect_y) {
          return my < rect_y + rect_height;
        } else {
          return false;
        }
      };
      let _Scene_Map_eventTouchedByMouse =
        Scene_Map.prototype.eventTouchedByMouse;
      Scene_Map.prototype.eventTouchedByMouse = function () {
        let events = $gameMap.events();
        let _gthis = this;
        return Lambda.find(events, function (event) {
          return _gthis.isEventTouched(event);
        });
      };
      let _Scene_Map_evaulateNotebox = Scene_Map.prototype.evaulateNotebox;
      Scene_Map.prototype.evaulateNotebox = function (event) {
        let data = $dataMap.events[event.eventId()];
        if (data.note != null) {
          let cursorName = data.note.split(":")[1];
          if (cursorName != null) {
            core_CursorLoader.changeHoverData(StringTools.trim(cursorName));
          }
        }
      };
      let _Scene_Map_evaulateNamebox = Scene_Map.prototype.evaulateNamebox;
      Scene_Map.prototype.evaulateNamebox = function (event) {
        let data = $dataMap.events[event.eventId()];
        if (data.name != null) {
          let cursorData = Main.params.hoverEvents.find(function (e) {
            return e.eventName == data.name;
          });
          if (cursorData != null) {
            core_CursorLoader.changeHoverData(cursorData.filename);
          }
        }
      };
      let _Scene_Map_evaluateCommandList =
        Scene_Map.prototype.evaluateCommandList;
      Scene_Map.prototype.evaluateCommandList = function (event) {
        let hasCommand = {
          showText: false,
          changeEquip: false,
          changeItem: false,
          changeGold: false,
          transfer: false,
          vehicle: false,
          battle: false,
          shop: false,
          save: false,
        };
        let page = event.page();
        if (page != null && page.list != null) {
          let _g = 0;
          let _g1 = page.list;
          while (_g < _g1.length) {
            let command = _g1[_g];
            ++_g;
            let code = command.code;
            if (code == 101) {
              hasCommand.showText = true;
            }
            if (code == 128 || code == 127) {
              hasCommand.changeEquip = true;
              break;
            }
            if (code == 125) {
              hasCommand.changeGold = true;
              break;
            }
            if (code == 126) {
              hasCommand.changeItem = true;
              break;
            }
            if (code == 201) {
              hasCommand.transfer = true;
              break;
            }
            if (code == 206) {
              hasCommand.vehicle = true;
              break;
            }
            if (code == 301) {
              hasCommand.battle = true;
              break;
            }
            if (code == 302) {
              hasCommand.shop = true;
              break;
            }
            if (code == 352) {
              hasCommand.save = true;
              break;
            }
          }
        }
        let _g = 0;
        let _g1 = Reflect.fields(hasCommand);
        while (_g < _g1.length) {
          let command = _g1[_g];
          ++_g;
          let value = Reflect.getProperty(hasCommand, command);
          if (value && core_CursorLoader.activeData.name != command) {
            let name = Reflect.getProperty(
              Main.params.hoverEventCommands,
              command
            );
            core_CursorLoader.changeHoverData(name);
            break;
          } else {
            core_CursorLoader.resetHoverName();
          }
        }
      };
      let _Scene_Map_updateMain = Scene_Map.prototype.updateMain;
      Scene_Map.prototype.updateMain = function () {
        _Scene_Map_updateMain.call(this);
        let eventTouched = this.eventTouchedByMouse();
        if (eventTouched != null) {
          this._cursor.hover = true;
          this.evaulateNamebox(eventTouched);
          this.evaulateNotebox(eventTouched);
          this.evaluateCommandList(eventTouched);
        } else {
          this._cursor.hover = false;
        }
      };
      Main.registerPluginCommands();
    }
    static registerPluginCommands() {
      PluginManager.registerCommand(Main.pluginName, "showCursor", function (
        args
      ) {
        let cursor = SceneManager._scene._cursor;
        cursor.visible = true;
        document.body.style.cursor = "none";
      });
      PluginManager.registerCommand(Main.pluginName, "hideCursor", function (
        args
      ) {
        let option = utils_Parse.parseParameters(args);
        let cursor = SceneManager._scene._cursor;
        cursor.visible = false;
        if (option.showDefault) {
          document.body.style.cursor = "auto";
        }
      });
      PluginManager.registerCommand(Main.pluginName, "changeCursor", function (
        args
      ) {
        core_CursorLoader.changeCursor(args.filename);
      });
    }
  }

  Main.__name__ = true;
  Math.__name__ = true;
  class Reflect {
    static getProperty(o, field) {
      let tmp;
      if (o == null) {
        return null;
      } else {
        let tmp1;
        if (o.__properties__) {
          tmp = o.__properties__["get_" + field];
          tmp1 = tmp;
        } else {
          tmp1 = false;
        }
        if (tmp1) {
          return o[tmp]();
        } else {
          return o[field];
        }
      }
    }
    static fields(o) {
      let a = [];
      if (o != null) {
        let hasOwnProperty = Object.prototype.hasOwnProperty;
        for (var f in o) {
          if (
            f != "__id__" &&
            f != "hx__closures__" &&
            hasOwnProperty.call(o, f)
          ) {
            a.push(f);
          }
        }
      }
      return a;
    }
  }

  Reflect.__name__ = true;
  class Std {
    static string(s) {
      return js_Boot.__string_rec(s, "");
    }
  }

  Std.__name__ = true;
  class StringTools {
    static isSpace(s, pos) {
      let c = HxOverrides.cca(s, pos);
      if (!(c > 8 && c < 14)) {
        return c == 32;
      } else {
        return true;
      }
    }
    static ltrim(s) {
      let l = s.length;
      let r = 0;
      while (r < l && StringTools.isSpace(s, r)) ++r;
      if (r > 0) {
        return HxOverrides.substr(s, r, l - r);
      } else {
        return s;
      }
    }
    static rtrim(s) {
      let l = s.length;
      let r = 0;
      while (r < l && StringTools.isSpace(s, l - r - 1)) ++r;
      if (r > 0) {
        return HxOverrides.substr(s, 0, l - r);
      } else {
        return s;
      }
    }
    static trim(s) {
      return StringTools.ltrim(StringTools.rtrim(s));
    }
    static replace(s, sub, by) {
      return s.split(sub).join(by);
    }
  }

  StringTools.__name__ = true;
  class Utils {
    static parseFilename(path, ext) {
      if (ext == null) {
        ext = true;
      }
      let filename = StringTools.replace(
        HxOverrides.substr(path, path.lastIndexOf("/"), null),
        "/",
        ""
      );
      if (ext) {
        return filename;
      }
      return StringTools.replace(filename, ".png", "");
    }
  }

  Utils.__name__ = true;
  class core_CursorLoader {
    static on(eventName, func) {
      core_CursorLoader._emitter.on(eventName, func);
    }
    static hasActiveData() {
      return core_CursorLoader.activeData != null;
    }
    static addCursor(data) {
      if (
        !Object.prototype.hasOwnProperty.call(
          core_CursorLoader.cursors.h,
          data.name
        )
      ) {
        core_CursorLoader.cursors.h[data.name] = data;
      }
    }
    static getCursorData(name) {
      if (
        Object.prototype.hasOwnProperty.call(core_CursorLoader.cursors.h, name)
      ) {
        return core_CursorLoader.cursors.h[name];
      }
      return core_CursorLoader.activeData;
    }
    static changeCursor(name) {
      if (
        Object.prototype.hasOwnProperty.call(core_CursorLoader.cursors.h, name)
      ) {
        core_CursorLoader.activeData = core_CursorLoader.cursors.h[name];
        core_CursorLoader._emitter.emit(
          "cursor-change",
          core_CursorLoader.activeData
        );
      }
    }
    static changeHoverData(hoverName) {
      if (core_CursorLoader.activeData.hoverName != null) {
        core_CursorLoader.activeData.hoverName = hoverName;
      }
      core_CursorLoader._emitter.emit(
        "cursor-hover-change",
        core_CursorLoader.activeData.hoverName
      );
    }
    static resetHoverName() {
      core_CursorLoader.activeData.hoverName = "";
      core_CursorLoader._emitter.emit(
        "cursor-hover-change",
        core_CursorLoader.activeData
      );
    }
  }

  core_CursorLoader.__name__ = true;
  class core_Game_$System extends Game_System {
    initialize() {
      this.activeCursor = core_CursorLoader.activeData;
      _Game_System_initialize.call(this);
    }
  }

  core_Game_$System.__name__ = true;
  class core_Stage extends Stage {
    constructor() {
      super();
    }
    initialize() {
      _Stage_initialize.call(this);
      this._cursorListener = $bind(this, this._mouseMoveListener);
      TouchInput.addMouseMoveListener(this._cursorListener);
      this.updateCursors();
      document.body.style.cursor = "none";
    }
    createMouseCursor(filename) {
      let cursors = Main.params.cursors;
      let bitmap = ImageManager.loadSystem(filename);
      let data = { name: filename, url: bitmap.url, hoverName: "" };
      core_CursorLoader.activeData = data;
      this._cursor = new sprites_CursorSprite(bitmap, data);
      this.addChild(this._cursor);
    }
    updateCursors() {
      let cursors = Main.params.cursors;
      if (DataManager.isDatabaseLoaded() && $gameSystem.activeCursor != null) {
        if ($gameSystem.activeCursor != core_CursorLoader.activeData) {
          core_CursorLoader.activeData = $gameSystem.activeCursor;
        }
      }
      if (core_CursorLoader.hasActiveData()) {
        this.createMouseCursor(core_CursorLoader.activeData.name);
      } else {
        this.createMouseCursor(Main.params.cursors[0].filename);
      }
      let _g = 0;
      while (_g < cursors.length) {
        let cursor = cursors[_g];
        ++_g;
        core_CursorLoader.addCursor({
          name: cursor.filename,
          url: "img/system/" + Std.string(cursor.filename) + ".png",
          hoverName: "",
        });
      }
      let _g1 = 0;
      let _g2 = Reflect.fields(Main.params.hoverEventCommands);
      while (_g1 < _g2.length) {
        let cursor = _g2[_g1];
        ++_g1;
        let filename = Reflect.getProperty(
          Main.params.hoverEventCommands,
          cursor
        );
        core_CursorLoader.addCursor({
          name: filename,
          url: "img/system/" + filename + ".png",
          hoverName: filename,
        });
      }
    }
    _mouseMoveListener(event) {
      if (this._cursor != null) {
        this._cursor.x = event.clientX;
        this._cursor.y = event.clientY;
      }
    }
  }

  core_Stage.__name__ = true;
  class core_TouchInput extends TouchInput {}

  core_TouchInput.__name__ = true;
  class haxe_ds_StringMap {
    constructor() {
      this.h = Object.create(null);
    }
  }

  haxe_ds_StringMap.__name__ = true;
  class haxe_iterators_ArrayIterator {
    constructor(array) {
      this.current = 0;
      this.array = array;
    }
    hasNext() {
      return this.current < this.array.length;
    }
    next() {
      return this.array[this.current++];
    }
  }

  haxe_iterators_ArrayIterator.__name__ = true;
  class js_Boot {
    static __string_rec(o, s) {
      if (o == null) {
        return "null";
      }
      if (s.length >= 5) {
        return "<...>";
      }
      let t = typeof o;
      if (t == "function" && (o.__name__ || o.__ename__)) {
        t = "object";
      }
      switch (t) {
        case "function":
          return "<function>";
        case "object":
          if (o.__enum__) {
            let e = $hxEnums[o.__enum__];
            let n = e.__constructs__[o._hx_index];
            let con = e[n];
            if (con.__params__) {
              s = s + "\t";
              return (
                n +
                "(" +
                (function ($this) {
                  var $r;
                  let _g = [];
                  {
                    let _g1 = 0;
                    let _g2 = con.__params__;
                    while (true) {
                      if (!(_g1 < _g2.length)) {
                        break;
                      }
                      let p = _g2[_g1];
                      _g1 = _g1 + 1;
                      _g.push(js_Boot.__string_rec(o[p], s));
                    }
                  }
                  $r = _g;
                  return $r;
                })(this).join(",") +
                ")"
              );
            } else {
              return n;
            }
          }
          if (o instanceof Array) {
            let str = "[";
            s += "\t";
            let _g = 0;
            let _g1 = o.length;
            while (_g < _g1) {
              let i = _g++;
              str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i], s);
            }
            str += "]";
            return str;
          }
          let tostr;
          try {
            tostr = o.toString;
          } catch (_g) {
            return "???";
          }
          if (
            tostr != null &&
            tostr != Object.toString &&
            typeof tostr == "function"
          ) {
            let s2 = o.toString();
            if (s2 != "[object Object]") {
              return s2;
            }
          }
          let str = "{\n";
          s += "\t";
          let hasp = o.hasOwnProperty != null;
          let k = null;
          for (k in o) {
            if (hasp && !o.hasOwnProperty(k)) {
              continue;
            }
            if (
              k == "prototype" ||
              k == "__class__" ||
              k == "__super__" ||
              k == "__interfaces__" ||
              k == "__properties__"
            ) {
              continue;
            }
            if (str.length != 2) {
              str += ", \n";
            }
            str += s + k + " : " + js_Boot.__string_rec(o[k], s);
          }
          s = s.substring(1);
          str += "\n" + s + "}";
          return str;
        case "string":
          return o;
        default:
          return String(o);
      }
    }
  }

  js_Boot.__name__ = true;

  class scenes_Scene_$Base extends Scene_Base {
    constructor() {
      super();
    }
    initialize() {
      _Scene_Base_initialize.call(this);
      if (this._cursor) {
        this._cursor.x = TouchInput.mouseX;
        this._cursor.y = TouchInput.mouseY;
      }
      core_CursorLoader.on("cursor-change", $bind(this, this.onCursorChange));
      core_CursorLoader.on(
        "cursor-hover-change",
        $bind(this, this.onCursorHoverChange)
      );
    }
    onCursorChange(data) {
      this._cursor.cursorData = data;
      $gameSystem.activeCursor = data;
    }
    onCursorHoverChange(hoverName) {
      this._cursor.cursorData.hoverName = hoverName;
    }
    updateChildren() {
      _Scene_Base_updateChildren.call(this);
      if (this.children.indexOf(this._cursor) != this.children.length - 1) {
        this.removeChild(this._cursor);
        this.addChild(this._cursor);
      }
    }
    terminate() {
      if (this._cursorListener) {
        TouchInput.removeMouseMoveListener(this._cursorListener);
      }
    }
  }

  scenes_Scene_$Base.__name__ = true;
  class scenes_Scene_$Map extends Scene_Map {
    constructor() {
      super();
    }
    isEventTouched(event) {
      let mx = TouchInput.mouseX;
      let my = TouchInput.mouseY;
      let rect_x = event.screenX() - 24;
      let rect_width = 48;
      let rect_height = 48;
      let rect_y = event.screenY() - 48;
      if (mx > rect_x && mx < rect_x + rect_width && my > rect_y) {
        return my < rect_y + rect_height;
      } else {
        return false;
      }
    }
    eventTouchedByMouse() {
      let _gthis = this;
      return Lambda.find($gameMap.events(), function (event) {
        return _gthis.isEventTouched(event);
      });
    }
    evaulateNotebox(event) {
      let data = $dataMap.events[event.eventId()];
      if (data.note != null) {
        let cursorName = data.note.split(":")[1];
        if (cursorName != null) {
          core_CursorLoader.changeHoverData(StringTools.trim(cursorName));
        }
      }
    }
    evaulateNamebox(event) {
      let data = $dataMap.events[event.eventId()];
      if (data.name != null) {
        let cursorData = Main.params.hoverEvents.find(function (e) {
          return e.eventName == data.name;
        });
        if (cursorData != null) {
          core_CursorLoader.changeHoverData(cursorData.filename);
        }
      }
    }
    evaluateCommandList(event) {
      let hasCommand = {
        showText: false,
        changeEquip: false,
        changeItem: false,
        changeGold: false,
        transfer: false,
        vehicle: false,
        battle: false,
        shop: false,
        save: false,
      };
      let page = event.page();
      if (page != null && page.list != null) {
        let _g = 0;
        let _g1 = page.list;
        while (_g < _g1.length) {
          let code = _g1[_g++].code;
          if (code == 101) {
            hasCommand.showText = true;
          }
          if (code == 128 || code == 127) {
            hasCommand.changeEquip = true;
            break;
          }
          if (code == 125) {
            hasCommand.changeGold = true;
            break;
          }
          if (code == 126) {
            hasCommand.changeItem = true;
            break;
          }
          if (code == 201) {
            hasCommand.transfer = true;
            break;
          }
          if (code == 206) {
            hasCommand.vehicle = true;
            break;
          }
          if (code == 301) {
            hasCommand.battle = true;
            break;
          }
          if (code == 302) {
            hasCommand.shop = true;
            break;
          }
          if (code == 352) {
            hasCommand.save = true;
            break;
          }
        }
      }
      let _g = 0;
      let _g1 = Reflect.fields(hasCommand);
      while (_g < _g1.length) {
        let command = _g1[_g];
        ++_g;
        if (
          Reflect.getProperty(hasCommand, command) &&
          core_CursorLoader.activeData.name != command
        ) {
          core_CursorLoader.changeHoverData(
            Reflect.getProperty(Main.params.hoverEventCommands, command)
          );
          break;
        } else {
          core_CursorLoader.resetHoverName();
        }
      }
    }
    updateMain() {
      _Scene_Map_updateMain.call(this);
      let eventTouched = this.eventTouchedByMouse();
      if (eventTouched != null) {
        this._cursor.hover = true;
        this.evaulateNamebox(eventTouched);
        this.evaulateNotebox(eventTouched);
        this.evaluateCommandList(eventTouched);
      } else {
        this._cursor.hover = false;
      }
    }
  }

  scenes_Scene_$Map.__name__ = true;
  class sprites_CursorSprite extends Sprite {
    constructor(bitmap, cursorData) {
      super(bitmap);
      if (cursorData != null) {
        this.set_cursorData(cursorData);
      }
      this.set_cursorData({
        name: Utils.parseFilename(bitmap.url, false),
        url: bitmap.url,
        hoverName: "",
      });
    }
    update() {
      super.update();
      if (this.hover) {
        let hoverData = core_CursorLoader.getCursorData(
          this.cursorData.hoverName
        );
        if (hoverData != null && this.bitmap.url != hoverData.url) {
          this.bitmap = ImageManager.loadSystem(hoverData.name);
        }
      } else if (this.bitmap.url != this.cursorData.url) {
        this.bitmap = ImageManager.loadSystem(this.cursorData.name);
      }
    }
    set_cursorData(cursorData) {
      if (this.bitmap.url != cursorData.url) {
        this.bitmap = ImageManager.loadSystem(cursorData.name);
      }
      return (this.cursorData = cursorData);
    }
  }

  sprites_CursorSprite.__name__ = true;
  Object.assign(sprites_CursorSprite.prototype, {
    __properties__: { set_cursorData: "set_cursorData" },
  });

  class utils_Fn {
    static proto(obj) {
      return obj.prototype;
    }
    static updateProto(obj, fn) {
      return fn(obj.prototype);
    }
    static updateEntity(obj, fn) {
      return fn(obj);
    }
  }

  utils_Fn.__name__ = true;
  class utils_Parse {
    static parseParameters(parameters) {
      return (function (string) {
        function superParse(string) {
          var temp;
          try {
            temp = JsonEx.parse(
              typeof string === "object" ? JsonEx.stringify(string) : string
            );
          } catch (e) {
            return string;
          }
          if (typeof temp === "object") {
            Object.keys(temp).forEach(function (key) {
              temp[key] = superParse(temp[key]);
              if (temp[key] === " ") {
                temp[key] = null;
              }
            });
          }
          return temp;
        }
        return superParse(JsonEx.stringify(string));
      })(parameters);
    }
  }

  utils_Parse.__name__ = true;
  function $getIterator(o) {
    if (o instanceof Array) return new haxe_iterators_ArrayIterator(o);
    else return o.iterator();
  }
  var $_;
  function $bind(o, m) {
    if (m == null) return null;
    if (m.__id__ == null) m.__id__ = $global.$haxeUID++;
    var f;
    if (o.hx__closures__ == null) o.hx__closures__ = {};
    else f = o.hx__closures__[m.__id__];
    if (f == null) {
      f = m.bind(o);
      o.hx__closures__[m.__id__] = f;
    }
    return f;
  }
  $global.$haxeUID |= 0;
  if (
    typeof performance != "undefined"
      ? typeof performance.now == "function"
      : false
  ) {
    HxOverrides.now = performance.now.bind(performance);
  }
  String.__name__ = true;
  Array.__name__ = true;
  js_Boot.__toStr = {}.toString;
  Main.pluginName = "Luna_MouseSystem";
  core_CursorLoader.cursors = new haxe_ds_StringMap();
  core_CursorLoader._emitter = new PIXI.utils.EventEmitter();
  Main.main();
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this,
  typeof window != "undefined"
    ? window
    : typeof global != "undefined"
    ? global
    : typeof self != "undefined"
    ? self
    : this
);
